#!/usr/bin/env python
import os
import sys
import json
import ConfigParser
import argparse
import cookielib
import requests

API_VERSION = '/api/v1'
SESSION = requests.session()
JAR = cookielib.CookieJar()
HEADERS = {'Content-type': 'application/json', 'Accept': 'text/plain'}

def get_credentials(config=None):
    Config = ConfigParser.ConfigParser()
    file_exists = False
    if not config:
        config = (
            os.path.join(
                os.environ.get('HOME'), '.vFense.config'
            )
        )
    if os.path.exists(config):
        file_exists = True
        Config.read(config)
        username = Config.get('vFense', 'user_name')
        password = Config.get('vFense', 'password')
        url = Config.get('vFense', 'url')
    else:
        username = None
        password = None
        url = None

    return(username, password, url, file_exists)

def authenticate(username, password, url):
    login_url = os.path.join(url, 'login')
    creds = {
        'username': username,
        'password': password
    }
    authenticated = (
        SESSION.post(
            login_url, data=json.dumps(creds),
            verify=False, headers=HEADERS, cookies=JAR
        )
    )
    return authenticated

class vFense(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='vFense command line tool.',
            usage='''vfense <api> [<args>]

The various api base calls.
   users      Search, create, edit and delete users.
   views      Search, create, edit and delete views.
   groups     Search, create, edit and delete groups.
   tags       Search, create, edit and delete tags.
   agents     Search, edit and delete agents.
   operations Search operations.
   schedule   Search, create, and delete schedules.
''')
        self.username, self.password, self.url, config_exists = (
            get_credentials()
        )
        if config_exists:
            parser.add_argument(
                'api', help='The api you want to run',
                choices=[
                    'users', 'views', 'groups',
                    'agents', 'tags', 'schedule',
                    'operations', 'dashboard'
                ]
            )
            args = parser.parse_args(sys.argv[1:2])
            if not hasattr(self, args.api):
                print 'Unrecognized api'
                parser.print_help()
                exit(1)
            getattr(self, args.api)()

        else:
            config_file = os.path.join(os.getenv('HOME'), '.vFense.config')
            print 'Missing config {0}'.format(config_file)
            exit(1)

#######################AGENTS MANAGEMENT######################################

    def agents(self):
        self.agents_url = os.path.join(self.url, 'api/v1/agents')
        parser = argparse.ArgumentParser(
            description='Search for agents and delete agents'
        )
        parser.add_argument(
            'command', help='commands available for agents',
            choices=['search', 'delete', 'edit', 'get']
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.command == 'search':
            self.agents_search()

        elif args.command == 'delete':
            self.delete_agents()


    def delete_agents(self):
        parser = argparse.ArgumentParser(
            description='''
        Delete 1 or multiple agents from vFense. This will send the uninstall
        operation to the agent.
        '''
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--agent_ids', dest='agent_ids', action='append',
                help='The ids of the agents, you are deleting.'
            )
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.agents_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def agents_search(self):

        parser = self._common_search_parser()
        parser.description = """Search for agents"""
        parser.add_argument(
            '--sort_by', dest='sort_by', default='computer_name', type=str,
            help='The key that will be used to sort by.', choices=[
                'computer_name', 'display_name', 'os_string',
                'os_code', 'agent_status', 'available_updates',
                'available_vulnerabilities' 'production_level',
                'last_agent_update'
            ]
        )
        parser.add_argument(
            '--query', dest='query',
            help='''The regular expression of the computer name
            or display name you are searching for.'''
        )
        parser.add_argument(
            '--ip', dest='ip',
            help='''The regular expression of the ip address you are
            searching for.'''
        )
        parser.add_argument(
            '--mac', dest='mac',
            help='''The regular expression of the mac address you are
            searching for.'''
        )
        parser.add_argument(
            '--fkey', dest='fkey',
            help='''The property you want to filter by. This option is only
            used with the fval option''',
            choices=[
                'os_string', 'os_code', 'agent_status',  'production_level'
            ]
        )
        parser.add_argument(
            '--fval', dest='fval',
            help='''The value you are filtering by. This option is only used
            with the fkey option'''
        )
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.agents_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content['data'], indent=4)


#######################USER MANAGEMENT######################################

    def users(self):
        self.user_url = os.path.join(self.url, 'api/v1/user')
        self.users_url = os.path.join(self.url, 'api/v1/users')
        parser = argparse.ArgumentParser(description='users api calls')
        parser.add_argument(
            'command', help='commands available for users',
            choices=['get', 'edit', 'delete', 'add', 'remove', 'search']
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.command == 'get':
            self.user_name(args.command)

        elif args.command == 'delete':
            self.user_name(args.command)

        elif args.command == 'edit':
            self.user_name(args.command)

        elif args.command == 'add_to':
            self.user_name(args.command)

        elif args.command == 'remove_from':
            self.user_name(args.command)

        elif args.command == 'search':
            self.users_search()

        elif args.command == 'create':
            self.user_create()

        elif args.command == 'delete_multiple':
            self.delete_users()


    def user_name(self, command):
        parser = argparse.ArgumentParser(
            description='the user name you are going to manage.'
        )
        parser.add_argument(
            '--user_name', type=str, required=True,
            help='name of the user'
        )
        args = parser.parse_args(sys.argv[3:4])
        user_name = args.user_name
        if command == 'get':
            self.user_get(user_name)

        elif command == 'edit':
            self.user_edit(user_name)

        elif command == 'delete':
            self.user_delete(user_name)

        elif command == 'add_to':
            self.add_views_or_groups_to_user(user_name)

        elif command == 'remove_from':
            self.delete_views_or_groups_from_user(user_name)


    def user_get(self, user_name):
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.user_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content['data'], indent=4)


    def add_views_or_groups_to_user(self, user_name):
        msg = 'Add views or groups to this user {0}'.format(user_name)
        parser = argparse.ArgumentParser(description=msg)
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--view_names', dest='view_names', action='append',
                help='Views to add to this user.'
            )
            parser.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='Group ids to add to this user.'
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            pay_load['action'] = 'add'
            data = (
                SESSION.post(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content['data'], indent=4)


    def delete_views_or_groups_from_user(self, user_name):
        msg = 'Remove views or groups from this user {0}'.format(user_name)
        parser = argparse.ArgumentParser(description=msg)
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--view_names', dest='view_names', action='append',
                help='Views to remove from this user.'
            )
            parser.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='Group ids to deleted from this user.'
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            pay_load['action'] = 'delete'
            data = (
                SESSION.post(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content['data'], indent=4)


    def user_edit(self, user_name):
        msg = 'Edit the attributes of this user {0}'.format(user_name)
        parser = argparse.ArgumentParser(description=msg)
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--password', dest='password', type=str,
                help='The current password of the user.', default=None
            )
            parser.add_argument(
                '--new_password', dest='new_password', type=str,
                help='The new password of the user.', default=None
            )
            parser.add_argument(
                '--fullname', dest='fullname', type=str,
                help='Edit the full name of the user.', default=None
            )
            parser.add_argument(
                '--email', dest='email', type=str,
                help='Edit the email of the user.', default=None
            )
            parser.add_argument(
                '--current_view', dest='current_view', type=str,
                help='Change the current view of the user.', default=None
            )
            parser.add_argument(
                '--default_view', dest='default_view', type=str,
                help='Change the default view of the user.', default=None
            )
            parser.add_argument(
                '--enabled', dest='enabled', type=str,
                help='Enable or disable a user.', default=None,
                choices=['toggle']
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            data = (
                SESSION.put(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def user_delete(self, user_name):
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.delete(
                    self.user_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def delete_users(self):
        parser = argparse.ArgumentParser(
            description='Delete 1 or multiple users.'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--user_names', dest='user_names', action='append',
                help='The names of the users, you are deleting.'
            )
            vfense = authenticate(self.username, self.password, self.url)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.users_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def user_create(self):
        parser = argparse.ArgumentParser(
            description='Create a new user'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--user_name', dest='user_name', type=str, required=True,
                help='The name of the user, you are creating.'
            )
            parser.add_argument(
                '--password', dest='password', type=str, required=True,
                help='''The password of the user you are createing.
            The password must contain the following: 1 Special characater,
            1 Uppercase, 1 Lowercase, 1 Number, and a total of 8 characters'''
            )
            parser.add_argument(
                '--full_name', dest='full_name', type=str,
                help='The full name of the user, you are creating.'
            )
            parser.add_argument(
                '--email', dest='email', type=str,
                help='The email address of the user, you are creating.'
            )
            parser.add_argument(
                '--enabled', dest='enabled', action='store_true',
                help='Create the user as enabled, the default is disabled',
            )
            parser.add_argument(
                '--is_global', dest='is_global', action='store_true',
                help='The email address of the user, you are creating.',
            )
            parser.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='The group ids, this user will be a part of.'
            )
            parser.add_argument(
                '--view_context', dest='view_context', type=str,
                help='''The view this user is being created in.
            The default is to use the view of the currently logged in user.'''
            )
            parser.set_defaults(is_global=False)
            parser.set_defaults(enabled=False)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.post(
                    self.users_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def users_search(self):

        parser = argparse.ArgumentParser(
            description='Search for users.'
        )
        parser.add_argument(
            '--count', dest='count', default=30, type=int,
            help='The max amount of results to return with this query.'
        )
        parser.add_argument(
            '--offset', dest='offset', default=0, type=int,
            help='From where the search begins.'
        )
        parser.add_argument(
            '--sort', dest='sort', default='asc', type=str,
            choices=['asc', 'desc'], help='From where the search begins.'
        )
        parser.add_argument(
            '--sort_by', dest='sort_by', default='view_name', type=str,
            choices=['view_name'], help='The key that will be used to sort by.'
        )
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.users_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content['data'], indent=4)


    def _common_search_parser(self):
        parser = argparse.ArgumentParser()
        parser.add_argument(
            '--count', dest='count', default=30, type=int,
            help='The max amount of results to return with this query.'
        )
        parser.add_argument(
            '--offset', dest='offset', default=0, type=int,
            help='From where the search begins.'
        )
        parser.add_argument(
            '--sort', dest='sort', default='asc', type=str,
            choices=['asc', 'desc'], help='From where the search begins.'
        )
        return parser


if __name__ == '__main__':
    vFense()
