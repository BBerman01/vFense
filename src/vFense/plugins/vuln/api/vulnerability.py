import re
import simplejson as json
import logging
import logging.config

from vFense.core.api.base import BaseHandler
from vFense import VFENSE_LOGGING_CONFIG

from vFense.errorz.error_messages import GenericResults
from vFense.errorz._constants import ApiResultKeys
from vFense.plugins.vuln.ubuntu.search.search import RetrieveUbuntuVulns
from vFense.plugins.vuln.windows.search.search import RetrieveWindowVulns

from vFense.core.decorators import (
    authenticated_request, results_message
)

logging.config.fileConfig(VFENSE_LOGGING_CONFIG)
logger = logging.getLogger('rvapi')


class VulnerabilityHandler(BaseHandler):
    @authenticated_request
    def get(self, bulletin_id):
        username = self.get_current_user().encode('utf-8')
        uri = self.request.uri
        method = self.request.method
        try:
            results = self.get_vuln(bulletin_id)
        except Exception as e:
            results = (
                GenericResults(
                    username, uri, method
                ).something_broke('Get Vulnerability', 'vulnerability', e)
            )
            logger.exception(e)
            self.set_status(results['http_status'])
            self.set_header('Content-Type', 'application/json')
            self.write(json.dumps(results, indent=4))


        self.set_status(results['http_status'])
        self.set_header('Content-Type', 'application/json')
        self.write(json.dumps(results, indent=4))

    @results_message
    def get_vuln(self, bulletin_id):
        if re.search('^USN', bulletin_id, re.IGNORECASE):
            search = RetrieveUbuntuVulns()
            results = search.by_id(bulletin_id)
            if results[ApiResultKeys.DATA]:
                results[ApiResultKeys.DATA] = (
                    results[ApiResultKeys.DATA].pop()
                )
        elif re.search('^MS', bulletin_id, re.IGNORECASE):
            search = RetrieveWindowVulns()
            results = search.by_id(bulletin_id)
            if results[ApiResultKeys.DATA]:
                results[ApiResultKeys.DATA] = (
                    results[ApiResultKeys.DATA].pop()
                )

        return results
