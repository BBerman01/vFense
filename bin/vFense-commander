#!/usr/bin/env python
import os
import sys
import json
import ConfigParser
import argparse
import cookielib
import requests

API_VERSION = '/api/v1'
SESSION = requests.session()
JAR = cookielib.CookieJar()
HEADERS = {'Content-type': 'application/json', 'Accept': 'text/plain'}

def get_credentials(config=None):
    """Retrieve the credentials from the config file
    The default config file should be read from your home directory.
    Notes:
        Config file /home/vFense/.vFense.config
        [vFense]
        user_name: global_admin
        password: vFense#123

    Returns:
        Tuple (username, password, url)
    """
    Config = ConfigParser.ConfigParser()
    file_exists = False
    if not config:
        config = (
            os.path.join(
                os.environ.get('HOME'), '.vFense.config'
            )
        )
    if os.path.exists(config):
        file_exists = True
        Config.read(config)
        username = Config.get('vFense', 'user_name')
        password = Config.get('vFense', 'password')
        url = Config.get('vFense', 'url')
    else:
        username = None
        password = None
        url = None

    return(username, password, url, file_exists)

def authenticate(username, password, url):
    """Authenticates against the vFense server
    Args:
        username (str): The username.
        password (str): The password.
        url (str): The vFense url.

    Returns:
        Request object
    """
    login_url = os.path.join(url, 'login')
    creds = {
        'username': username,
        'password': password
    }
    authenticated = (
        SESSION.post(
            login_url, data=json.dumps(creds),
            verify=False, headers=HEADERS, cookies=JAR
        )
    )
    return authenticated

class vFense(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='vFense command line tool.',
            usage='''vfense <api> [<args>]

The various api base calls.
   users      Search, create, edit and delete users.
   views      Search, create, edit and delete views.
   groups     Search, create, edit and delete groups.
   tags       Search, create, edit and delete tags.
   agents     Search, edit and delete agents.
   operations Search operations.
   schedule   Search, create, and delete schedules.
''')
        self.username, self.password, self.url, config_exists = (
            get_credentials()
        )
        if config_exists:
            parser.add_argument(
                'api', help='The api you want to run',
                choices=[
                    'users', 'views', 'groups',
                    'agents', 'tags', 'schedule',
                    'operations', 'dashboard'
                ]
            )
            args = parser.parse_args(sys.argv[1:2])
            if not hasattr(self, args.api):
                print 'Unrecognized api'
                parser.print_help()
                exit(1)
            getattr(self, args.api)()

        else:
            config_file = os.path.join(os.getenv('HOME'), '.vFense.config')
            print 'Missing config {0}'.format(config_file)
            exit(1)

#######################TAGS MANAGEMENT######################################

    def tags(self):
        self.tags_url = os.path.join(self.url, 'api/v1/tags')
        parser = argparse.ArgumentParser(
            description='''Here you can search for tags with various filters
            as well as modify properties of a tag and delete or add agents
            to a tag.'''
        )
        parser.add_argument(
            'action', help='Actions that you can perform',
            choices=[
                'search', 'create', 'delete', 'delete_multiple',
                'edit', 'get', 'apps'
            ]
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.action == 'search':
            self.search_tags()

        elif args.action == 'get':
            self.tag_id(args.action)

        elif args.action == 'edit':
            self.tag_id(args.action)

        elif args.action == 'apps':
            self.tag_id(args.action)

        elif args.action == 'create':
            self.create_tag()

        elif args.action == 'delete':
            self.delete_tag()

        elif args.action == 'delete_multiple':
            self.delete_tags()

    def tag_id(self, action):
        parser = argparse.ArgumentParser(
            description='The tag id you are going to manage.'
        )
        parser.add_argument(
            'tag_id', type=str,
            help='The id of the tag you are going to manage.'
        )
        args = parser.parse_args(sys.argv[3:4])
        tag_id = args.tag_id
        self.tag_url = os.path.join(self.url, 'api/v1/tag', tag_id)
        self.tag_id = tag_id

        if action == 'get':
            self.get_tag()

        elif action == 'edit':
            self.edit_tag()

        elif action == 'delete':
            self.delete_tag()

        elif action == 'apps':
            self.apps_action_for_tag()

    def get_tag(self):
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.tag_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def edit_tag(self):
        msg = 'Edit the attributes of this tag {0}'.format(self.tag_id)
        parser = argparse.ArgumentParser(description=msg)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--action', dest='action', type=str,
                help='''What action you would like to take..
                This can only be called with --agent_ids''',
                choices=['add', 'delete'], default=None
            )
            parser.add_argument(
                '--display_name', dest='display_name', type=str,
                help='''Edit the display name in the vFense UI.
                This does not change the computer name.''', default=None
            )
            parser.add_argument(
                '--environment', dest='environment', type=str,
                help='''Change the environment this tag belongs too.
                Example.. Production, Staging, QA, Dev, etc...''',
                default=None
            )
            parser.add_argument(
                '--agent_ids', dest='agent_ids', type=str, action='append',
                help='''The agents you want to add or delete from this tag.
                This must be called with --action''',
                default=None
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            data = (
                SESSION.put(
                    self.tag_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_tag(self):
        self.tag_url = os.path.join(self.url, 'api/v1/tag', self.tag_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.delete(
                    self.tag_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_tags(self):
        parser = argparse.ArgumentParser(
            description='''Delete 1 or multiple tags from vFense.'''
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--tag_ids', dest='tag_ids', action='append',
                help='The ids of the tags, you are deleting.'
            )
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.tags_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def search_tags(self):
        parser = self._common_search_parser()
        parser.description = """Search for tags"""
        tag_search  = parser.add_argument_group('Search arguments')
        tag_search.add_argument(
            '--sort_by', dest='sort_by', default='tag_name', type=str,
            help='The key that will be used to sort by.', choices=[
                'tag_name', 'environment'
            ]
        )
        tag_search.add_argument(
            '--query', dest='query',
            help='''The regular expression of the tag name you
            are searching for.'''
        )
        tag_search.add_argument(
            '--environment', dest='environment',
            help='''The environment you want to filter on.'''
        )
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.tags_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def create_tag(self):
        parser = argparse.ArgumentParser(
            description='Create a new tag'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            tag = parser.add_argument_group('Create tag arguments')
            tag.add_argument(
                '--tag_name', dest='tag_name', type=str, required=True,
                help='The name of the tag, you are creating.'
            )
            tag.add_argument(
                '--environment', dest='environmwnt', type=str, required=True,
                help='''The environment you want this tag to be a part of.'''
            )
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.post(
                    self.tags_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def apps_action_for_tag(self):
        parser = argparse.ArgumentParser(
            description='''Choose an action'''
        )
        parser.add_argument(
            'action', type=str,
                help='''Action you want to perform,
                concerning applications on this tag.''',
                choices=['search', 'install'], default=None
            )
        args = parser.parse_args(sys.argv[4:5])
        action = args.action
        if action:
            self.apps_type_for_tag(action)

    def apps_type_for_tag(self, action):
        parser = argparse.ArgumentParser(
            description='''Which type of applications you want to manage.'''
        )
        parser.add_argument(
            'app_type', type=str,
                help='''The application type.''',
                choices=['os', 'custom', 'supported'], default='os'
            )
        args = parser.parse_args(sys.argv[5:6])
        app_type = args.app_type
        if action == 'search':
            self.apps_status_for_tag(app_type)

        elif action == 'install':
            self.install_apps_for_tag(app_type)

    def install_apps_for_tag(self, app_type):
        self.tag_url_for_apps = (
            os.path.join(self.tag_url, 'apps', app_type)
        )
        parser = argparse.ArgumentParser(
            description='''Install applications/updates'''
        )
        install  = parser.add_argument_group('Install arguments')
        install.add_argument(
            '--app_id', type=str, action='append',
                help='''The id of the applications you are installing'''
        )
        install.add_argument(
            '--restart', type=str, default='none',
            help='''whether to restart the agents after the updates''',
            choices=['none', 'force', 'needed']
        )
        install.add_argument(
            '--cpu_throttle', type=str, default='normal',
            help='''whether to throttle the cpu on the agents during
            the updates''',
            choices=['idle', 'below_normal', 'normal', 'above_normal', 'high']
        )
        install.add_argument(
            '--net_throttle', type=int, default=0,
            help='''whether to throttle the bandwith on the agents during
            the download of the updates''',
        )
        jobs = parser.add_argument_group('Schedule arguments')
        jobs.add_argument(
            '--job_name', type=str, default=None,
            help='''The name of the scheduled job'''
        )
        jobs.add_argument(
            '--run_date', type=float, default=None,
            help='''The run date in epoch time'''
        )
        args = parser.parse_args(sys.argv[6:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.put(
                    self.tag_url_for_apps, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def apps_status_for_tag(self, app_type):
        parser = argparse.ArgumentParser(
            description='''The status of the applications you want to search .
            for. installed or available.'''
        )
        parser.add_argument(
            'status', type=str,
                help='''The status of the applications you are searching
                for.''',
                choices=['installed', 'available', 'pending']
            )
        args = parser.parse_args(sys.argv[6:7])
        status = args.status
        if status:
            self.search_apps_in_tag(status, app_type)

    def search_apps_in_tag(self, status, app_type):
        parser = self._common_search_parser()
        self.apps_url_for_tag = (
            os.path.join(
                self.tag_url, 'apps', app_type
            )
        )
        parser.description = (
        '''Search applications by name, or filter by severity
            or filter by vulnerability or sort by release_date, etc...'''
        )
        parser.add_argument(
            '--sort_by', dest='sort_by', default='app_name', type=str,
            help='The key that will be used to sort by.', choices=[
                'app_name', 'version', 'release_date', 'rv_severity',
                'vulnerability_id'
            ]
        )
        search_options = (
            parser.add_argument_group('Search arguments')
        )
        search_options.add_argument(
            '--severity', dest='severity', default=None, type=str,
            help='The severity of the applications you want to filer on.',
            choices=['Critical', 'Recommended', 'Optional']
        )
        search_options.add_argument(
            '--query', dest='query', default=None, type=str,
            help='The regex of the application name you are searching for.',
        )
        search_options.add_argument(
            '--show_hidden', dest='hidden', default='false',
            help='Show hidden applications, default is False.',
        )
        search_options.add_argument(
            '--vuln', dest='vuln', default=None, action='store_true',
            help='Only show applications with vulnerabilities.',
        )
        args = parser.parse_args(sys.argv[7:])
        pay_load = vars(args)
        pay_load['status'] = status
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.apps_url_for_tag, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

#######################AGENTS MANAGEMENT######################################

    def agents(self):
        self.agents_url = os.path.join(self.url, 'api/v1/agents')
        parser = argparse.ArgumentParser(
            description='''Here you can search for agents with various filters
            as well as modify an agents properties and delete agents.'''
        )
        parser.add_argument(
            'action', help='Actions available.',
            choices=[
                'search', 'delete', 'delete_multiple',
                'edit', 'get', 'apps'
            ]
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.action == 'search':
            self.search_agents()

        elif args.action == 'delete_multiple':
            self.delete_agents()

        elif args.action == 'delete':
            self.set_agent_id(args.action)

        elif args.action == 'get':
            self.set_agent_id(args.action)

        elif args.action == 'edit':
            self.set_agent_id(args.action)

        elif args.action == 'apps':
            self.set_agent_id(args.action)

    def set_agent_id(self, action):
        parser = argparse.ArgumentParser(
            description='The agent id you are going to manage.'
        )
        parser.add_argument(
            'agent_id', type=str,
            help='The id of the agent you are going to manage.'
        )
        args = parser.parse_args(sys.argv[3:4])
        self.agent_id = args.agent_id
        self.agent_url = os.path.join(self.url, 'api/v1/agent', self.agent_id)
        if action == 'get':
            self.get_agent()

        elif action == 'edit':
            self.edit_agent()

        elif action == 'delete':
            self.agent_delete()

        elif action == 'apps':
            self.agent_apps()


    def get_agent(self):
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.agent_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def edit_agent(self):
        msg = 'Edit the attributes of this agent {0}'.format(self.agent_id)
        parser = argparse.ArgumentParser(description=msg)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--action', dest='action', type=str,
                help='''What action you would like to take..
                This can only be called with --views''',
                choices=['add', 'delete'], default=None
            )
            parser.add_argument(
                '--display_name', dest='display_name', type=str,
                help='''Edit the display name in the vFense UI.
                This does not change the computer name.''', default=None
            )
            parser.add_argument(
                '--environment', dest='environment', type=str,
                help='''Change the environment this agent belongs too.
                Example.. Production, Staging, QA, Dev, etc...''',
                default=None
            )
            parser.add_argument(
                '--views', dest='views', type=str, action='append',
                help='''The views you want this agent added to
                or removed from. This must be called with --action''',
                default=None
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            data = (
                SESSION.put(
                    self.agent_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_agent(self):
        self.agent_url = os.path.join(self.url, 'api/v1/agent', self.agent_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.delete(
                    self.agent_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_agents(self):
        parser = argparse.ArgumentParser(
            description='''
        Delete 1 or multiple agents from vFense. This will send the uninstall
        operation to the agent.
        '''
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--agent_ids', dest='agent_ids', action='append',
                help='The ids of the agents, you are deleting.'
            )
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.agents_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def search_agents(self):
        parser = self._common_search_parser()
        parser.description = """Search for agents"""
        agent_search  = parser.add_argument_group('Search arguments')
        agent_search.add_argument(
            '--sort_by', dest='sort_by', default='computer_name', type=str,
            help='The key that will be used to sort by.', choices=[
                'computer_name', 'display_name', 'os_string',
                'os_code', 'agent_status', 'available_updates',
                'available_vulnerabilities' 'production_level',
                'last_agent_update'
            ]
        )
        agent_search.add_argument(
            '--query', dest='query',
            help='''The regular expression of the computer name
            or display name you are searching for.'''
        )
        agent_search.add_argument(
            '--ip', dest='ip',
            help='''The regular expression of the ip address you are
            searching for.'''
        )
        agent_search.add_argument(
            '--mac', dest='mac',
            help='''The regular expression of the mac address you are
            searching for.'''
        )
        agent_search.add_argument(
            '--fkey', dest='fkey',
            help='''The property you want to filter by. This option is only
            used with the fval option''',
            choices=[
                'os_string', 'os_code', 'agent_status',  'production_level'
            ]
        )
        agent_search.add_argument(
            '--fval', dest='fval',
            help='''The value you are filtering by. This option is only used
            with the fkey option'''
        )
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.agents_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def agent_apps(self):
        parser = argparse.ArgumentParser(
            description='''Choose an action'''
        )
        parser.add_argument(
            'action', type=str,
                help='''Action you want to perform,
                concerning applications on this agent.''',
                choices=['search', 'install'], default=None
            )
        args = parser.parse_args(sys.argv[4:5])
        action = args.action
        if action:
            self.agent_apps_type(action)

    def agent_apps_type(self, action):
        parser = argparse.ArgumentParser(
            description='''Which type of applications you want to manage.'''
        )
        parser.add_argument(
            'app_type', type=str,
                help='''The application type.''',
                choices=['os', 'custom', 'supported'], default='os'
            )
        args = parser.parse_args(sys.argv[5:6])
        app_type = args.app_type
        if action == 'search':
            self.agent_apps_status(app_type)

        elif action == 'install':
            self.agent_apps_install(app_type)

    def agent_apps_install(self, app_type):
        self.agent_apps_url = (
            os.path.join(self.agent_url, 'apps', app_type)
        )
        parser = argparse.ArgumentParser(
            description='''Install applications/updates'''
        )
        install  = parser.add_argument_group('Install arguments')
        install.add_argument(
            '--app_id', type=str, action='append',
                help='''The id of the applications you are installing'''
        )
        install.add_argument(
            '--restart', type=str, default='none',
            help='''whether to restart the agent after the updates''',
            choices=['none', 'force', 'needed']
        )
        install.add_argument(
            '--cpu_throttle', type=str, default='normal',
            help='''whether to throttle the cpu on the agent during
            the updates''',
            choices=['idle', 'below_normal', 'normal', 'above_normal', 'high']
        )
        install.add_argument(
            '--net_throttle', type=int, default=0,
            help='''whether to throttle the bandwith on the agent during
            the download of the updates''',
        )
        jobs = parser.add_argument_group('Schedule arguments')
        jobs.add_argument(
            '--job_name', type=str, default=None,
            help='''The name of the scheduled job'''
        )
        jobs.add_argument(
            '--run_date', type=float, default=None,
            help='''The run date in epoch time'''
        )
        args = parser.parse_args(sys.argv[6:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.put(
                    self.agent_apps_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def agent_apps_status(self, app_type):
        parser = argparse.ArgumentParser(
            description='''The status of the applications you want to search .
            for. installed or available.'''
        )
        parser.add_argument(
            'status', type=str,
                help='''The status of the applications you are searching
                for.''',
                choices=['installed', 'available', 'pending']
            )
        args = parser.parse_args(sys.argv[6:7])
        status = args.status
        if status:
            self.agent_apps_search(status, app_type)

    def agent_apps_search(self, status, app_type):
        parser = self._common_search_parser()
        self.agent_apps_url = (
            os.path.join(
                self.agent_url, 'apps', app_type
            )
        )
        parser.description = (
        '''Search applications by name, or filter by severity
            or filter by vulnerability or sort by release_date, etc...'''
        )
        parser.add_argument(
            '--sort_by', dest='sort_by', default='app_name', type=str,
            help='The key that will be used to sort by.', choices=[
                'app_name', 'version', 'release_date', 'rv_severity',
                'vulnerability_id'
            ]
        )
        search_options = (
            parser.add_argument_group('Search arguments')
        )
        search_options.add_argument(
            '--severity', dest='severity', default=None, type=str,
            help='The severity of the applications you want to filer on.',
            choices=['Critical', 'Recommended', 'Optional']
        )
        search_options.add_argument(
            '--query', dest='query', default=None, type=str,
            help='The regex of the application name you are searching for.',
        )
        search_options.add_argument(
            '--show_hidden', dest='hidden', default='false',
            help='Show hidden applications, default is False.',
        )
        search_options.add_argument(
            '--vuln', dest='vuln', default=None, action='store_true',
            help='Only show applications with vulnerabilities.',
        )
        args = parser.parse_args(sys.argv[7:])
        pay_load = vars(args)
        pay_load['status'] = status
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.agent_apps_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

#######################USER MANAGEMENT######################################

    def users(self):
        self.user_url = os.path.join(self.url, 'api/v1/user')
        self.users_url = os.path.join(self.url, 'api/v1/users')
        parser = argparse.ArgumentParser(description='users api calls')
        parser.add_argument(
            'command', help='commands available for users',
            choices=['get', 'edit', 'delete', 'add', 'remove', 'search']
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.command == 'get':
            self.set_user_name(args.command)

        elif args.command == 'delete':
            self.set_user_name(args.command)

        elif args.command == 'edit':
            self.set_user_name(args.command)

        elif args.command == 'add_to':
            self.set_user_name(args.command)

        elif args.command == 'remove_from':
            self.set_user_name(args.command)

        elif args.command == 'search':
            self.search_users()

        elif args.command == 'create':
            self.create_user()

        elif args.command == 'delete_multiple':
            self.delete_users()


    def set_user_name(self, command):
        parser = argparse.ArgumentParser(
            description='the user name you are going to manage.'
        )
        parser.add_argument(
            'user_name', type=str,
            help='The name of the user you want to manage'
        )
        args = parser.parse_args(sys.argv[3:4])
        self.user_name = args.user_name
        self.user_url = os.path.join(self.url, 'api/v1/user', self.user_name)
        if command == 'get':
            self.get_user()

        elif command == 'edit':
            self.edit_user()

        elif command == 'delete':
            self.delete_user()

        elif command == 'add_to':
            self.add_views_or_groups_to_user()

        elif command == 'remove_from':
            self.delete_views_or_groups_from_user()


    def get_user(self):
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.user_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def add_views_or_groups_to_user(self):
        msg = 'Add views or groups to this user {0}'.format(self.user_name)
        parser = argparse.ArgumentParser(description=msg)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            add_views = (
                parser.add_argument_group('Add views to user arguments')
            )
            add_views.add_argument(
                '--view_names', dest='view_names', action='append',
                help='Views to add to this user.'
            )
            add_groups = (
                parser.add_argument_group('Add groups to user arguments')
            )
            add_groups.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='Group ids to add to this user.'
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            pay_load['action'] = 'add'
            data = (
                SESSION.post(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def delete_views_or_groups_from_user(self):
        msg = (
            'Remove views or groups from this user {0}'.format(self.user_name)
        )
        parser = argparse.ArgumentParser(description=msg)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            remove_views = (
                parser.add_argument_group('Remove views arguments')
            )
            remove_views.add_argument(
                '--view_names', dest='view_names', action='append',
                help='Views to remove from this user.'
            )
            remove_groups = (
                parser.add_argument_group('Remove groups arguments')
            )
            remove_groups.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='Group ids to deleted from this user.'
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            pay_load['action'] = 'delete'
            data = (
                SESSION.post(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def edit_user(self):
        msg = 'Edit the attributes of this user {0}'.format(self.user_name)
        parser = argparse.ArgumentParser(description=msg)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            edit_passwd = (
                parser.add_argument_group('Edit password arguments')
            )
            edit_passwd.add_argument(
                '--password', dest='password', type=str,
                help='The current password of the user.', default=None
            )
            edit_passwd.add_argument(
                '--new_password', dest='new_password', type=str,
                help='The new password of the user.', default=None
            )
            edit_fullname = (
                parser.add_argument_group('Edit full_name arguments')
            )
            edit_fullname.add_argument(
                '--fullname', dest='fullname', type=str,
                help='Edit the full name of the user.', default=None
            )
            edit_email = (
                parser.add_argument_group('Edit email arguments')
            )
            edit_email.add_argument(
                '--email', dest='email', type=str,
                help='Edit the email of the user.', default=None
            )
            edit_current_view = (
                parser.add_argument_group('Edit current_view arguments')
            )
            edit_current_view.add_argument(
                '--current_view', dest='current_view', type=str,
                help='Change the current view of the user.', default=None
            )
            edit_default_view = (
                parser.add_argument_group('Edit default_view arguments')
            )
            edit_default_view.add_argument(
                '--default_view', dest='default_view', type=str,
                help='Change the default view of the user.', default=None
            )
            edit_user_status = (
                parser.add_argument_group('Edit user status arguments')
            )
            edit_user_status.add_argument(
                '--enabled', dest='enabled', type=str,
                help='Enable or disable a user.', default=None,
                choices=['toggle']
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            data = (
                SESSION.put(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def delete_user(self ):
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.delete(
                    self.user_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def delete_users(self):
        parser = argparse.ArgumentParser(
            description='Delete 1 or multiple users.'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            user = parser.add_argument_group('Delete multiple users arguments')
            user.add_argument(
                '--user_names', dest='user_names', action='append',
                help='The names of the users, you are deleting.'
            )
            vfense = authenticate(self.username, self.password, self.url)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.users_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def create_user(self):
        parser = argparse.ArgumentParser(
            description='Create a new user'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            user = parser.add_argument_group('Create user arguments')
            user.add_argument(
                '--user_name', dest='user_name', type=str, required=True,
                help='The name of the user, you are creating.'
            )
            user.add_argument(
                '--password', dest='password', type=str, required=True,
                help='''The password of the user you are createing.
            The password must contain the following: 1 Special characater,
            1 Uppercase, 1 Lowercase, 1 Number, and a total of 8 characters'''
            )
            user.add_argument(
                '--full_name', dest='full_name', type=str,
                help='The full name of the user, you are creating.'
            )
            user.add_argument(
                '--email', dest='email', type=str,
                help='The email address of the user, you are creating.'
            )
            user.add_argument(
                '--enabled', dest='enabled', action='store_true',
                help='Create the user as enabled, the default is disabled',
            )
            user.add_argument(
                '--is_global', dest='is_global', action='store_true',
                help='The email address of the user, you are creating.',
            )
            user.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='The group ids, this user will be a part of.'
            )
            user.add_argument(
                '--view_context', dest='view_context', type=str,
                help='''The view this user is being created in.
            The default is to use the view of the currently logged in user.'''
            )
            parser.set_defaults(is_global=False)
            parser.set_defaults(enabled=False)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.post(
                    self.users_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def search_users(self):
        parser = self._common_search_parser()
        parser.description = 'Search for users.'
        parser.add_argument(
            '--sort_by', dest='sort_by', default='view_name', type=str,
            choices=['view_name'], help='The key that will be used to sort by.'
        )
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.users_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


#######################GROUPS MANAGEMENT######################################

    def groups(self):
        self.group_url = os.path.join(self.url, 'api/v1/group')
        self.groups_url = os.path.join(self.url, 'api/v1/groups')
        parser = argparse.ArgumentParser(description='Groups api calls')
        parser.add_argument(
            'action', help='Actions available',
            choices=[
                'get', 'edit', 'delete', 'add_to', 'remove_from', 'search'
            ]
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.action == 'get':
            self.group(args.action)

        elif args.action == 'delete':
            self.group(args.action)

        elif args.action == 'edit':
            self.group(args.action)

        elif args.action == 'add_to':
            self.group(args.action)

        elif args.action == 'remove_from':
            self.group(args.action)

        elif args.action == 'search':
            self.search_groups()

        elif args.action == 'create':
            self.create_group()

        elif args.action == 'delete_multiple':
            self.delete_groups()

    def group(self, action):
        parser = argparse.ArgumentParser(
            description='The id of the group you are going to manage.'
        )
        parser.add_argument(
            'group_id', type=str,
            help='The id of the group you want to manage'
        )
        args = parser.parse_args(sys.argv[3:4])
        group_id = args.group_id
        self.group_id = group_id
        if action == 'get':
            self.get_group()

        elif action == 'edit':
            self.edit_group()

        elif action == 'delete':
            self.delete_group(action)

        elif action == 'add':
            self.add_or_remove_action_for_groups(action)

        elif action == 'remove':
            self.add_or_remove_action_for_groups(action)


    def get_group(self):
        self.group_url = os.path.join(self.url, 'api/v1/group', self.group_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.group_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def add_or_remove_action_for_groups(self, action):
        parser = argparse.ArgumentParser(description='i calls')
        parser.add_argument(
            'object', help='The vFense objects you are updating for this group',
            choices=['views', 'users', 'permissions']
        )
        args = parser.parse_args(sys.argv[4])
        if action == 'add' and args.object == 'views':
            self.add_views_to_group()
        elif action == 'add' and args.object == 'users':
            self.add_users_to_group()
        elif action == 'add' and args.object == 'permissions':
            self.add_permissions_to_group()
        elif action == 'remove' and args.object == 'views':
            self.delete_views_from_group()
        elif action == 'remove' and args.object == 'users':
            self.delete_users_frmo_group()
        elif action == 'remove' and args.object == 'permissions':
            self.delete_permissions_from_group()

    def add_views_to_group(self):
        msg = 'Add views to this group {0}'.format(self.group_id)
        parser = argparse.ArgumentParser(description=msg)
        self.group_url = os.path.join(self.url, 'api/v1/group', self.group_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            add_views = (
                parser.add_argument_group('Add views to group arguments')
            )
            add_views.add_argument(
                '--view_names', dest='view_names', action='append',
                help='Views to add to this group.'
            )
            args = parser.parse_args(sys.argv[5:])
            pay_load = vars(args)
            pay_load['action'] = 'add'
            data = (
                SESSION.post(
                    self.group_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def add_users_to_group(self):
        msg = 'Add users to this group {0}'.format(self.group_id)
        parser = argparse.ArgumentParser(description=msg)
        self.group_url = os.path.join(self.url, 'api/v1/group', self.group_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            add_users = (
                parser.add_argument_group('Add users to group arguments')
            )
            add_users.add_argument(
                '--user_names', dest='user_names', action='append',
                help='User names to add to this group.'
            )
            args = parser.parse_args(sys.argv[5:])
            pay_load = vars(args)
            pay_load['action'] = 'add'
            data = (
                SESSION.post(
                    self.group_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def add_permissions_to_group(self):
        msg = 'Add permissions to this group {0}'.format(self.group_id)
        parser = argparse.ArgumentParser(description=msg)
        self.group_url = os.path.join(self.url, 'api/v1/group', self.group_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            add_permissions = (
                parser.add_argument_group('Add permissions to group arguments')
            )
            add_permissions.add_argument(
                '--permissions', dest='permissions', action='append',
                help='Permissions to add to this group.'
            )
            args = parser.parse_args(sys.argv[5:])
            pay_load = vars(args)
            pay_load['action'] = 'add'
            data = (
                SESSION.post(
                    self.group_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def delete_views_from_group(self):
        msg = 'Delete views from this group {0}'.format(self.group_id)
        parser = argparse.ArgumentParser(description=msg)
        self.group_url = os.path.join(self.url, 'api/v1/group', self.group_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            delete_views = (
                parser.add_argument_group('Delete views from group arguments')
            )
            delete_views.add_argument(
                '--view_names', dest='view_names', action='append',
                help='Views to remove from this group.'
            )
            args = parser.parse_args(sys.argv[5:])
            pay_load = vars(args)
            pay_load['action'] = 'delete'
            data = (
                SESSION.post(
                    self.group_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_users_from_group(self):
        msg = 'Delete users from this group {0}'.format(self.group_id)
        parser = argparse.ArgumentParser(description=msg)
        self.group_url = os.path.join(self.url, 'api/v1/group', self.group_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            delete_users = (
                parser.add_argument_group('Delete users from group arguments')
            )
            delete_users.add_argument(
                '--user_names', dest='user_names', action='append',
                help='User names to delete from this group.'
            )
            args = parser.parse_args(sys.argv[5:])
            pay_load = vars(args)
            pay_load['action'] = 'delete'
            data = (
                SESSION.post(
                    self.group_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_permissions_from_group(self):
        msg = 'Add permissions to this group {0}'.format(self.group_id)
        parser = argparse.ArgumentParser(description=msg)
        self.group_url = os.path.join(self.url, 'api/v1/group', self.group_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            delete_users = (
                parser.add_argument_group('Delete permissions from group arguments')
            )
            delete_users.add_argument(
                '--permissions', dest='permissions', action='append',
                help='Permissions to delete from this group.'
            )
            args = parser.parse_args(sys.argv[5:])
            pay_load = vars(args)
            pay_load['action'] = 'delete'
            data = (
                SESSION.post(
                    self.group_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def delete_group(self):
        self.group_url = os.path.join(self.url, 'api/v1/group', self.group_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.delete(
                    self.group_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_groups(self):
        parser = argparse.ArgumentParser(
            description='Delete 1 or multiple groups.'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            user = parser.add_argument_group('Delete multiple groups arguments')
            user.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='The ids of the groups, you are deleting.'
            )
            vfense = authenticate(self.username, self.password, self.url)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.groups_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def create_group(self):
        parser = argparse.ArgumentParser(
            description='Create a new group'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            group = parser.add_argument_group('Create group arguments')
            group.add_argument(
                '--group_name', dest='group_name', type=str, required=True,
                help='The name of the group, you are creating.'
            )
            group.add_argument(
                '--permissions', dest='permissions', type=str, required=True,
                help='''The password of the user you are createing.''',
                choices=[
                    'add agents to tag', 'add agents to view',
                    'administrator', 'assign new token to agents', 'create tag',
                    'create view', 'delete agent', 'edit agent', 'edit tag',
                    'edit time zone', 'install', 'new agent', 'read', 'reboot',
                    'remote assistance', 'remove agents from tag',
                    'remove agents from view', 'remove tag', 'remove view',
                    'shutdown', 'uninstall'
                ]
            )
            group.add_argument(
                '--is_global', dest='is_global', action='store_true',
                help='''Make this group a global group.
                (ONLY GLOBAL USERS CAN BE IN IN A GLOBAL GROUP.)'''
            )
            group.add_argument(
                '--views', dest='views', type=str, action='append',
                help='''The views you want this group to be a part of.
                (THIS IS NOT NEEDED IF --is_global IS PASSED.)'''
            )
            parser.set_defaults(is_global=False)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.post(
                    self.groups_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def search_groups(self):
        parser = self._common_search_parser()
        parser.description = 'Search for groups.'
        parser.add_argument(
            '--sort_by', dest='sort_by', default='group_name', type=str,
            choices=['group_name'], help='The key that will be used to sort by.'
        )
        parser.add_argument(
            '--group_id', dest='group_id', default=None, type=str,
            help='The id of the group you are retrieving.'
        )
        parser.add_argument(
            '--view_context', dest='view_context', default=None, type=str,
            help='The name of the view you are retrieving groups from.'
        )
        parser.add_argument(
            '--query', dest='query', default=None, type=str,
            help='The regex of the group name you are searching for.'
        )
        parser.add_argument(
            '--all_views', dest='all_views', action='store_true',
            help='''If you are a global user, than you can show all groups,
            instead of groups in the current view.'''
        )
        parser.set_defaults(all_views=None)
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.groups_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


#######################VIEWS MANAGEMENT######################################

    def views(self):
        self.view_url = os.path.join(self.url, 'api/v1/view')
        self.viewss_url = os.path.join(self.url, 'api/v1/views')
        parser = argparse.ArgumentParser(description='Views api calls')
        parser.add_argument(
            'action', help='Actions available',
            choices=[
                'get', 'edit', 'delete', 'add_to', 'remove_from', 'search'
            ]
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.action == 'get':
            self.view(args.action)

        elif args.action == 'delete':
            self.view(args.action)

        elif args.action == 'edit':
            self.view(args.action)

        elif args.action == 'add_to':
            self.view(args.action)

        elif args.action == 'remove_from':
            self.view(args.action)

        elif args.action == 'search':
            self.search_views()

        elif args.action == 'create':
            self.create_view()

        elif args.action == 'delete_multiple':
            self.delete_views()

    def view(self, action):
        parser = argparse.ArgumentParser(
            description='The name of the view you are going to manage.'
        )
        parser.add_argument(
            'view_name', type=str,
            help='The name of the view you want to manage'
        )
        args = parser.parse_args(sys.argv[3:4])
        view_name = args.view_name
        self.view_name = view_name
        self.view_url = os.path.join(self.url, 'api/v1/view', self.view_name)
        if action == 'get':
            self.get_view()

        elif action == 'edit':
            self.edit_view()

        elif action == 'delete':
            self.delete_view(action)

        elif action == 'add':
            self.add_or_remove_action_for_views(action)

        elif action == 'remove':
            self.add_or_remove_action_for_views(action)


    def get_view(self):
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.view_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_view(self):
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.delete(
                    self.view_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_views(self):
        parser = argparse.ArgumentParser(
            description='Delete 1 or multiple views.'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            user = parser.add_argument_group('Delete multiple groups arguments')
            user.add_argument(
                '--view_names', dest='view_names', action='append',
                help='The names of the views, you are deleting.'
            )
            vfense = authenticate(self.username, self.password, self.url)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.views_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def create_view(self):
        parser = argparse.ArgumentParser(
            description='Create a new view'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            view = parser.add_argument_group('Create view arguments')
            view.add_argument(
                '--view_name', dest='view_name', type=str, required=True,
                help='The name of the view, you are creating.'
            )
            view.add_argument(
                '--download_url', dest='download_url', type=str,
                help='''The url the agents will use while
                downloading applications.''', default=None
            )
            view.add_argument(
                '--net_throttle', dest='net_throttle', default=0, type=int,
                help='''The amount of net traffic you want to throttle
                while downloading applications in KB. Default=0'''
            )
            view.add_argument(
                '--cpu_throttle', dest='cpu_throttle', type=str,
                choices=['idle', 'below_normal', 'normal', 'above_normal',
                         'high'],
                help='''The amount of cpu to use while installing
                applications. Default=normal''', default='normal'
            )
            view.add_argument(
                '--server_queue_ttl', dest='server_queue_ttl', default=10,
                type=int, help='''The amount of time in minutes
                until an operation expires in the server queue.'''
            )
            view.add_argument(
                '--agent_queue_ttl', dest='agent_queue_ttl', default=10,
                type=int, help='''The amount of time in minutes
                until an operation is considered invalid in the agent queue.'''
            )
            view.add_argument(
                '--time_zone', dest='time_zone', default='UTC',
                type=str, help='''The time_zone that vFense will use
                while scheduling operations'''
            )
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.post(
                    self.views_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def search_views(self):
        parser = self._common_search_parser()
        parser.description = 'Search for groups.'
        parser.add_argument(
            '--sort_by', dest='sort_by', default='view_name', type=str,
            choices=['view_name'], help='The key that will be used to sort by.'
        )
        parser.add_argument(
            '--parent_view', dest='parent_view', default=None, type=str,
            help='The parent view of the views you are searching for.'
        )
        parser.add_argument(
            '--view_context', dest='view_context', default=None, type=str,
            help='The name of the view you are retrieving groups from.'
        )
        parser.add_argument(
            '--query', dest='query', default=None, type=str,
            help='The regex of the view name you are searching for.'
        )
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.groups_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def edit_view(self):
        msg = 'Edit the attributes of this view {0}'.format(self.view_name)
        parser = argparse.ArgumentParser(description=msg)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            edit_net_throttle = (
                parser.add_argument_group('Edit network throttle arguments')
            )
            edit_net_throttle.add_argument(
                '--net_throttle', dest='net_throttle', type=int,
                help='The amount of bandwidth the agent will throttle.',
                default=None
            )
            edit_cpu_throttle = (
                parser.add_argument_group('Edit cpu throttle arguments')
            )
            edit_cpu_throttle.add_argument(
                '--cpu_throttle', dest='cpu_throttle', type=str,
                help='''The amount of cpu the agent will use while performing
                an operation..''', default=None,
                choices=['idle', 'below_normal', 'normal', 'above_normal',
                         'high'],
            )
            edit_server_queue_ttl = (
                parser.add_argument_group('Edit server queue ttl arguments')
            )
            edit_server_queue_ttl.add_argument(
                '--server_queue_ttl', dest='server_queue_ttl', type=int,
                default=None, help='''The amount of time in minutes
                until an operation expires in the server queue.'''
            )
            edit_agent_queue_ttl = (
                parser.add_argument_group('Edit agent queue ttl arguments')
            )
            edit_agent_queue_ttl.add_argument(
                '--agent_queue_ttl', dest='agent_queue_ttl', default=None,
                type=int, help='''The amount of time in minutes
                until an operation is considered invalid in the agent queue.'''
            )
            edit_time_zone = (
                parser.add_argument_group('Edit time zone arguments')
            )
            edit_time_zone.add_argument(
                '--time_zone', dest='time_zone', default=None,
                type=str, help='''The time_zone that vFense will use
                while scheduling operations'''
            )
            edit_download_url = (
                parser.add_argument_group('Edit download url arguments')
            )
            edit_download_url.add_argument(
                '--download_url', dest='download_url', type=str,
                help='''The url the agents will use while
                downloading applications.''', default=None
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            data = (
                SESSION.put(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)




#######################COMMON CALLS######################################
    def _common_search_parser(self):
        parser = argparse.ArgumentParser()
        search = parser.add_argument_group('Common search arguments')
        search.add_argument(
            '--count', dest='count', default=30, type=int,
            help='The max amount of results to return with this query.'
        )
        search.add_argument(
            '--offset', dest='offset', default=0, type=int,
            help='From where the search begins.'
        )
        search.add_argument(
            '--sort', dest='sort', default='asc', type=str,
            choices=['asc', 'desc'], help='From where the search begins.'
        )
        return parser


if __name__ == '__main__':
    vFense()
