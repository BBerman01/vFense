{"sections": [{"order": 0, "commands": [{"langs": {"py": {"body": "r", "name": "r", "examples": [{"dataset": null, "code": "import rethinkdb as r", "description": "Setup your top level namespace.", "can_try": false}]}, "rb": {"body": "r", "name": "r", "examples": [{"dataset": null, "code": "require 'rethinkdb'\ninclude RethinkDB::Shortcuts\n", "description": "Setup your top level namespace.", "can_try": false}]}, "js": {"body": "r", "name": "r", "examples": [{"dataset": null, "code": "var r = require('rethinkdb');", "description": "Setup your top level namespace.", "can_try": false}]}}, "tag": "r", "description": "The toplevel RQL namespace.", "io": [[null, "r"]], "order": 0}, {"langs": {"py": {"body": "$PARENT.connect(host='localhost', port=28015, db='test', auth_key='')", "name": "connect", "examples": [{"dataset": null, "code": "conn = r.connect(db='heroes')", "description": "Opens a connection using the default host and port but specifying the default database.", "can_try": false}]}, "rb": {"body": "$PARENT.connect(opts)", "name": "connect", "examples": [{"dataset": null, "code": "conn = r.connect(:host => 'localhost', :port => 28015, :db => 'heroes', :auth_key => 'hunter2')", "description": "Opens a connection to localhost:28015 with 'heroes' as the default database,\nand provides an authorization key to log on to the server.\n", "can_try": false}]}, "js": {"body": "$PARENT.connect(opts, callback)", "name": "connect", "examples": [{"dataset": null, "code": "r.connect({host:'localhost', port:28015, db:'marvel', authKey:'hunter2'},\n   function(err, conn) { ... })\n", "description": "Opens a new connection to the database.", "can_try": false}]}}, "tag": "connect", "description": "Create a new connection to the database server.<br /><br />If the\nconnection cannot be established, a <code>RqlDriverError</code> exception will\nbe thrown.\n", "io": [["r", "connection"]], "order": 1}, {"langs": {"py": {"body": "$PARENT.repl()", "name": "repl", "examples": [{"dataset": null, "code": "r.connect().repl()\nr.table('users').run()\n", "description": "Set the default connection in REPL, and call `run()`\nwithout specifying the connection.\n", "can_try": false}]}, "rb": {"body": "$PARENT.repl", "name": "repl", "examples": [{"dataset": null, "code": "r.connect().repl\nr.table('users').run\n", "description": "Set the default connection in REPL, and call `run()`\nwithout specifying the connection.\n", "can_try": false}]}, "js": {"examples": [{"dataset": null, "code": "", "description": "Set the default connection in REPL, and call `run()`\nwithout specifying the connection.\n", "can_try": false}]}}, "tag": "repl", "description": "Set the default connection to make REPL use easier. Allows calling\n<code>run()</code> without specifying a connection. <br/><br />\nConnection objects are not thread safe and <code>repl</code> connections\nshould not be used in multi-threaded environments.\n", "io": [["connection", null]], "order": 2}, {"langs": {"py": {"body": "$PARENT.close()", "name": "close", "examples": [{"dataset": null, "code": "conn.close()", "description": "Close an open connection.", "can_try": false}]}, "rb": {"body": "$PARENT.close", "name": "close", "examples": [{"dataset": null, "code": "conn.close", "description": "Close an open connection.", "can_try": false}]}, "js": {"body": "$PARENT.close()", "name": "close", "examples": [{"dataset": null, "code": "conn.close()", "description": "Close an open connection.", "can_try": false}]}}, "tag": "close", "description": "Close an open connection. Closing a connection cancels all outstanding\nrequests and frees the memory associated with the open requests.\n", "io": [["connection", null]], "order": 3}, {"langs": {"py": {"body": "$PARENT.reconnect()", "name": "reconnect", "examples": [{"dataset": null, "code": "conn.reconnect()", "description": "Cancel outstanding requests/queries that are no longer needed.", "can_try": false}]}, "rb": {"body": "$PARENT.reconnect", "name": "reconnect", "examples": [{"dataset": null, "code": "conn.reconnect", "description": "Cancel outstanding requests/queries that are no longer needed.", "can_try": false}]}, "js": {"body": "$PARENT.reconnect()", "name": "reconnect", "examples": [{"dataset": null, "code": "conn.reconnect(function(err, conn) { ... })", "description": "Cancel outstanding requests/queries that are no longer needed.", "can_try": false}]}}, "tag": "reconnect", "description": "Close and attempt to reopen a connection. Has the effect of canceling\nany outstanding request while keeping the connection open.\n", "io": [["connection", null]], "order": 4}, {"langs": {"py": {"body": "$PARENT.use(db_name)", "name": "use", "examples": [{"dataset": null, "code": "conn.use('heroes')", "description": "Change the default database so that we don't need\nto specify the database when referencing a table.\n", "can_try": false}]}, "rb": {"body": "$PARENT.use(db_name)", "name": "use", "examples": [{"dataset": null, "code": "conn.use('heroes')", "description": "Change the default database so that we don't need\nto specify the database when referencing a table.\n", "can_try": false}]}, "js": {"body": "$PARENT.use(dbName)", "name": "use", "examples": [{"dataset": null, "code": "conn.use('heroes')", "description": "Change the default database so that we don't need\nto specify the database when referencing a table.\n", "can_try": false}]}}, "tag": "use", "description": "Change the default database on this connection.", "io": [["connection", null]], "order": 5}, {"langs": {"py": {"body": "$PARENT.run(conn[, use_outdated=False, time_format=<time_format>])", "name": "run", "examples": [{"dataset": null, "code": "for doc in r.table('marvel').run(conn):\n  print doc\n", "description": "Call run on the connection with a query to execute the query.\nThe callback will get a cursor from which results may be retrieved.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run(conn, use_outdated=True)", "description": "If you are OK with potentially out of date data from all the tables\ninvolved in this query and want potentially faster reads, pass a flag\nallowing out of date data in an options object.  Settings for\nindividual tables will supercede this global setting for all tables\nin the query.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run(conn, noreply=True)", "description": "If you just want to send a write and forget about it, you\ncan set `noreply` to true in the options.  In this case\n`run` will return immediately.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel')\n .insert({ 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' })\n .run(conn, noreply=True, durability='soft')\n", "description": "If you want to specify whether to wait for a write to be\nwritten to disk (overriding the table's default settings),\nyou can set `durability` to `'hard'` or `'soft'` in the\noptions.\n", "can_try": false}, {"dataset": null, "code": "r.now().run(conn, time_format=\"raw\")\n", "description": "If you do not want a time object to be converted to a native date object,\nyou can pass a time_format flag to prevent it (valid flags are \"raw\" and \"native\").\nThis query returns an object with two fields (epoch_time and $reql_type$)\ninstead of a native date object.\n", "can_try": false}]}, "rb": {"body": "$PARENT.run(conn[, opts])", "name": "run", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn).each{|x| p x}", "description": "Call run on the connection with a query to execute the query.\nThe callback will get a cursor from which results may be retrieved.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run(conn, :use_outdated => true)", "description": "If you are OK with potentially out of date data from all the tables\ninvolved in this query and want potentially faster reads, pass a flag\nallowing out of date data in an options object.  Settings for\nindividual tables will supercede this global setting for all tables\nin the query.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run(conn, :noreply => true)", "description": "If you just want to send a write and forget about it, you\ncan set `noreply` to true in the options.  In this case\n`run` will return immediately.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel')\n .insert({ :superhero => 'Iron Man', :superpower => 'Arc Reactor' })\n .run(conn, :noreply => true, :durability => 'soft')\n", "description": "If you want to specify whether to wait for a write to be\nwritten to disk (overriding the table's default settings),\nyou can set `durability` to `'hard'` or `'soft'` in the\noptions.\n", "can_try": false}, {"dataset": null, "code": "r.now().run(conn, :time_format=>\"raw\")\n", "description": "If you do not want a time object to be converted to a native date object,\nyou can pass a time_format flag to prevent it (valid flags are \"raw\" and \"native\").\nThis query returns an object with two fields (epoch_time and $reql_type$)\ninstead of a native date object.\n", "can_try": false}]}, "js": {"body": "$PARENT.run(conn/options[, callback])", "name": "run", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn, function(err, cur) { cur.each(console.log); })", "description": "Call run on the connection with a query to execute the query.\nThe callback will get a cursor from which results may be retrieved.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run({connection:conn, useOutdated:true},\n                      function (err, cursor) { ... });\n", "description": "If you are OK with potentially out of date data from all the tables\ninvolved in this query and want potentially faster reads, pass a flag\nallowing out of date data in an options object.  Settings for\nindividual tables will supercede this global setting for all tables\nin the query.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run({connection:conn, noreply:true},\n                      function (err, cursor) { ... });\n", "description": "If you just want to send a write and forget about it, you\ncan set `noreply` to true in the options.  In this case\n`run` will return immediately.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel')\n .insert({ superhero: 'Iron Man', superpower: 'Arc Reactor' })\n .run({connection:conn, noreply:true, durability: 'soft'},\n      function (err, cursor) { ... });\n", "description": "If you want to specify whether to wait for a write to be\nwritten to disk (overriding the table's default settings),\nyou can set `durability` to `'hard'` or `'soft'` in the\noptions.\n", "can_try": false}, {"dataset": null, "code": "r.now().run({connection:conn, timeFormat:\"raw\"},\n    function (err, result) { ... });\n", "description": "If you do not want a time object to be converted to a native date object,\nyou can pass a time_format flag to prevent it (valid flags are \"raw\" and \"native\").\nThis query returns an object with two fields (epoch_time and $reql_type$)\ninstead of a native date object.\n", "can_try": false}]}}, "tag": "run", "description": "Run a query on a connection.", "io": [["query", "cursor"]], "order": 6}, {"langs": {"py": {"examples": [{"dataset": null, "code": "cur.next(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's grab the next element!", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "cur.next(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's grab the next element!", "can_try": false}]}, "js": {"body": "$PARENT.next(callback)", "name": "next", "examples": [{"dataset": null, "code": "cur.next(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's grab the next element!", "can_try": false}]}}, "tag": "next", "description": "Get the next element in the cursor.", "io": [["cursor", null]], "order": 7}, {"langs": {"py": {"examples": [{"dataset": null, "code": "var hasMore = cur.hasNext();", "description": "Are there more elements in the cursor?", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "var hasMore = cur.hasNext();", "description": "Are there more elements in the cursor?", "can_try": false}]}, "js": {"body": "$PARENT.hasNext()", "name": "hasNext", "examples": [{"dataset": null, "code": "var hasMore = cur.hasNext();", "description": "Are there more elements in the cursor?", "can_try": false}]}}, "tag": "hasNext", "description": "Check if there are more elements in the cursor.", "io": [["cursor", "bool"]], "order": 8}, {"langs": {"py": {"examples": [{"dataset": null, "code": "cur.each(function(err, row) {\n  processRow(row);\n});\n", "description": "Let's process all the elements!", "can_try": false}, {"dataset": null, "code": "cur.each(function(err, row) {\n  return processRow(row);\n}, function() {\n  doneProcessing();\n});\n", "description": "If we need to know when iteration is complete each also accepts a second `onFinished` callback.", "can_try": false}, {"dataset": null, "code": "cur.each(function(err, row) {\n    if (processRow(row) < 0)\n        return false;\n});\n", "description": "Iteration can be stopped prematurely by returning `false` from the callback.", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "cur.each(function(err, row) {\n  processRow(row);\n});\n", "description": "Let's process all the elements!", "can_try": false}, {"dataset": null, "code": "cur.each(function(err, row) {\n  return processRow(row);\n}, function() {\n  doneProcessing();\n});\n", "description": "If we need to know when iteration is complete each also accepts a second `onFinished` callback.", "can_try": false}, {"dataset": null, "code": "cur.each(function(err, row) {\n    if (processRow(row) < 0)\n        return false;\n});\n", "description": "Iteration can be stopped prematurely by returning `false` from the callback.", "can_try": false}]}, "js": {"body": "$PARENT.each(callback[, onFinished])", "name": "each", "examples": [{"dataset": null, "code": "cur.each(function(err, row) {\n  processRow(row);\n});\n", "description": "Let's process all the elements!", "can_try": false}, {"dataset": null, "code": "cur.each(function(err, row) {\n  return processRow(row);\n}, function() {\n  doneProcessing();\n});\n", "description": "If we need to know when iteration is complete each also accepts a second `onFinished` callback.", "can_try": false}, {"dataset": null, "code": "cur.each(function(err, row) {\n    if (processRow(row) < 0)\n        return false;\n});\n", "description": "Iteration can be stopped prematurely by returning `false` from the callback.", "can_try": false}]}}, "tag": "each", "description": "Lazily iterate over the result set one element at a time.", "io": [["cursor", null]], "order": 9}, {"langs": {"py": {"examples": [{"dataset": null, "code": "cur.toArray(function(err, results) {\n  for(var i in results) {\n    processRow(results[i]);\n  }\n});\n", "description": "For small result sets it may be more convenient to process them at once as an array.", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "cur.toArray(function(err, results) {\n  for(var i in results) {\n    processRow(results[i]);\n  }\n});\n", "description": "For small result sets it may be more convenient to process them at once as an array.", "can_try": false}]}, "js": {"body": "$PARENT.toArray(callback)", "name": "toArray", "examples": [{"dataset": null, "code": "cur.toArray(function(err, results) {\n  for(var i in results) {\n    processRow(results[i]);\n  }\n});\n", "description": "For small result sets it may be more convenient to process them at once as an array.", "can_try": false}]}}, "tag": "toArray", "description": "Retrieve all results and pass them as an array to the given callback.", "io": [["cursor", null]], "order": 10}, {"langs": {"py": {"examples": [{"dataset": null, "code": "cursor.close()", "description": "Close a cursor.", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "cursor.close()", "description": "Close a cursor.", "can_try": false}]}, "js": {"body": "$PARENT.close()", "name": "close (cursor)", "examples": [{"dataset": null, "code": "cursor.close()", "description": "Close a cursor.", "can_try": false}]}}, "tag": "close-cursor", "description": "Close a cursor. Closing a cursor cancels the corresponding query\nand frees the memory associated with the open request.\n", "io": [["cursor", null]], "order": 11}, {"langs": {"py": {"examples": [{"dataset": null, "code": "r.connect({}, function(err, conn) {\n    if (err) throw err;\n\n    conn.addListener('error', function(e) {\n      processNetworkError(e);\n    });\n\n    conn.addListener('close', function() {\n      cleanup();\n    });\n\n    runQueries(conn);\n});\n", "description": "Monitor connection state with events 'connect', 'close', and 'error'.", "can_try": false}, {"dataset": null, "code": "conn.on('close', function() {\n    cleanup();\n});\n\nconn.close();\n", "description": "As in Node, 'on' is a synonym for 'addListener'.", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "r.connect({}, function(err, conn) {\n    if (err) throw err;\n\n    conn.addListener('error', function(e) {\n      processNetworkError(e);\n    });\n\n    conn.addListener('close', function() {\n      cleanup();\n    });\n\n    runQueries(conn);\n});\n", "description": "Monitor connection state with events 'connect', 'close', and 'error'.", "can_try": false}, {"dataset": null, "code": "conn.on('close', function() {\n    cleanup();\n});\n\nconn.close();\n", "description": "As in Node, 'on' is a synonym for 'addListener'.", "can_try": false}]}, "js": {"body": "$PARENT.addListener(event, listener)", "name": "addListener", "examples": [{"dataset": null, "code": "r.connect({}, function(err, conn) {\n    if (err) throw err;\n\n    conn.addListener('error', function(e) {\n      processNetworkError(e);\n    });\n\n    conn.addListener('close', function() {\n      cleanup();\n    });\n\n    runQueries(conn);\n});\n", "description": "Monitor connection state with events 'connect', 'close', and 'error'.", "can_try": false}, {"dataset": null, "code": "conn.on('close', function() {\n    cleanup();\n});\n\nconn.close();\n", "description": "As in Node, 'on' is a synonym for 'addListener'.", "can_try": false}]}}, "tag": "addListener", "description": "The connection object also supports the event emitter interface so you can listen for\nchanges in connection state.\n", "io": [["connection", null]], "order": 12}], "tag": "module", "name": "Accessing RQL", "description": "All RQL queries begin from the top level module."}, {"order": 1, "commands": [{"langs": {"py": {"body": "$PARENT.db_create(db_name)", "name": "db_create", "examples": [{"dataset": null, "code": "r.db_create('superheroes').run(conn)", "description": "Create a database named 'superheroes'.", "can_try": false}]}, "rb": {"body": "$PARENT.db_create(db_name)", "name": "db_create", "examples": [{"dataset": null, "code": "r.db_create('superheroes').run(conn)", "description": "Create a database named 'superheroes'.", "can_try": false}]}, "js": {"body": "$PARENT.dbCreate(dbName)", "name": "dbCreate", "examples": [{"dataset": null, "code": "r.dbCreate('superheroes').run(conn, callback)", "description": "Create a database named 'superheroes'.", "can_try": false}]}}, "tag": "db_create", "description": "Create a database. A RethinkDB database is a collection of tables,\nsimilar to relational databases.<br /><br />If successful, the operation returns\nan object: <code>{created: 1}</code>. If a database with the same name already\nexists the operation throws <code>RqlRuntimeError</code>.<br/> Note:\nthat you can only use alphanumeric characters and underscores for the database name.\n", "io": [["r", "object"]], "order": 73}, {"langs": {"py": {"body": "$PARENT.db_drop(db_name)", "name": "db_drop", "examples": [{"dataset": null, "code": "r.db_drop('superheroes').run(conn)", "description": "Drop a database named 'superheroes'.", "can_try": false}]}, "rb": {"body": "$PARENT.db_drop(db_name)", "name": "db_drop", "examples": [{"dataset": null, "code": "r.db_drop('superheroes').run(conn)", "description": "Drop a database named 'superheroes'.", "can_try": false}]}, "js": {"body": "$PARENT.dbDrop(dbName)", "name": "dbDrop", "examples": [{"dataset": null, "code": "r.dbDrop('superheroes').run(conn, callback)", "description": "Drop a database named 'superheroes'.", "can_try": false}]}}, "tag": "db_drop", "description": "Drop a database. The database, all its tables, and corresponding\ndata will be deleted.<br /><br />If successful, the operation returns the object\n<code>{dropped: 1}</code>. If the specified database doesn't exist a <code>RqlRuntimeError</code>\nis thrown.\n", "io": [["r", "object"]], "order": 74}, {"langs": {"py": {"body": "$PARENT.db_list()", "name": "db_list", "examples": [{"dataset": null, "code": "r.db_list().run(conn)", "description": "List all databases.", "can_try": false}]}, "rb": {"body": "$PARENT.db_list", "name": "db_list", "examples": [{"dataset": null, "code": "r.db_list.run(conn)", "description": "List all databases.", "can_try": false}]}, "js": {"body": "$PARENT.dbList()", "name": "dbList", "examples": [{"dataset": null, "code": "r.dbList().run(conn, callback)", "description": "List all databases.", "can_try": false}]}}, "tag": "db_list", "description": "List all database names in the system.<br /><br />\nThe result is a list of strings.\n", "io": [["r", "array"]], "order": 75}], "tag": "db_admin", "name": "Manipulating databases", "description": "These commands allow database manipulation."}, {"order": 2, "commands": [{"langs": {"py": {"body": "$PARENT.table_create(table_name[, options])", "name": "table_create", "examples": [{"dataset": null, "code": "r.db('test').table_create('dc_universe').run(conn)", "description": "Create a table named 'dc_universe' with the primary key set to field 'id'.\nIf a new document doesn't contain the field 'id', the database will\nautogenerate a value for it.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').table_create('dc_universe', primary_key='name').run(conn)", "description": "Create a table named 'dc_universe' using the field 'name'\nas primary key.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').table_create('hero_actions', durability='soft').run(conn)", "description": "Create a table to log the very fast actions of the heroes.\n", "can_try": false}]}, "rb": {"body": "$PARENT.table_create(table_name[, options])", "name": "table_create", "examples": [{"dataset": null, "code": "r.db('test').table_create('dc_universe').run(conn)", "description": "Create a table named 'dc_universe' with the primary key set to field 'id'.\nIf a new document doesn't contain the field 'id', the database will\nautogenerate a value for it.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').table_create('dc_universe', :primary_key => 'name').run(conn)", "description": "Create a table named 'dc_universe' using the field 'name'\nas primary key.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').table_create('dc_universe', :durability => 'soft').run(conn)", "description": "Create a table to log the very fast actions of the heroes.\n", "can_try": false}]}, "js": {"body": "$PARENT.tableCreate(tableName[, options])", "name": "tableCreate", "examples": [{"dataset": null, "code": "r.db('test').tableCreate('dc_universe').run(conn, callback)", "description": "Create a table named 'dc_universe' with the primary key set to field 'id'.\nIf a new document doesn't contain the field 'id', the database will\nautogenerate a value for it.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').tableCreate('dc_universe', {primaryKey: 'name'}).run(conn, callback)", "description": "Create a table named 'dc_universe' using the field 'name'\nas primary key.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').tableCreate('dc_universe', {hardDurability: false}).run(conn, callback)", "description": "Create a table to log the very fast actions of the heroes.\n", "can_try": false}]}}, "tag": "table_create", "description": "Create a table. A RethinkDB table is a collection of JSON documents.\n<br /><br />If successful, the operation returns an object: <code>{created: 1}</code>.  If\na table with the same name already exists, the operation throws <code>RqlRuntimeError</code>.<br /> Note:\nthat you can only use alphanumeric characters and underscores for the table name.<br/>\n<br /><br />When creating a table you can specify the following options:\n<ul>\n<li><code>primary_key</code>(string): the name of the primary key. The default primary key is <code>id</code>;</li>\n<li><code>durability</code>(string): if set to <code>'soft'</code>, this enables <strong>soft durability</strong>\n on this table: writes will be acknowledged by the server immediately and flushed to disk in the background.\n Default is <code>'hard'</code> (acknowledgement of writes happens after data has been written to disk);</li>\n<li><code>cache_size</code>(number): set the cache size (in bytes) to be used by the table. The default is 1073741824 (1024MB);</li>\n<li><code>datacenter</code>(string): the name of the datacenter this table should be assigned to.</li>\n</ul>\n<br /><br />In Javascript, these options can use either the underscore or camelcase form (e.g. primaryKey, cacheSize).\n", "io": [["db", "object"]], "order": 67}, {"langs": {"py": {"body": "$PARENT.table_drop(table_name)", "name": "table_drop", "examples": [{"dataset": null, "code": "r.db('test').table_drop('dc_universe').run(conn)", "description": "Drop a table named 'dc_universe'.", "can_try": false}]}, "rb": {"body": "$PARENT.table_drop(table_name)", "name": "table_drop", "examples": [{"dataset": null, "code": "r.db('test').table_drop('dc_universe').run(conn)", "description": "Drop a table named 'dc_universe'.", "can_try": false}]}, "js": {"body": "$PARENT.tableDrop(tableName)", "name": "tableDrop", "examples": [{"dataset": null, "code": "r.db('test').tableDrop('dc_universe').run(conn, callback)", "description": "Drop a table named 'dc_universe'.", "can_try": false}]}}, "tag": "table_drop", "description": "Drop a table. The table and all its data will be deleted.<br /><br\n/>If succesful, the operation returns an object: <code>{dropped: 1}</code>.\nIf the specified table doesn''t exist a <code>RqlRuntimeError</code> is thrown.\n", "io": [["db", "object"]], "order": 68}, {"langs": {"py": {"body": "$PARENT.table_list()", "name": "table_list", "examples": [{"dataset": null, "code": "r.db('test').table_list().run(conn)", "description": "List all tables of the 'test' database.", "can_try": false}]}, "rb": {"body": "$PARENT.table_list", "name": "table_list", "examples": [{"dataset": null, "code": "r.db('test').table_list().run(conn)", "description": "List all tables of the 'test' database.", "can_try": false}]}, "js": {"body": "$PARENT.tableList()", "name": "tableList", "examples": [{"dataset": null, "code": "r.db('test').tableList().run(conn, callback)", "description": "List all tables of the 'test' database.", "can_try": false}]}}, "tag": "table_list", "description": "List all table names in a database.<br /><br />\nThe result is a list of strings.\n", "io": [["db", "array"]], "order": 69}, {"langs": {"py": {"body": "$PARENT.index_create(index_name[, index_function])", "name": "index_create", "examples": [{"dataset": null, "code": "r.table('dc').index_create('code_name').run(conn)", "description": "To efficiently query our heros by name we can create a secondary\nindex based on the value of that field. We can already quickly query\nheros by name with the primary index but to do the same based on hero\ncode names we'll have to create a secondary index based on that\nattribute.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('power_rating',\n  lambda hero: hero['combat_power'] + (2 * hero['compassion_power'])\n).run(conn)\n", "description": "You can also create a secondary index based on an arbitrary function\non the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('parental_planets',\n  lambda hero: [hero['mothers_home_planet'], hero['fathers_home_planet']]\n).run(conn)\n", "description": "A compound index can be created by returning an array of values to\nuse as the secondary index key.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('abilities', multi=True).run(conn)\n", "description": "A multi index can be created by passing an optional\n<code>multi</code> argument.  Multi indexes functions should return\narrays and allow you to query based on whether a value is present in\nthe returned array. The example would allow us to get heroes who\npossess a specific ability (the field <code>'abilities'</code> is an\narray).\n", "can_try": false}]}, "rb": {"body": "$PARENT.index_create(index_name) [{index_function}]", "name": "index_create", "examples": [{"dataset": null, "code": "r.table('dc').index_create('code_name').run(conn)", "description": "To efficiently query our heros by name we can create a secondary\nindex based on the value of that field. We can already quickly query\nheros by name with the primary index but to do the same based on hero\ncode names we'll have to create a secondary index based on that\nattribute.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('power_rating') {|hero|\n  hero['combat_power'] + (2 * hero['compassion_power'])\n}.run(conn)\n", "description": "You can also create a secondary index based on an arbitrary function\non the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('parental_planets') {|hero|\n  [hero['mothers_home_planet'], hero['fathers_home_planet']]\n}.run(conn)\n", "description": "A compound index can be created by returning an array of values to\nuse as the secondary index key.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('abilities', :multi => true).run(conn)\n", "description": "A multi index can be created by passing an optional\n<code>multi</code> argument.  Multi indexes functions should return\narrays and allow you to query based on whether a value is present in\nthe returned array. The example would allow us to get heroes who\npossess a specific ability (the field <code>'abilities'</code> is an\narray).\n", "can_try": false}]}, "js": {"body": "$PARENT.indexCreate(indexName[, indexFunction])", "name": "indexCreate", "examples": [{"dataset": null, "code": "r.table('dc').indexCreate('code_name').run(conn, callback)", "description": "To efficiently query our heros by name we can create a secondary\nindex based on the value of that field. We can already quickly query\nheros by name with the primary index but to do the same based on hero\ncode names we'll have to create a secondary index based on that\nattribute.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').indexCreate('power_rating', function(hero) {\n  return hero('combat_power').add(hero('compassion_power').mul(2));\n}).run(conn, callback)\n", "description": "You can also create a secondary index based on an arbitrary function\non the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').indexCreate('parental_planets', function(hero) {\n  return [hero('mothers_home_planet'), hero('fathers_home_planet')];\n}).run(conn, callback)\n", "description": "A compound index can be created by returning an array of values to\nuse as the secondary index key.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').indexCreate('abilities', {multi:true}).run(conn, callback)\n", "description": "A multi index can be created by passing an optional\n<code>multi</code> argument.  Multi indexes functions should return\narrays and allow you to query based on whether a value is present in\nthe returned array. The example would allow us to get heroes who\npossess a specific ability (the field <code>'abilities'</code> is an\narray).\n", "can_try": false}]}}, "tag": "index_create", "description": "Create a new secondary index on this table.", "io": [["table", "object"]], "order": 70}, {"langs": {"py": {"body": "$PARENT.index_drop(index_name)", "name": "index_drop", "examples": [{"dataset": null, "code": "r.table('dc').index_drop('code_name').run(conn)", "description": "Drop a secondary index named 'code_name'.", "can_try": false}]}, "rb": {"body": "$PARENT.index_drop(index_name)", "name": "index_drop", "examples": [{"dataset": null, "code": "r.table('dc').index_drop('code_name').run(conn)", "description": "Drop a secondary index named 'code_name'.", "can_try": false}]}, "js": {"body": "$PARENT.indexDrop(indexName)", "name": "indexDrop", "examples": [{"dataset": null, "code": "r.table('dc').indexDrop('code_name').run(conn, callback)", "description": "Drop a secondary index named 'code_name'.", "can_try": false}]}}, "tag": "index_drop", "description": "Delete a previously created secondary index of this table.", "io": [["table", "object"]], "order": 71}, {"langs": {"py": {"body": "$PARENT.index_list()", "name": "index_list", "examples": [{"dataset": null, "code": "r.table('marvel').index_list().run(conn)", "description": "List the available secondary indexes for this table.", "can_try": false}]}, "rb": {"body": "$PARENT.index_list", "name": "index_list", "examples": [{"dataset": null, "code": "r.table('marvel').index_list().run(conn)", "description": "List the available secondary indexes for this table.", "can_try": false}]}, "js": {"body": "$PARENT.indexList()", "name": "indexList", "examples": [{"dataset": null, "code": "r.table('marvel').indexList().run(conn, callback)", "description": "List the available secondary indexes for this table.", "can_try": false}]}}, "tag": "index_list", "description": "List all the secondary indexes of this table.", "io": [["table", "array"]], "order": 72}], "tag": "table_admin", "name": "Manipulating tables", "description": "These commands allow table manipulation."}, {"order": 3, "commands": [{"langs": {"py": {"body": "$PARENT.insert(json | [json][, durability='soft', return_vals=True, upsert=True])", "name": "insert", "examples": [{"dataset": null, "code": "r.table('marvel').insert(\n    { 'superhero': 'Iron Man', 'superpower':'Arc Reactor' }).run(conn)\n", "description": "Insert a row into a table named 'marvel'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert([\n  { 'superhero': 'Wolverine', 'superpower': 'Adamantium' },\n  { 'superhero': 'Spiderman', 'superpower': 'spidy sense' }\n], durability='soft').run(conn)\n", "description": "Insert multiple rows into a table named 'marvel'.  Also, specify that only soft durability is required.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert(\n  { 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' },\n  upsert=True\n).run(conn)\n", "description": "Insert a row into a table named 'marvel', overwriting if the document already exists.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert(\n  { 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' },\n  upsert=True, return_vals=True\n).run(conn)\n", "description": "Get back a copy of the new row, this is useful if you've done an upsert or generated an ID.", "can_try": false}]}, "rb": {"body": "$PARENT.insert(json | [json][, { :durability => 'soft', :return_vals => true :upsert => true}])", "name": "insert", "examples": [{"dataset": null, "code": "r.table('marvel').insert(\n    { :superhero => 'Iron Man', :superpower => 'Arc Reactor' }).run(conn)\n", "description": "Insert a row into a table named 'marvel'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert([\n  {:superhero => 'Wolverine', :superpower => 'Adamantium'},\n  {:superhero => 'Spiderman', :superpower => 'spidy sense'}\n], :durability => 'soft').run(conn)\n", "description": "Insert multiple rows into a table named 'marvel'.  Also, specify that only soft durability is required.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert(\n  {:superhero => 'Iron Man', :superpower => 'Arc Reactor' },\n  {:upsert => true }\n).run(conn)\n", "description": "Insert a row into a table named 'marvel', overwriting if the document already exists.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert(\n  {:superhero => 'Iron Man', :superpower => 'Arc Reactor' },\n  {:upsert => true , :return_vals => true}\n).run(conn)\n", "description": "Get back a copy of the new row, this is useful if you've done an upsert or generated an ID.", "can_try": false}]}, "js": {"body": "$PARENT.insert(json | [json][, {durability: 'soft', returnVals: true, upsert:true}])", "name": "insert", "examples": [{"dataset": null, "code": "r.table('marvel').insert({ superhero: 'Iron Man', superpower: 'Arc Reactor' })\n .run(conn, callback)\n", "description": "Insert a row into a table named 'marvel'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert([\n  { superhero: 'Wolverine', superpower: 'Adamantium' },\n  { superhero: 'Spiderman', superpower: 'spidy sense' }\n], { durability: 'soft' }).run(conn, callback)\n", "description": "Insert multiple rows into a table named 'marvel'.  Also, specify that only soft durability is required.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert(\n  { superhero: 'Iron Man', superpower: 'Arc Reactor' },\n  {upsert: true}\n).run(conn, callback)\n", "description": "Insert a row into a table named 'marvel', overwriting if the document already exists.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert(\n  { superhero: 'Iron Man', superpower: 'Arc Reactor' },\n  {upsert: true, return_vals: true}\n).run(conn, callback)\n", "description": "Get back a copy of the new row, this is useful if you've done an upsert or generated an ID.", "can_try": false}]}}, "tag": "insert", "description": "Insert JSON documents into a table. Accepts a single JSON\ndocument or an array of documents.  You may also pass the\noptional argument <code>durability</code> with value\n<code>'hard'</code> or <code>'soft'</code>, to override the\ntable or query's default durability setting, or the optional argument <code>return_vals</code>, which will return the value of the row you're inserting (and the old value if you use <code>upsert</code>) when set to true.<br/><br/>\nInsert returns an object that contains the following attributes:\n<ul>\n<li><code>inserted</code> - the number of documents that were succesfully inserted;</li>\n<li><code>replaced</code> - the number of documents that were updated when <code>upsert</code> is used;</li>\n<li><code>unchanged</code> - the number of documents that would have been modified, except that the new\nvalue was the same as the old value when doing an <code>upsert</code>;</li>\n<li><code>errors</code> - the number of errors encountered while inserting;</li>\n<li>if errors where encountered while inserting, <code>first_error</code> contains the text of the first error;</li>\n<li><code>generated_keys</code> - a list of generated primary key values;</li>\n<li><code>deleted</code> and <code>skipped</code>\n- <code>0</code> for an <code>insert</code> operation.</li>\n</ul>\n", "io": [["table", "object"]], "order": 0}, {"langs": {"py": {"body": "$PARENT.update(json | expr[, durability='soft', return_vals=true])", "name": "update", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').update({ 'age': 30 }).run(conn)", "description": "Update Superman's age to 30. If attribute 'age' doesn't\nexist, adds it to the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update(lambda x: {'age': x['age'] + 1}, durability='soft').run(conn)", "description": "Increment every superhero's age. If age doesn't exist, throws an error.  Specify soft durability.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update(\n    lambda x: {'age': x['age'] + r.js('1')}, non_atomic=True).run(conn)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('superman').update({ 'age': 30 }, return_vals=True).run(conn)", "description": "You can get back a copy of the original row and the update row using the return_vals flag.", "can_try": false}]}, "rb": {"body": "$PARENT.update(json | expr[, durability => 'soft', return_vals => true])", "name": "update", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').update{ {:age => 30} }.run(conn)", "description": "Update Superman's age to 30. If attribute 'age' doesn't\nexist, adds it to the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update(:durability => 'soft') {|hero| {:age => hero[:age] + 1}}.run(conn)", "description": "Increment every superhero's age. If age doesn't exist, throws an error.  Specify soft durability.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update({ :non_atomic => true }) {|hero| {:age => hero[:age] + r.js('1')}\n }.run(conn)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('superman').update( {:age => 30}, :return_vals => true).run(conn)", "description": "You can get back a copy of the original row and the update row using the return_vals flag.", "can_try": false}]}, "js": {"body": "$PARENT.update(json | expr[, {durability: 'soft', return_vals: true])", "name": "update", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').update({ age: 30 }).run(conn, callback)", "description": "Update Superman's age to 30. If attribute 'age' doesn't\nexist, adds it to the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update({ age: r.row('age').add(1) }, { durability: 'soft' }).run(conn, callback)", "description": "Increment every superhero's age. If age doesn't exist, throws an error.  Specify soft durability.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update(\n  { age: r.row('age').add(r.js('1')) },\n  {'nonAtomic':true}\n).run(conn, callback)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('superman').update({ age: 30 }, {return_vals: true}).run(conn, callback)", "description": "You can get back a copy of the original row and the update row using the return_vals flag.", "can_try": false}]}}, "tag": "update", "description": "Update JSON documents in a table. Accepts a JSON document, a RQL\nexpression, or a combination of the two.  The optional argument\n<code>durability</code> with value <code>'hard'</code> or\n<code>'soft'</code> will override the table or query's default\ndurability setting.  The optional argument <code>return_vals</code> will return the old and new values of the row you're modifying when set to true (only valid for single-row updates).  The optional argument\n<code>non_atomic</code> lets you permit non-atomic updates.<br/><br/>\nUpdate returns an object that contains the following attributes:\n<ul>\n<li><code>replaced</code> - the number of documents that were updated;</li>\n<li><code>unchanged</code> - the number of documents that would have been modified\nexcept the new value was the same as the old value;</li>\n<li><code>skipped</code> - the number of documents that were left unmodified because\nthere was nothing to do: either the row didn't exist or the new value is null;</li>\n<li><code>errors</code> - the number of errors encountered while performing the update;</li>\n<li>if errors occured, <code>first_error</code> contains the text of the first error;</li>\n<li><code>deleted</code> and  <code>inserted</code>\n- <code>0</code> for an <code>update</code> operation.</li>\n</ul>\n", "io": [["table", "object"], ["selection", "object"], ["singleSelection", "object"]], "order": 1}, {"langs": {"py": {"body": "$PARENT.replace(json | expr[, durability='soft', return_vals=true])", "name": "replace", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').replace({ 'id': 'superman', 'age': 30 }).run(conn)", "description": "Remove all existing attributes from Superman's document, and add an attribute 'age'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('superman').replace(\n    { 'id': 'superman', 'age': 30 }, non_atomic=True).run(conn)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}, {"dataset": null, "code": "r.table('heroes').filter(r.row['universe'] == 'marvel').replace(\n    lambda hero: hero.merge({'is_fav': True}), durability='soft').run(conn)\n", "description": "Mark all Marvel heroes as favorites, specifying soft durability.", "can_try": false}, {"dataset": null, "code": "r.table('heroes').filter(r.row['universe'] == 'marvel').replace(\n    lambda hero: hero.merge({'is_fav': True}), return_vals=True).run(conn)\n", "description": "You can get a copy of the previous value and the old value back using the <code>return_vals</code> flag.", "can_try": false}]}, "rb": {"body": "$PARENT.replace(json | expr[, durability => 'soft', return_vals => true])", "name": "replace", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').replace{ {:id => 'superman', :age => 30} }.run(conn)", "description": "Remove all existing attributes from Superman's document, and add an attribute 'age'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('superman').replace(\n   { :non_atomic => true }, {:id => 'superman', :age => 30}).run(conn)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}, {"dataset": null, "code": "r.table('heroes').filter { |hero| hero[:universe].eq 'marvel'\n }.replace(:durability => 'soft') { |hero| hero.merge(:is_fav => true)\n }.run(conn)\n", "description": "Mark all Marvel heroes as favorites, specifying soft durability.", "can_try": false}, {"dataset": null, "code": "r.table('heroes').filter { |hero| hero[:universe].eq 'marvel'\n }.replace(:return_vals => true) { |hero| hero.merge(:is_fav => true)\n }.run(conn)\n", "description": "You can get a copy of the previous value and the old value back using the <code>return_vals</code> flag.", "can_try": false}]}, "js": {"body": "$PARENT.replace(json | expr[, {durability: 'soft', return_vals: true}])", "name": "replace", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').replace({ id: 'superman', age: 30 })\n .run(conn, callback)\n", "description": "Remove all existing attributes from Superman's document, and add an attribute 'age'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('superman').replace({ id: 'superman', age: r.js('30') },\n  { 'nonAtomic': true }\n).run(conn, callback)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}, {"dataset": null, "code": "r.table('heroes').filter(r.row('universe').eq('marvel'))\n .replace(function(doc) {return doc.merge({is_fav: true})}, { durability: 'soft' })\n .run(conn, callback)\n", "description": "Mark all Marvel heroes as favorites, specifying soft durability.", "can_try": false}, {"dataset": null, "code": "r.table('heroes').filter(r.row('universe').eq('marvel'))\n .replace(function(doc) {return doc.merge({is_fav: true})}, { return_vals: true })\n .run(conn, callback)\n", "description": "You can get a copy of the previous value and the old value back using the <code>return_vals</code> flag.", "can_try": false}]}}, "tag": "replace", "description": "Replace documents in a table. Accepts a JSON document or a RQL\nexpression, and replaces the original document with the new\none. The new document must have the same primary key as the\noriginal document.  The optional argument\n<code>durability</code> with value <code>'hard'</code> or\n<code>'soft'</code> will override the table or query's default\ndurability setting.  The optional argument <code>return_vals</code> will return the old and new values of the row you're modifying when set to true (only valid for single-row replacements).  The optional argument\n<code>non_atomic</code> lets you permit non-atomic updates.<br/><br/>\nReplace returns an object that contains the following attributes:\n<ul>\n<li><code>replaced</code> - the number of documents that were replaced;</li>\n<li><code>unchanged</code> - the number of documents that would have been modified,\nexcept that the new value was the same as the old value;</li>\n<li><code>inserted</code> - the number of new documents added. You can have new documents\ninserted if you do a point-replace on a key that isn't in the table or you do a replace\non a selection and one of the documents you are replacing has been deleted;</li>\n<li><code>deleted</code> - the number of deleted documents when doing a replace with null;</li>\n<li><code>errors</code> - the number of errors encountered while performing the replace;</li>\n<li>if errors occurred performing the replace, <code>first_error</code> contains the text of the first error encountered;</li>\n<li><code>skipped</code> - <code>0</code> for a <code>replace</code> operation.</li>\n</ul>\n", "io": [["table", "object"], ["selection", "object"], ["singleSelection", "object"]], "order": 2}, {"langs": {"py": {"body": "$PARENT.delete([durability='soft', return_vals=true])", "name": "delete", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').delete().run(conn)", "description": "Delete superman from the database.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').delete(durability='soft').run(conn)", "description": "Delete every document from the table 'marvel'.  Also, don't wait for the operation to be flushed to disk.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').delete(return_vals=True).run(conn)", "description": "You can get back a copy of the row you delete from the database as well.", "can_try": false}]}, "rb": {"body": "$PARENT.delete[({:durability => soft, :return_vals => true})]", "name": "delete", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').delete.run(conn)", "description": "Delete superman from the database.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').delete(:durability => 'soft').run(conn)", "description": "Delete every document from the table 'marvel'.  Also, don't wait for the operation to be flushed to disk.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').delete(:return_vals => true).run(conn)", "description": "You can get back a copy of the row you delete from the database as well.", "can_try": false}]}, "js": {"body": "$PARENT.delete([{durability: 'soft', return_vals: true}])", "name": "delete", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').delete().run(conn, callback)", "description": "Delete superman from the database.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').delete({durability: 'soft'}).run(conn, callback)\n", "description": "Delete every document from the table 'marvel'.  Also, don't wait for the operation to be flushed to disk.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').delete({return_vals: true}).run(conn, callback)\n", "description": "You can get back a copy of the row you delete from the database as well.", "can_try": false}]}}, "tag": "delete", "description": "Delete one or more documents from a table.  The optional argument <code>return_vals</code> will return the old value of the row you're deleting when set to true (only valid for single-row deletes).  The optional argument\n<code>durability</code> with value <code>'hard'</code> or\n<code>'soft'</code> will override the table or query's default\ndurability setting.<br/><br/>\nDelete returns an object that contains the following attributes:\n<ul>\n<li><code>deleted</code> - the number of documents that were deleted;</li>\n<li><code>skipped</code> - the number of documents from the selection that were left unmodified\nbecause there was nothing to do. For example, if you delete a row that has already been deleted,\nthat row will be skipped;</li>\n<li><code>errors</code> - the number of errors encountered while deleting;</li>\n<li>if errors occured, <code>first_error</code> contains the text of the first error;</li>\n<li><code>inserted</code>, <code>replaced</code>, and <code>unchanged</code> - all\n<code>0</code> for a <code>delete</code> operation.</li>\n</ul>\n", "io": [["table", "object"], ["selection", "object"], ["singleSelection", "object"]], "order": 3}], "tag": "writing_data", "name": "Writing data", "description": "These commands allow inserting, deleting, and updating data."}, {"order": 4, "commands": [{"langs": {"py": {"body": "$PARENT.db(db_name)", "name": "db", "examples": [{"dataset": null, "code": "r.db('heroes').table('marvel').run(conn)", "description": "Before we can query a table we have to select the correct database.", "can_try": false}]}, "rb": {"body": "$PARENT.db(db_name)", "name": "db", "examples": [{"dataset": null, "code": "r.db('heroes').table('marvel').run(conn)", "description": "Before we can query a table we have to select the correct database.", "can_try": false}]}, "js": {"body": "$PARENT.db(dbName)", "name": "db", "examples": [{"dataset": null, "code": "r.db('heroes').table('marvel').run(conn, callback)", "description": "Before we can query a table we have to select the correct database.", "can_try": false}]}}, "tag": "db", "description": "Reference a database.", "io": [["r", "db"]], "order": 61}, {"langs": {"py": {"body": "$PARENT.table(name[, use_outdated=False])", "name": "table", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn)", "description": "Return all documents in the table 'marvel' of the default database.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel').run(conn)", "description": "Return all documents in the table 'marvel' of the database 'heroes'.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel', True).run(conn)", "description": "If you are OK with potentially out of date data\nfrom this table and want potentially faster reads, pass\na flag allowing out of date data.\n", "can_try": false}]}, "rb": {"body": "$PARENT.table(name[, opts])", "name": "table", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn)", "description": "Return all documents in the table 'marvel' of the default database.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel').run(conn)", "description": "Return all documents in the table 'marvel' of the database 'heroes'.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel', {:use_outdated => true}).run(conn)", "description": "If you are OK with potentially out of date data\nfrom this table and want potentially faster reads, pass\na flag allowing out of date data.\n", "can_try": false}]}, "js": {"body": "$PARENT.table(name[, {useOutdated: false}])", "name": "table", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn, callback)", "description": "Return all documents in the table 'marvel' of the default database.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel').run(conn, callback)", "description": "Return all documents in the table 'marvel' of the database 'heroes'.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel', {useOutdated: true}).run(conn, callback)", "description": "If you are OK with potentially out of date data\nfrom this table and want potentially faster reads, pass\na flag allowing out of date data.\n", "can_try": false}]}}, "tag": "table", "description": "Select all documents in a table. This command can be chained with\nother commands to do further processing on the data.\n", "io": [["db", "table"]], "order": 62}, {"langs": {"py": {"body": "$PARENT.get(key)", "name": "get", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').run(conn)", "description": "Find a document with the primary key 'superman'.", "can_try": false}]}, "rb": {"body": "$PARENT.get(key)", "name": "get", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').run(conn)", "description": "Find a document with the primary key 'superman'.", "can_try": false}]}, "js": {"body": "$PARENT.get(key)", "name": "get", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').run(conn, callback)", "description": "Find a document with the primary key 'superman'.", "can_try": false}]}}, "tag": "get", "description": "Get a document by primary key.", "io": [["table", "singleRowSelection"]], "order": 63}, {"langs": {"py": {"body": "$PARENT.get_all(key1[, key2...], [, index='id'])", "name": "get_all", "examples": [{"dataset": null, "code": "r.table('marvel').get_all('man_of_steel', index='code_name').run(conn)", "description": "Secondary index keys are not guaranteed to be unique so we cannot\nquery via \"get\" when using a secondary index.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').get_all('superman').run(conn)", "description": "Without an index argument, we default to the primary index. While\n`get` will either return the document or `null` when no document\nwith such a primary key value exists, this will return either a one\nor zero length stream.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').get_all('superman', 'ant man').run(conn)", "description": "You can get multiple documents in a single call to `get_all`.\n", "can_try": false}]}, "rb": {"body": "$PARENT.get_all(key[, key2...], [, :index => 'id'])", "name": "get_all", "examples": [{"dataset": null, "code": "r.table('marvel').get_all('man_of_steel', :index => 'code_name').run(conn)", "description": "Secondary index keys are not guaranteed to be unique so we cannot\nquery via \"get\" when using a secondary index.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').get_all('superman').run(conn)", "description": "Without an index argument, we default to the primary index. While\n`get` will either return the document or `null` when no document\nwith such a primary key value exists, this will return either a one\nor zero length stream.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').get_all('superman', 'ant man').run(conn)", "description": "You can get multiple documents in a single call to `get_all`.\n", "can_try": false}]}, "js": {"body": "$PARENT.getAll(key[, key2...], [, {index:'id'}])", "name": "getAll", "examples": [{"dataset": null, "code": "r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)", "description": "Secondary index keys are not guaranteed to be unique so we cannot\nquery via \"get\" when using a secondary index.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').getAll('superman').run(conn, callback)", "description": "Without an index argument, we default to the primary index. While\n`get` will either return the document or `null` when no document\nwith such a primary key value exists, this will return either a one\nor zero length stream.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').getAll('superman', 'ant man').run(conn, callback)", "description": "You can get multiple documents in a single call to `get_all`.\n", "can_try": false}]}}, "tag": "get_all", "description": "Get all documents where the given value matches the value of the requested index.", "io": [["table", "selection"]], "order": 64}, {"langs": {"py": {"body": "$PARENT.between(lower_key, upper_key[, index='id', left_bound='closed', right_bound='open'])", "name": "between", "examples": [{"dataset": null, "code": "r.table('marvel').between(10, 20).run(conn)", "description": "Find all users with primary key >= 10 and < 20 (a normal half-open interval).", "can_try": false}, {"dataset": null, "code": "r.table('marvel').between(10, 20, right_bound='closed').run(conn)", "description": "Find all users with primary key >= 10 and <= 20 (an interval closed on both sides).", "can_try": false}, {"dataset": null, "code": "r.table('marvel').between(None, 20, right_bound='closed').run(conn)", "description": "Find all users with primary key < 20.  (You can use `NULL` to mean \"unbounded\" for either endpoint.)", "can_try": false}, {"dataset": null, "code": "r.table('dc').between('dark_knight', 'man_of_steel', index='code_name').run(conn)", "description": "Between can be used on secondary indexes too. Just pass an optional index\nargument giving the secondary index to query.\n", "can_try": false}]}, "rb": {"body": "$PARENT.between(lower_key, upper_key[, :index => 'id', :left_bound => 'closed', :right_bound => 'open'])", "name": "between", "examples": [{"dataset": null, "code": "r.table('marvel').between(10, 20).run(conn)", "description": "Find all users with primary key >= 10 and < 20 (a normal half-open interval).", "can_try": false}, {"dataset": null, "code": "r.table('marvel').between(10, 20, :right_bound => 'closed').run(conn)", "description": "Find all users with primary key >= 10 and <= 20 (an interval closed on both sides).", "can_try": false}, {"dataset": null, "code": "r.table('marvel').between(nil, 20, :right_bound => 'closed').run(conn)", "description": "Find all users with primary key < 20.  (You can use `NULL` to mean \"unbounded\" for either endpoint.)", "can_try": false}, {"dataset": null, "code": "r.table('dc').between('dark_knight', 'man_of_steel', :index => 'code_name').run(conn)", "description": "Between can be used on secondary indexes too. Just pass an optional index\nargument giving the secondary index to query.\n", "can_try": false}]}, "js": {"body": "$PARENT.between(lowerKey, upperKey[, {index:'id', left_bound:'closed', right_bound:'open'}])", "name": "between", "examples": [{"dataset": null, "code": "r.table('marvel').between(10, 20).run(conn, callback)", "description": "Find all users with primary key >= 10 and < 20 (a normal half-open interval).", "can_try": false}, {"dataset": null, "code": "r.table('marvel').between(10, 20, {'right_bound':'closed'}).run(conn, callback)", "description": "Find all users with primary key >= 10 and <= 20 (an interval closed on both sides).", "can_try": false}, {"dataset": null, "code": "r.table('marvel').between(null, 20, {'right_bound':'closed'}).run(conn, callback)", "description": "Find all users with primary key < 20.  (You can use `NULL` to mean \"unbounded\" for either endpoint.)", "can_try": false}, {"dataset": null, "code": "r.table('dc').between('dark_knight', 'man_of_steel', {index:'code_name'}).run(conn, callback)", "description": "Between can be used on secondary indexes too. Just pass an optional index\nargument giving the secondary index to query.\n", "can_try": false}]}}, "tag": "between", "description": "Get all documents between two keys.  Accepts three optional arguments: `index`, `left_bound`, and `right_bound`.  If `index` is set to the name of a secondary index, `between` will return all documents where that index's value is in the specified range (it uses the primary key by default).  `left_bound` or `right_bound` may be set to `open` or `closed` to indicate whether or not to include that endpoint of the range (by default, `left_bound` is closed and `right_bound` is open).\n", "io": [["table", "selection"]], "order": 65}, {"langs": {"py": {"body": "$PARENT.filter(predicate)", "name": "filter", "examples": [{"dataset": null, "code": "r.table('users').filter({'active': True, 'profile': {'age': 30}}).run(conn)", "description": "Get all active users aged 30.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter({'active': True, 'profile': r.literal({'age': 30})}).run(conn)", "description": "Filter supports the <code>r.literal</code> syntax if you want to get an exact match.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter(r.row['magazines'] > 5).run(conn)", "description": "Select all documents where the 'magazines' field is greater than 5.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n    lambda hero: hero['abilities'].has_fields('super-strength')).run(conn)\n", "description": "Select all documents where the 'abilities' embedded document has an attribute called 'super-strength'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.row['powers'].filter(lambda el: el == 10).count() > 0\n).run(conn)\n", "description": "Select all documents where the field 'powers' containing an array has an element equal to 10.", "can_try": false}]}, "rb": {"body": "$PARENT.filter(predicate)", "name": "filter", "examples": [{"dataset": null, "code": "r.table('users').filter('active' => true, 'profile' => {'age' => 30}).run(conn)", "description": "Get all active users aged 30.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter('active' => true, 'profile' => r.literal({'age' => 30})).run(conn)", "description": "Filter supports the <code>r.literal</code> syntax if you want to get an exact match.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter{|user| user[:magazines] > 5}.run(conn)", "description": "Select all documents where the 'magazines' field is greater than 5.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter {|hero|\n  hero[:abilities].has_fields('super-strength')\n}.run(conn)\n", "description": "Select all documents where the 'abilities' embedded document has an attribute called 'super-strength'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter { |hero|\n  hero[:powers].filter { |power_rank| power_rank.eq(10) }.count() > 0\n}.run(conn)\n", "description": "Select all documents where the field 'powers' containing an array has an element equal to 10.", "can_try": false}]}, "js": {"body": "$PARENT.filter(predicate)", "name": "filter", "examples": [{"dataset": null, "code": "r.table('users').filter({active: true, profile: {age: 30}}).run(conn, callback)", "description": "Get all active users aged 30.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter({active: true, profile: r.literal({age: 30})}).run(conn, callback)", "description": "Filter supports the <code>r.literal</code> syntax if you want to get an exact match.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(r.row('magazines').gt(5)).run(conn, callback)", "description": "Select all documents where the 'magazines' field is greater than 5.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(function(hero) {\n  return hero('abilities').hasFields('super-strength')\n}).run(conn, callback)\n", "description": "Select all documents where the 'abilities' embedded document has an attribute called 'super-strength'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.row('poweres').filter(\n    function(powers_el) { return powers_el.eq(10) }\n  ).count().gt(0)\n).run(conn, callback)\n", "description": "Select all documents where the field 'powers' containing an array has an element equal to 10.", "can_try": false}]}}, "tag": "filter", "description": "Get all the documents for which the given predicate is true.<br\n/><br /> <code>filter</code> can be called on a sequence,\nselection, or a field containing an array of elements. The\nreturn type is the same as the type on which the function was\ncalled on.  The body of every filter is wrapped in an implicit\n`.default(false)`, and the default value can be changed by\npassing the optional argument `default`.  Setting this optional\nargument to `r.error()` will cause any non-existence errors to\nabort the filter.\n", "io": [["sequence", "selection"], ["stream", "stream"], ["array", "array"]], "order": 66}], "tag": "select", "name": "Selecting data", "description": "These commands allow searching for data in the database."}, {"order": 5, "commands": [{"langs": {"py": {"body": "$PARENT.inner_join(other_sequence, predicate)", "name": "inner_join", "examples": [{"dataset": null, "code": "r.table('marvel').inner_join(r.table('dc'), lambda marvelRow, dcRow: marvelRow['strength'] < dcRow['strength']).run(conn)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose.", "can_try": false}]}, "rb": {"body": "$PARENT.inner_join(other_sequence, predicate)", "name": "inner_join", "examples": [{"dataset": null, "code": "r.table('marvel').inner_join(r.table('dc')) {|marvel_row, dc_row|\n marvel_row[:strength] < dc_row[:strength]\n}.run(conn)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose.", "can_try": false}]}, "js": {"body": "$PARENT.innerJoin(otherSequence, predicate)", "name": "innerJoin", "examples": [{"dataset": null, "code": "r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {\n  return marvelRow('strength').lt(dcRow('strength'))\n }).run(conn, callback)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose.", "can_try": false}]}}, "tag": "inner", "description": "Returns the inner product of two sequences (e.g. a table, a filter result) filtered by the predicate. The query compares each row of the left sequence with each row of the right sequence to find all pairs of rows which satisfy the predicate. When the predicate is satisfied, each matched pair of rows of both sequences are combined into a result row.", "io": [["sequence", "stream"], ["array", "array"]], "order": 13}, {"langs": {"py": {"body": "$PARENT.outer_join(other_sequence, predicate)", "name": "outer_join", "examples": [{"dataset": null, "code": "r.table('marvel').outer_join(r.table('dc'),\n  lambda marvelRow, dcRow: marvelRow['strength'] < dcRow['strength']).run(conn)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence.", "can_try": false}]}, "rb": {"body": "$PARENT.outer_join(other_sequence, predicate)", "name": "outer_join", "examples": [{"dataset": null, "code": "r.table('marvel').outer_join(r.table('dc')) {|marvel_row, dc_row|\n marvel_row[:strength] < dc_row[:strength]\n}.run(conn)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence.", "can_try": false}]}, "js": {"body": "$PARENT.outerJoin(otherSequence, predicate)", "name": "outerJoin", "examples": [{"dataset": null, "code": "r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {\n return marvelRow('strength').lt(dcRow('strength'))\n}).run(conn, callback)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence.", "can_try": false}]}}, "tag": "outer", "description": "Computes a left outer join by retaining each row in the left table even if no match was found in the right table.", "io": [["sequence", "stream"], ["array", "array"]], "order": 14}, {"langs": {"py": {"body": "$PARENT.eq_join(left_attr, other_table[, index='id'])", "name": "eq_join", "examples": [{"dataset": null, "code": "r.table('marvel').eq_join('main_dc_collaborator', r.table('dc')).run(conn)", "description": "Let our heroes join forces to battle evil!", "can_try": false}, {"dataset": null, "code": "r.table('marvel').inner_join(r.table('dc'),\n  lambda left, right: left['main_dc_collaborator'] == right['hero_name']).run(conn)", "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').eq_join('main_weapon_origin',\n    r.table('mythical_weapons'), index='origin').run(conn)\n", "description": "You can take advantage of a secondary index on the second table by giving an optional index parameter.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').eq_join(lambda doc: doc['dc_collaborators'].order_by('appearances')[0]['name'],\n    r.table('dc')).run(conn)\n", "description": "You can pass a function instead of an attribute to join on more complicated expressions. Here we join to the DC universe collaborator with whom the hero has the most appearances.", "can_try": false}]}, "rb": {"body": "$PARENT.eq_join(left_attr, other_table[, :index => 'id'])", "name": "eq_join", "examples": [{"dataset": null, "code": "r.table('marvel').eq_join(:main_dc_collaborator, r.table('dc')).run(conn)", "description": "Let our heroes join forces to battle evil!", "can_try": false}, {"dataset": null, "code": "r.table('marvel').inner_join(r.table('dc')) {|left, right|\n left[:main_dc_collaborator].eq(right[:hero_name])\n}.run(conn)", "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').eq_join('main_weapon_origin',\n    r.table('mythical_weapons'), :index => 'origin').run(conn)\n", "description": "You can take advantage of a secondary index on the second table by giving an optional index parameter.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').eq_join(lambda {|doc| doc[:dc_collaborators].order_by(:appearances)[0][:name]},\n    r.table('dc')).run(conn)\n", "description": "You can pass a function instead of an attribute to join on more complicated expressions. Here we join to the DC universe collaborator with whom the hero has the most appearances.", "can_try": false}]}, "js": {"body": "$PARENT.eqJoin(leftAttr, otherTable[, {index:'id'}])", "name": "eqJoin", "examples": [{"dataset": null, "code": "r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc')).run(conn, callback)", "description": "Let our heroes join forces to battle evil!", "can_try": false}, {"dataset": null, "code": "r.table('marvel').innerJoin(r.table('dc'), function(left, right) {\n  return left('main_dc_collaborator').eq(right('hero_name'));\n}).run(conn, callback)", "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').eqJoin('main_weapon_origin',\n    r.table('mythical_weapons'), {index:'origin'}).run(conn, callback)\n", "description": "You can take advantage of a secondary index on the second table by giving an optional index parameter.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').eqJoin(function (doc) { return doc('dcCollaborators').orderBy('appearances').nth(0)('name'); },\n    r.table('dc')).run(conn, callback)\n", "description": "You can pass a function instead of an attribute to join on more complicated expressions. Here we join to the DC universe collaborator with whom the hero has the most appearances.", "can_try": false}]}}, "tag": "eqJoin", "description": "An efficient join that looks up elements in the right table by primary key.", "io": [["sequence", "stream"], ["array", "array"]], "order": 15}, {"langs": {"py": {"body": "$PARENT.zip()", "name": "zip", "examples": [{"dataset": null, "code": "r.table('marvel').eq_join('main_dc_collaborator', r.table('dc')).zip().run(conn)", "description": "'zips up' the sequence by merging the left and right fields produced by a join.", "can_try": false}]}, "rb": {"body": "$PARENT.zip", "name": "zip", "examples": [{"dataset": null, "code": "r.table('marvel').eq_join(:main_dc_collaborator, r.table('dc')).zip.run(conn)", "description": "'zips up' the sequence by merging the left and right fields produced by a join.", "can_try": false}]}, "js": {"body": "$PARENT.zip()", "name": "zip", "examples": [{"dataset": null, "code": "r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))\n .zip().run(conn, callback)", "description": "'zips up' the sequence by merging the left and right fields produced by a join.", "can_try": false}]}}, "tag": "zip", "description": "Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.", "io": [["stream", "stream"], ["array", "array"]], "order": 16}], "tag": "joins", "name": "Joins", "description": "These commands allow the combination of multiple sequences into a single sequence"}, {"order": 6, "commands": [{"langs": {"py": {"body": "$PARENT.map(mapping_function)", "name": "map", "examples": [{"dataset": null, "code": "r.table('marvel').map(\n    lambda hero: hero['combatPower'] + hero['compassionPower'] * 2).run(conn)", "description": "Construct a sequence of hero power ratings.", "can_try": false}]}, "rb": {"body": "$PARENT.map(mapping_function)", "name": "map", "examples": [{"dataset": null, "code": "r.table('marvel').map {|hero|\n hero[:combat_power] + hero[:compassion_power] * 2\n}.run(conn)", "description": "Construct a sequence of hero power ratings.", "can_try": false}]}, "js": {"body": "$PARENT.map(mappingFunction)", "name": "map", "examples": [{"dataset": null, "code": "r.table('marvel').map(function(hero) {\n return hero('combatPower').add(hero('compassionPower').mul(2))\n}).run(conn, callback)", "description": "Construct a sequence of hero power ratings.", "can_try": false}]}}, "tag": "map", "description": "Transform each element of the sequence by applying the given mapping function.", "io": [["sequence", "stream"], ["array", "array"]], "order": 49}, {"langs": {"py": {"body": "$PARENT.with_selectors([selector1, selector2...])", "name": "with_fields", "examples": [{"dataset": null, "code": "r.table('marvel').with_fields('id', 'nemesis')", "description": "Get a list of heroes and their nemeses, excluding any heroes that lack one.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').with_fields('id', {'nemesis' : {'evil_organization' : True}})", "description": "Get a list of heroes and their nemeses, excluding any heroes whose nemesis isn't in an evil organization.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').with_fields('id', {'nemesis' : 'evil_organization'})", "description": "The nested syntax can quickly become overly verbose so there's a shorthand.", "can_try": false}]}, "rb": {"body": "$PARENT.with_selectors([selector1, selector2...])", "name": "with_fields", "examples": [{"dataset": null, "code": "r.table('marvel').with_fields('id', 'nemesis')", "description": "Get a list of heroes and their nemeses, excluding any heroes that lack one.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').with_fields(:id, {:nemesis => {:evil_organization => true}})", "description": "Get a list of heroes and their nemeses, excluding any heroes whose nemesis isn't in an evil organization.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').with_fields(:id, {:nemesis => :evil_organization})", "description": "The nested syntax can quickly become overly verbose so there's a shorthand.", "can_try": false}]}, "js": {"body": "$PARENT.withFields([selector1, selector2...])", "name": "withFields", "examples": [{"dataset": null, "code": "r.table('marvel').withFields('id', 'nemesis')", "description": "Get a list of heroes and their nemeses, excluding any heroes that lack one.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').withFields('id', {'nemesis' : {'evil_organization' : true}})", "description": "Get a list of heroes and their nemeses, excluding any heroes whose nemesis isn't in an evil organization.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').withFields('id', {'nemesis' : 'evil_organization'})", "description": "The nested syntax can quickly become overly verbose so there's a shorthand.", "can_try": false}]}}, "tag": "with_fields", "description": "Takes a sequence of objects and a list of fields.  If any objects in the sequence don't have all of the specified fields, they're dropped from the sequence.  The remaining objects have the specified fields plucked out.  (This is identical to `has_fields` followed by `pluck` on a sequence.)", "io": [["sequence", "stream"], ["array", "array"]], "order": 50}, {"langs": {"py": {"body": "$PARENT.concat_map(mapping_function)", "name": "concat_map", "examples": [{"dataset": null, "code": "r.table('marvel').concat_map(lambda hero: hero['defeatedMonsters']).run(conn)", "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field 'defeatedMonsters' is a list that is concatenated to the sequence.", "can_try": false}]}, "rb": {"body": "$PARENT.concat_map(mapping_function)", "name": "concat_map", "examples": [{"dataset": null, "code": "r.table('marvel').concat_map {|hero|\n  hero[:defeated_monsters]\n}.run(conn)", "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field 'defeatedMonsters' is a list that is concatenated to the sequence.", "can_try": false}]}, "js": {"body": "$PARENT.concatMap(mappingFunction)", "name": "concatMap", "examples": [{"dataset": null, "code": "r.table('marvel').concatMap(function(hero) {\n  return hero('defeatedMonsters')\n}).run(conn, callback)", "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field 'defeatedMonsters' is a list that is concatenated to the sequence.", "can_try": false}]}}, "tag": "concat_map", "description": "Flattens a sequence of arrays returned by the <code>mappingFunction</code> into a single sequence.", "io": [["sequence", "stream"], ["array", "array"]], "order": 51}, {"langs": {"py": {"body": "$PARENT.order_by(key1, [key2...])", "name": "order_by", "examples": [{"dataset": null, "code": "r.table('marvel').order_by('enemies_vanquished', 'damsels_saved').run(conn)", "description": "Order our heroes by a series of performance metrics.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by('damsels_saved', index='enemies_vanquished').run(conn)", "description": "Indexes can be used to perform more efficient orderings. Notice that the index ordering always has highes precedence. Thus the following example is equivalent to the one above.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(index=r.desc('enemies_vanquished')).run(conn)", "description": "You can also specify a descending order when using an index.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(\n    r.desc('enemies_vanquished'), r.asc('damsels_saved')).run(conn)", "description": "Let's lead with our best vanquishers by specify descending ordering.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(lambda doc: doc['enemiesVanquished'] + doc['ramselsSaved']).run(conn)", "description": "You can use a function for ordering instead of just selecting an attribute.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(r.desc(lambda doc: doc['enemiesVanquished'] + doc['ramselsSaved'])).run(conn)", "description": "Functions can also be used descendingly.", "can_try": false}]}, "rb": {"body": "$PARENT.order_by(key1, [key2...])", "name": "order_by", "examples": [{"dataset": null, "code": "r.table('marvel').order_by(:enemies_vanquished, :damsels_saved).run(conn)", "description": "Order our heroes by a series of performance metrics.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(:damsels_saved, :index => :enemies_vanquished).run(conn)", "description": "Indexes can be used to perform more efficient orderings. Notice that the index ordering always has highes precedence. Thus the following example is equivalent to the one above.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(:index => r.desc(:enemies_vanquished)).run(conn)", "description": "You can also specify a descending order when using an index.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(r.desc(:enemies_vanquished),\n                           r.asc(:damsels_saved)      ).run(conn)", "description": "Let's lead with our best vanquishers by specify descending ordering.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(lambda {|doc| doc[:enemiesVanquished] + doc[:damselsSaved]}).run(conn)", "description": "You can use a function for ordering instead of just selecting an attribute.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(r.desc(lambda {|doc| doc[:enemiesVanquished] + doc[:damselsSaved]})).run(conn)", "description": "Functions can also be used descendingly.", "can_try": false}]}, "js": {"body": "$PARENT.orderBy(key1, [key2...])", "name": "orderBy", "examples": [{"dataset": null, "code": "r.table('marvel').orderBy('enemiesVanquished', 'damselsSaved').run(conn, callback)", "description": "Order our heroes by a series of performance metrics.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').orderBy('damselsSaved', {index: 'enemiesVanquished'}).run(conn, callback)", "description": "Indexes can be used to perform more efficient orderings. Notice that the index ordering always has highes precedence. Thus the following example is equivalent to the one above.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').orderBy({index: r.desc('enemiesVanquished')}).run(conn, callback)", "description": "You can also specify a descending order when using an index.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').orderBy(r.desc('enemiesVanquished'), r.asc('damselsSaved'))\n .run(conn, callback)", "description": "Let's lead with our best vanquishers by specify descending ordering.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').orderBy(function (doc) { return doc('enemiesVanquished') + doc('damselsSaved'); }).run(conn, callback)", "description": "You can use a function for ordering instead of just selecting an attribute.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').orderBy(r.desc(function (doc) { return doc('enemiesVanquished') + doc('damselsSaved'); })).run(conn, callback)", "description": "Functions can also be used descendingly.", "can_try": false}]}}, "tag": "order_by", "description": "Sort the sequence by document values of the given key(s).<br /><br /> <code>order by</code> defaults to ascending ordering. To explicitly specify the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>.", "io": [["sequence", "stream"], ["array", "array"]], "order": 52}, {"langs": {"py": {"body": "$PARENT.skip(n)", "name": "skip", "examples": [{"dataset": null, "code": "r.table('marvel').order_by('successMetric').skip(10).run(conn)", "description": "Here in conjunction with `order_by` we choose to ignore the most successful heroes.", "can_try": false}]}, "rb": {"body": "$PARENT.skip(n)", "name": "skip", "examples": [{"dataset": null, "code": "r.table('marvel').order_by(:success_metric).skip(10).run(conn)", "description": "Here in conjunction with `order_by` we choose to ignore the most successful heroes.", "can_try": false}]}, "js": {"body": "$PARENT.skip(n)", "name": "skip", "examples": [{"dataset": null, "code": "r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)", "description": "Here in conjunction with `order_by` we choose to ignore the most successful heroes.", "can_try": false}]}}, "tag": "skip", "description": "Skip a number of elements from the head of the sequence.", "io": [["sequence", "stream"], ["array", "array"]], "order": 53}, {"langs": {"py": {"body": "$PARENT.limit(n)", "name": "limit", "examples": [{"dataset": null, "code": "r.table('marvel').order_by('belovedness').limit(10).run(conn)", "description": "Only so many can fit in our Pantheon of heroes.", "can_try": false}]}, "rb": {"body": "$PARENT.limit(n)", "name": "limit", "examples": [{"dataset": null, "code": "r.table('marvel').order_by(:belovedness).limit(10).run(conn)", "description": "Only so many can fit in our Pantheon of heroes.", "can_try": false}]}, "js": {"body": "$PARENT.limit(n)", "name": "limit", "examples": [{"dataset": null, "code": "r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)", "description": "Only so many can fit in our Pantheon of heroes.", "can_try": false}]}}, "tag": "limit", "description": "End the sequence after the given number of elements.", "io": [["sequence", "stream"], ["array", "array"]], "order": 54}, {"langs": {"py": {"body": "$PARENT[start_index[, end_index]]", "name": "[]", "examples": [{"dataset": null, "code": "r.table('marvel').order_by('strength')[5:10].run(conn)", "description": "For this fight, we need heroes with a good mix of strength and agility.", "can_try": false}]}, "rb": {"body": "$PARENT[start_index[, end_index]]", "name": "[]", "examples": [{"dataset": null, "code": "r.table('marvel').order_by(:strength)[5..10].run(conn)", "description": "For this fight, we need heroes with a good mix of strength and agility.", "can_try": false}]}, "js": {"body": "$PARENT.slice(startIndex[, endIndex])", "name": "slice", "examples": [{"dataset": null, "code": "r.table('marvel').orderBy('strength').slice(5, 10).run(conn, callback)", "description": "For this fight, we need heroes with a good mix of strength and agility.", "can_try": false}]}}, "tag": "slice", "description": "Trim the sequence to within the bounds provided.", "io": [["sequence", "stream"], ["array", "array"]], "order": 55}, {"langs": {"py": {"body": "$PARENT[index]", "name": "[]", "examples": [{"dataset": null, "code": "r.expr([1,2,3])[1].run(conn)", "description": "Select the second element in the array.", "can_try": false}]}, "rb": {"body": "$PARENT[index]", "name": "[]", "examples": [{"dataset": null, "code": "r([1,2,3])[1].run(conn)", "description": "Select the second element in the array.", "can_try": false}]}, "js": {"body": "$PARENT.nth(index)", "name": "nth", "examples": [{"dataset": null, "code": "r.expr([1,2,3]).nth(1).run(conn, callback)", "description": "Select the second element in the array.", "can_try": false}]}}, "tag": "nth", "description": "Get the nth element of a sequence.", "io": [["sequence", "object"]], "order": 56}, {"langs": {"py": {"body": "$PARENT.indexes_of(datum | predicate)", "name": "indexes_of", "examples": [{"dataset": null, "code": "r.expr(['a','b','c']).indexes_of('c').run(conn)", "description": "Find the position of the letter 'c'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').union(r.table('dc')).order_by('popularity').indexes_of(\n  r.row['superpowers'].contains('invisibility')\n).run(conn)", "description": "Find the popularity ranking of invisible heroes.", "can_try": false}]}, "rb": {"body": "$PARENT.indexes_of(datum | predicate)", "name": "indexes_of", "examples": [{"dataset": null, "code": "r(['a','b','c']).indexes_of('c').run(conn)", "description": "Find the position of the letter 'c'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').union(r.table('dc')).order_by(:popularity).indexes_of{\n  |row| row[:superpowers].contains('invisibility')\n}.run(conn)", "description": "Find the popularity ranking of invisible heroes.", "can_try": false}]}, "js": {"body": "$PARENT.indexesOf(datum | predicate)", "name": "indexesOf", "examples": [{"dataset": null, "code": "r.expr(['a','b','c']).indexesOf('c').run(conn, callback)", "description": "Find the position of the letter 'c'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').union(r.table('dc')).orderBy('popularity').indexesOf(\n  r.row('superpowers').contains('invisibility')\n).run(conn, callback)", "description": "Find the popularity ranking of invisible heroes.", "can_try": false}]}}, "tag": "indexes_of", "description": "Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.", "io": [["sequence", "array"]], "order": 57}, {"langs": {"py": {"body": "$PARENT.is_empty()", "name": "is_empty", "examples": [{"dataset": null, "code": "r.table('marvel').is_empty().run(conn)", "description": "Are there any documents in the marvel table?", "can_try": false}]}, "rb": {"body": "$PARENT.is_empty", "name": "is_empty", "examples": [{"dataset": null, "code": "r.table('marvel').is_empty().run(conn)", "description": "Are there any documents in the marvel table?", "can_try": false}]}, "js": {"body": "$PARENT.isEmpty()", "name": "isEmpty", "examples": [{"dataset": null, "code": "r.table('marvel').isEmpty().run(conn, callback)", "description": "Are there any documents in the marvel table?", "can_try": false}]}}, "tag": "is_empty", "description": "Test if a sequence is empty.", "io": [["sequence", "bool"]], "order": 58}, {"langs": {"py": {"body": "$PARENT.union(sequence)", "name": "union", "examples": [{"dataset": null, "code": "r.table('marvel').union(r.table('dc')).run(conn)", "description": "Construct a stream of all heroes.", "can_try": false}]}, "rb": {"body": "$PARENT.union(sequence)", "name": "union", "examples": [{"dataset": null, "code": "r.table('marvel').union(r.table('dc')).run(conn)", "description": "Construct a stream of all heroes.", "can_try": false}]}, "js": {"body": "$PARENT.union(sequence)", "name": "union", "examples": [{"dataset": null, "code": "r.table('marvel').union(r.table('dc')).run(conn, callback)", "description": "Construct a stream of all heroes.", "can_try": false}]}}, "tag": "union", "description": "Concatenate two sequences.", "io": [["sequence", "array"]], "order": 59}, {"langs": {"py": {"body": "$PARENT.sample(number)", "name": "sample", "examples": [{"dataset": null, "code": "r.table('marvel').sample(3).run(conn)", "description": "Select 3 random heroes.", "can_try": false}]}, "rb": {"body": "$PARENT.sample(number)", "name": "sample", "examples": [{"dataset": null, "code": "r.table('marvel').sample(3).run(conn)", "description": "Select 3 random heroes.", "can_try": false}]}, "js": {"body": "$PARENT.sample(number)", "name": "sample", "examples": [{"dataset": null, "code": "r.table('marvel').sample(3).run(conn, callback)", "description": "Select 3 random heroes.", "can_try": false}]}}, "tag": "sample", "description": "Select a given number of elements from a sequence with uniform random\ndistribution. Selection is done without replacement.\n", "io": [["sequence", "selection"], ["stream", "array"], ["array", "array"]], "order": 60}], "tag": "transformations", "name": "Transformations", "description": "These commands are used to transform data in a sequence."}, {"order": 7, "commands": [{"langs": {"py": {"body": "$PARENT.reduce(reduction_function[, base])", "name": "reduce", "examples": [{"dataset": null, "code": "r.table('marvel').map(r.row['monstersKilled']).reduce(\n    lambda acc, val: acc + val, 0).run(conn)", "description": "How many enemies have our heroes defeated?", "can_try": false}]}, "rb": {"body": "$PARENT.reduce [(base)] { reduction_function }", "name": "reduce", "examples": [{"dataset": null, "code": "r.table('marvel').map {|hero| hero['monstersKilled']}.reduce(0) {\n    |acc, val| acc + val }.run(conn)", "description": "How many enemies have our heroes defeated?", "can_try": false}]}, "js": {"body": "$PARENT.reduce(reductionFunction[, base])", "name": "reduce", "examples": [{"dataset": null, "code": "r.table('marvel').map(r.row('monstersKilled')).reduce(function(acc, val) {\n    return acc.add(val)\n}, 0).run(conn, callback)", "description": "How many enemies have our heroes defeated?", "can_try": false}]}}, "tag": "reduce", "description": "Produce a single value from a sequence through repeated application\nof a reduction function.<br /><br />\nThe <code>reduce</code> function gets invoked repeatedly not only\nfor the input values but also for results of previous reduce invocations.\nThe type and format of the object that is passed in to reduce must be\nthe same with the one returned from reduce.\n", "io": [["sequence", "value"]], "order": 96}, {"langs": {"py": {"body": "$PARENT.count([filter])", "name": "count", "examples": [{"dataset": null, "code": "(r.table('marvel').count() + r.table('dc').count()).run(conn)", "description": "Just how many super heroes are there?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').concat_map(r.row['superpowers']).count('invisibility').run(conn)", "description": "Just how many super heroes have invisibility?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').count(r.row['monstersKilled'].contains('Sphinx')).run(conn)", "description": "Just how many super heroes have defeated the Sphinx?", "can_try": false}]}, "rb": {"body": "$PARENT.count {filter}", "name": "count", "examples": [{"dataset": null, "code": "(r.table('marvel').count + r.table('dc').count).run(conn)", "description": "Just how many super heroes are there?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').concat_map{ |row| row[:superpowers] }.count('invisibility').run(conn)", "description": "Just how many super heroes have invisibility?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').count{ |row| row['monstersKilled'].contains('Sphinx') }.run(conn)", "description": "Just how many super heroes have defeated the Sphinx?", "can_try": false}]}, "js": {"body": "$PARENT.count([filter])", "name": "count", "examples": [{"dataset": null, "code": "r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)", "description": "Just how many super heroes are there?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').concatMap(r.row('superpowers')).count('invisibility').run(conn, callback)", "description": "Just how many super heroes have invisibility?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').count(r.row('monstersKilled').contains('Sphinx')).run(conn, callback)", "description": "Just how many super heroes have defeated the Sphinx?", "can_try": false}]}}, "tag": "count", "description": "Count the number of elements in the sequence. With a single argument, count the number of elements equal to it. If the argument is a function, it is equivalent to calling filter before count.", "io": [["sequence", "number"]], "order": 97}, {"langs": {"py": {"body": "$PARENT.distinct()", "name": "distinct", "examples": [{"dataset": null, "code": "r.table('marvel').concat_map(lambda hero: hero['villainList']).distinct().run(conn)", "description": "Which unique villains have been vanquished by marvel heroes?", "can_try": false}]}, "rb": {"body": "$PARENT.distinct", "name": "distinct", "examples": [{"dataset": null, "code": "r.table('marvel').concat_map{|hero| hero[:villain_list]}.distinct.run(conn)", "description": "Which unique villains have been vanquished by marvel heroes?", "can_try": false}]}, "js": {"body": "$PARENT.distinct()", "name": "distinct", "examples": [{"dataset": null, "code": "r.table('marvel').concatMap(function(hero) {return hero('villainList')}).distinct()\n .run(conn, callback)", "description": "Which unique villains have been vanquished by marvel heroes?", "can_try": false}]}}, "tag": "distinct", "description": "Remove duplicate elements from the sequence.", "io": [["sequence", "array"]], "order": 98}, {"langs": {"py": {"body": "$PARENT.grouped_map_reduce(grouping, mapping, reduction, base)", "name": "grouped_map_reduce", "examples": [{"dataset": null, "code": "r.table('marvel').grouped_map_reduce(\n  lambda hero: hero['weightClass'],  # grouping\n  lambda hero: hero.pluck('name', 'strength'),  # mapping\n  lambda acc, hero: r.branch(acc['strength'] < hero['strength'], hero, acc),\n  {'name':'none', 'strength':0}  # base\n).run(conn)", "description": "It's only fair that heroes be compared against their weight class.", "can_try": false}]}, "rb": {"body": "$PARENT.grouped_map_reduce(grouping, mapping, base, reduction)", "name": "grouped_map_reduce", "examples": [{"dataset": null, "code": "r.table('marvel').grouped_map_reduce(\n  lambda {|hero| hero[:weight_class]},  # grouping\n  lambda {|hero| hero.pluck(:name, :strength)},  #  mapping\n  {:name => 'none', :strength => 0},  # reduction base\n  lambda {|acc, hero| r.branch(acc[:strength] < hero[:strength], hero, acc)}\n).run(conn)", "description": "It's only fair that heroes be compared against their weight class.", "can_try": false}]}, "js": {"body": "$PARENT.groupedMapReduce(grouping, mapping, reduction, base)", "name": "groupedMapReduce", "examples": [{"dataset": null, "code": "r.table('marvel').groupedMapReduce(\n  function(hero) { return hero('weightClass')},  // grouping\n  function(hero) { return hero.pluck('name', 'strength')},  // mapping\n  function(acc, hero) {  // reduction\n    return r.branch(acc('strength').lt(hero('strength')), hero, acc)\n  },\n  {name:'none', strength:0} // reduction base\n).run(conn, callback)", "description": "It's only fair that heroes be compared against their weight class.", "can_try": false}]}}, "tag": "groupedmapreduce", "description": "Partition the sequence into groups based on the <code>grouping</code> function. The elements of each group are then mapped using the <code>mapping</code> function and reduced using the <code>reduction</code> function.<br /><br /><code>grouped_map_reduce</code> is a generalized form of <code>group by</code>.", "io": [["sequence", "value"]], "order": 99}, {"langs": {"py": {"body": "$PARENT.group_by(selector1[, selector2...], reduction_object)", "name": "group_by", "examples": [{"dataset": null, "code": "r.table('marvel').group_by('weightClass', r.avg('strength')).run(conn)", "description": "Using a predefined reduction we can easily find the average strength of members of each weight class.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').group_by({'abilities' : {'primary' : True}}, r.avg('strength')).run(conn)", "description": "Groupings can also be specified on nested attributes.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').group_by({'abilities' : 'primary'}, r.avg('strength')).run(conn)", "description": "The nested syntax can quickly become verbose so there's a shortcut.", "can_try": false}]}, "rb": {"body": "$PARENT.group_by(selector1[, selector2...], reduction_object)", "name": "group_by", "examples": [{"dataset": null, "code": "r.table('marvel').group_by(:weight_class, r.avg(:strength)).run(conn)", "description": "Using a predefined reduction we can easily find the average strength of members of each weight class.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').group_by({:abilities => {:primary => true}}, r.avg(:strength)).run(conn)", "description": "Groupings can also be specified on nested attributes.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').group_by({:abilities => :primary}, r.avg(:strength)).run(conn)", "description": "The nested syntax can quickly become verbose so there's a shortcut.", "can_try": false}]}, "js": {"body": "$PARENT.groupBy(selector1[, selector2...], reductionObject)", "name": "groupBy", "examples": [{"dataset": null, "code": "r.table('marvel').groupBy('weightClass', r.avg('strength')).run(conn, callback)", "description": "Using a predefined reduction we can easily find the average strength of members of each weight class.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').groupBy({'abilities' : {'primary' : true}}, r.avg('strength')).run(conn, callback)", "description": "Groupings can also be specified on nested attributes.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').groupBy({'abilities' : 'primary'}, r.avg('strength')).run(conn, callback)", "description": "The nested syntax can quickly become verbose so there's a shortcut.", "can_try": false}]}}, "tag": "group_by", "description": "Groups elements by the values of the given attributes and then applies the given reduction. Though similar to <code>grouped_map_reduce</code>, groupby takes a standardized object for specifying the reduction. Can be used with a number of predefined common reductions.", "io": [["sequence", "array"]], "order": 100}, {"langs": {"py": {"body": "$PARENT.contains(value1[, value2...])", "name": "contains", "examples": [{"dataset": null, "code": "r.table('marvel').get('ironman')['opponents'].contains('superman').run(conn)", "description": "Has Iron Man ever fought Superman?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('ironman')['battles'].contains(lambda battle: (battle['winner'] == 'ironman') & (battle['loser'] == 'superman'))\n", "description": "Has Iron Man ever defeated Superman in battle?", "can_try": false}]}, "rb": {"body": "$PARENT.contains(value1[, value2...])", "name": "contains", "examples": [{"dataset": null, "code": "r.table('marvel').get('ironman')[:opponents].contains('superman').run(conn)", "description": "Has Iron Man ever fought Superman?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('ironman')[:battles].contains{|battle| battle[:winner].eq('ironman') & battle[:loser].eq('superman')}", "description": "Has Iron Man ever defeated Superman in battle?", "can_try": false}]}, "js": {"body": "$PARENT.contains(value1[, value2...])", "name": "contains", "examples": [{"dataset": null, "code": "r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)", "description": "Has Iron Man ever fought Superman?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('ironman')('battles').contains(function (battle) {return battle('winner').eq('ironman').and(battle('loser').eq('superman'));})", "description": "Has Iron Man ever defeated Superman in battle?", "can_try": false}]}}, "tag": "contains", "description": "Returns whether or not a sequence contains all the specified values, or if functions are provided instead, returns whether or not a sequence contains values matching all the specified functions.", "io": [["sequence", "bool"]], "order": 101}], "tag": "aggregation", "name": "Aggregation", "description": "These commands are used to compute smaller values from large sequences."}, {"order": 8, "commands": [{"langs": {"py": {"body": "$PARENT.count", "name": "count", "examples": [{"dataset": null, "code": "r.table('marvel').group_by('strength', r.count).run(conn)", "description": "Just how many heroes do we have at each strength level?", "can_try": false}]}, "rb": {"body": "$PARENT.count", "name": "count", "examples": [{"dataset": null, "code": "r.table('marvel').group_by(:strength, r.count).run(conn)", "description": "Just how many heroes do we have at each strength level?", "can_try": false}]}, "js": {"body": "$PARENT.count", "name": "count", "examples": [{"dataset": null, "code": "r.table('marvel').groupBy('strength', r.count).run(conn, callback)", "description": "Just how many heroes do we have at each strength level?", "can_try": false}]}}, "tag": "count", "description": "Count the total size of the group.", "io": [["r", null]], "order": 102}, {"langs": {"py": {"body": "$PARENT.sum(attr)", "name": "sum", "examples": [{"dataset": null, "code": "r.table('marvel').group_by('strength', r.sum('enemiesVanquished')).run(conn)", "description": "How many enemies have been vanquished by heroes at each strength level?", "can_try": false}]}, "rb": {"body": "$PARENT.sum(attr)", "name": "sum", "examples": [{"dataset": null, "code": "r.table('marvel').group_by(:strength, r.sum(:enemies_vanquished)).run(conn)", "description": "How many enemies have been vanquished by heroes at each strength level?", "can_try": false}]}, "js": {"body": "$PARENT.sum(attr)", "name": "sum", "examples": [{"dataset": null, "code": "r.table('marvel').groupBy('strength', r.sum('enemiesVanquished')).run(conn, callback)", "description": "How many enemies have been vanquished by heroes at each strength level?", "can_try": false}]}}, "tag": "sum", "description": "Compute the sum of the given field in the group.", "io": [["r", null]], "order": 103}, {"langs": {"py": {"body": "$PARENT.avg(attr)", "name": "avg", "examples": [{"dataset": null, "code": "r.table('marvel').group_by('strength', r.avg('agility')).run(conn)", "description": "What's the average agility of heroes at each strength level?", "can_try": false}]}, "rb": {"body": "$PARENT.avg(attr)", "name": "avg", "examples": [{"dataset": null, "code": "r.table('marvel').group_by(:strength, r.avg(:agility)).run(conn)", "description": "What's the average agility of heroes at each strength level?", "can_try": false}]}, "js": {"body": "$PARENT.avg(attr)", "name": "avg", "examples": [{"dataset": null, "code": "r.table('marvel').groupBy('strength', r.avg('agility')).run(conn, callback)", "description": "What's the average agility of heroes at each strength level?", "can_try": false}]}}, "tag": "avg", "description": "Compute the average value of the given attribute for the group.", "io": [["r", null]], "order": 104}], "tag": "aggregators", "name": "Aggregators", "description": "These standard aggregator objects are to be used in conjunction with group_by."}, {"order": 9, "commands": [{"langs": {"py": {"body": "$PARENT.row", "name": "row", "examples": [{"dataset": null, "code": "r.table('users').filter(r.row['age'] > 5).run(conn)", "description": "Get all users whose age is greater than 5.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter(r.row['embedded_doc']['child'] > 5).run(conn)", "description": "Accessing the attribute 'child' of an embedded document.", "can_try": false}, {"dataset": null, "code": "r.expr([1, 2, 3]).map(r.row + 1).run(conn)", "description": "Add 1 to every element of an array.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter(\n    lambda doc: doc['name'] == r.table('prizes').get('winner')).run(conn)", "description": "For nested queries functions should be used instead of r.row.", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "", "description": "Get all users whose age is greater than 5.", "can_try": false}, {"dataset": null, "code": "", "description": "Accessing the attribute 'child' of an embedded document.", "can_try": false}, {"dataset": null, "code": "", "description": "Add 1 to every element of an array.", "can_try": false}, {"dataset": null, "code": "", "description": "For nested queries functions should be used instead of r.row.", "can_try": false}]}, "js": {"body": "$PARENT.row", "name": "row", "examples": [{"dataset": null, "code": "r.table('users').filter(r.row('age').gt(5)).run(conn, callback)", "description": "Get all users whose age is greater than 5.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter(r.row('embedded_doc')('child') > 5).run(conn, callback)", "description": "Accessing the attribute 'child' of an embedded document.", "can_try": false}, {"dataset": null, "code": "r.expr([1, 2, 3]).map(r.row.add(1)).run(conn, callback)", "description": "Add 1 to every element of an array.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter(function(doc) {\n    return doc('name').eq(r.table('prizes').get('winner'))\n}).run(conn, callback)", "description": "For nested queries functions should be used instead of r.row.", "can_try": false}]}}, "tag": "row", "description": "Returns the currently visited document.", "io": [["r", "value"]], "order": 31}, {"langs": {"py": {"body": "$PARENT.pluck([selector1, selector2...])", "name": "pluck", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)", "description": "We just need information about IronMan's reactor and not the rest of the document.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)", "description": "For the hero beauty contest we only care about certain qualities.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck({'abilities' : {'damage' : True, 'mana_cost' : True}, 'weapons' : True}).run(conn)", "description": "Pluck can also be used on nested objects.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck({'abilities' : ['damage', 'mana_cost']}, 'weapons').run(conn)", "description": "The nested syntax can quickly become overly verbose so there's a shorthand for it.", "can_try": false}]}, "rb": {"body": "$PARENT.pluck([selector1, selector2...])", "name": "pluck", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)", "description": "We just need information about IronMan's reactor and not the rest of the document.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)", "description": "For the hero beauty contest we only care about certain qualities.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck({:abilities => {:damage => true, :mana_cost => true}, :weapons => true}).run(conn)", "description": "Pluck can also be used on nested objects.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck({:abilities => [:damage, :mana_cost]}, :weapons).run(conn)", "description": "The nested syntax can quickly become overly verbose so there's a shorthand for it.", "can_try": false}]}, "js": {"body": "$PARENT.pluck([selector1, selector2...])", "name": "pluck", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)", "description": "We just need information about IronMan's reactor and not the rest of the document.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn, callback)", "description": "For the hero beauty contest we only care about certain qualities.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck({'abilities' : {'damage' : true, 'mana_cost' : true}, 'weapons' : true}).run(conn, callback)", "description": "Pluck can also be used on nested objects.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck({'abilities' : ['damage', 'mana_cost']}, 'weapons').run(conn, callback)", "description": "The nested syntax can quickly become overly verbose so there's a shorthand for it.", "can_try": false}]}}, "tag": "pluck", "description": "Plucks out one or more attributes from either an object or a sequence of objects (projection).", "io": [["sequence", "stream"], ["array", "array"], ["object", "object"], ["singleSelection", "object"]], "order": 32}, {"langs": {"py": {"body": "$PARENT.without([selector1, selector2...])", "name": "without", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)", "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests.", "can_try": false}, {"dataset": null, "code": "r.table('enemies').without('weapons').run(conn)", "description": "Without their prized weapons, our enemies will quickly be vanquished.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').without({'weapons' : {'damage' : True}, 'abilities' : {'damage' : True}}).run(conn)", "description": "Nested objects can be used to remove the damage subfield from the weapons and abilities fields.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').without({'weapons' : 'damage', 'abilities' : 'damage'}).run(conn)", "description": "The nested syntax can quickly become overly verbose so there's a shorthand for it.", "can_try": false}]}, "rb": {"body": "$PARENT.without([selector1, selector2...])", "name": "without", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)", "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests.", "can_try": false}, {"dataset": null, "code": "r.table('enemies').without('weapons').run(conn)", "description": "Without their prized weapons, our enemies will quickly be vanquished.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').without({:weapons => {:damage => true}, :abilities => {:damage => true}}).run(conn)", "description": "Nested objects can be used to remove the damage subfield from the weapons and abilities fields.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').without({:weapons => :damage, :abilities => :damage}).run(conn)", "description": "The nested syntax can quickly become overly verbose so there's a shorthand for it.", "can_try": false}]}, "js": {"body": "$PARENT.without([selector1, selector2...])", "name": "without", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)", "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests.", "can_try": false}, {"dataset": null, "code": "r.table('enemies').without('weapons').run(conn, callback)", "description": "Without their prized weapons, our enemies will quickly be vanquished.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').without({'weapons' : {'damage' : true}, 'abilities' : {'damage' : true}}).run(conn, callback)", "description": "Nested objects can be used to remove the damage subfield from the weapons and abilities fields.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').without({'weapons':'damage', 'abilities':'damage'}).run(conn, callback)", "description": "The nested syntax can quickly become overly verbose so there's a shorthand for it.", "can_try": false}]}}, "tag": "without", "description": "The opposite of pluck; takes an object or a sequence of objects, and returns them with the specified paths removed.", "io": [["sequence", "stream"], ["array", "array"], ["singleSelection", "object"], ["object", "object"]], "order": 33}, {"langs": {"py": {"body": "$PARENT.merge(object)", "name": "merge", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').merge(\n  r.table('loadouts').get('alienInvasionKit')).run(conn)", "description": "Equip IronMan for battle.", "can_try": false}, {"dataset": null, "code": "r.expr({'weapons' : {'spectacular graviton beam' : {'dmg' : 10, 'cooldown' : 20}}}).merge(\n  {'weapons' : {'spectacular graviton beam' : {'dmg' : 10}}}).run(conn)", "description": "<code>Merge</code> can be used recursively to modify object within objects.", "can_try": false}, {"dataset": null, "code": "r.expr({'weapons' : {'spectacular graviton beam' : {'dmg' : 10, 'cooldown' : 20}}}).merge(\n  {'weapons' : r.literal({'repulsor rays' : {'dmg' : 3, 'cooldown' : 0}})}).run(conn)", "description": "To replace a nested object with another object you can use the <code>literal</code> keyword.", "can_try": false}, {"dataset": null, "code": "r.expr({'weapons' : {'spectacular graviton beam' : {'dmg' : 10, 'cooldown' : 20}}}).merge(\n  {'weapons' : {'spectacular graviton beam' : r.literal()}}).run(conn)", "description": "<code>Literal</code> can be used to remove keys from an object as well.", "can_try": false}]}, "rb": {"body": "$PARENT.merge(object)", "name": "merge", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').merge(\n  r.table('loadouts').get('alienInvasionKit')).run(conn)", "description": "Equip IronMan for battle.", "can_try": false}, {"dataset": null, "code": "r({:weapons => {:spectacular_graviton_beam => {:dmg => 10, :cooldown => 20}}}).merge(\n  {:weapons => {:spectacular_graviton_beam => {:dmg => 10}}}).run(conn)", "description": "<code>Merge</code> can be used recursively to modify object within objects.", "can_try": false}, {"dataset": null, "code": "r({:weapons => {:spectacular_graviton_beam => {:dmg => 10, :cooldown => 20}}}).merge(\n  {:weapons => r.literal({:repulsor_rays => {:dmg => 3, :cooldown => 0}})}).run(conn)", "description": "To replace a nested object with another object you can use the <code>literal</code> keyword.", "can_try": false}, {"dataset": null, "code": "r({:weapons => {:spectacular_graviton_beam => {:dmg => 10, :cooldown => 20}}}).merge(\n  {:weapons => {:spectacular_graviton_beam => r.literal()}}).run(conn)", "description": "<code>Literal</code> can be used to remove keys from an object as well.", "can_try": false}]}, "js": {"body": "$PARENT.merge(object)", "name": "merge", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').merge(\n  r.table('loadouts').get('alienInvasionKit')).run(conn, callback)", "description": "Equip IronMan for battle.", "can_try": false}, {"dataset": null, "code": "r.expr({weapons : {spectacular_graviton_beam : {dmg : 10, cooldown : 20}}}).merge(\n  {weapons : {spectacular_graviton_beam : {dmg : 10}}}).run(conn, callback)", "description": "<code>Merge</code> can be used recursively to modify object within objects.", "can_try": false}, {"dataset": null, "code": "r.expr({weapons : {spectacular_graviton_beam : {dmg : 10, cooldown : 20}}}).merge(\n  {weapons : r.literal({repulsor_rays : {dmg : 3, cooldown : 0}})}).run(conn, callback)", "description": "To replace a nested object with another object you can use the <code>literal</code> keyword.", "can_try": false}, {"dataset": null, "code": "r.expr({weapons : {spectacular_graviton_beam : {dmg : 10, cooldown : 20}}}).merge(\n  {weapons : {spectacular_graviton_beam : r.literal()}}).run(conn, callback)", "description": "<code>Literal</code> can be used to remove keys from an object as well.", "can_try": false}]}}, "tag": "merge", "description": "Merge two objects together to construct a new object with properties from both. Gives preference to attributes from other when there is a conflict.", "io": [["singleSelection", "object"], ["object", "object"], ["sequence", "stream"], ["array", "array"]], "order": 34}, {"langs": {"py": {"body": "$PARENT.append(value)", "name": "append", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['equipment'].append('newBoots').run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}, "rb": {"body": "$PARENT.append(value)", "name": "append", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:equipment].append('new_boots').run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}, "js": {"body": "$PARENT.append(value)", "name": "append", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}}, "tag": "append", "description": "Append a value to an array.", "io": [["array", "array"]], "order": 35}, {"langs": {"py": {"body": "$PARENT.prepend(value)", "name": "prepend", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['equipment'].prepend('newBoots').run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}, "rb": {"body": "$PARENT.prepend(value)", "name": "prepend", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:equipment].prepend('new_boots').run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}, "js": {"body": "$PARENT.prepend(value)", "name": "prepend", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}}, "tag": "prepend", "description": "Prepend a value to an array.", "io": [["array", "array"]], "order": 36}, {"langs": {"py": {"body": "$PARENT.difference(array)", "name": "difference", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['equipment'].difference(['Boots']).run(conn)", "description": "Retrieve Iron Man's equipment list without boots.", "can_try": false}]}, "rb": {"body": "$PARENT.difference(array)", "name": "difference", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:equipment].difference(['Boots']).run(conn)", "description": "Retrieve Iron Man's equipment list without boots.", "can_try": false}]}, "js": {"body": "$PARENT.difference(array)", "name": "difference", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')('equipment').difference(['Boots']).run(conn, callback)", "description": "Retrieve Iron Man's equipment list without boots.", "can_try": false}]}}, "tag": "difference", "description": "Remove the elements of one array from another array.", "io": [["array", "array"]], "order": 37}, {"langs": {"py": {"body": "$PARENT.set_insert(value)", "name": "set_insert", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['equipment'].set_insert('newBoots').run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}, "rb": {"body": "$PARENT.set_insert(value)", "name": "set_insert", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:equipment].set_insert('new_boots').run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}, "js": {"body": "$PARENT.setInsert(value)", "name": "setInsert", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}}, "tag": "set_insert", "description": "Add a value to an <code>array</code> and return it as a <code>set</code>\n(an <code>array</code> with distinct values).\n", "io": [["array", "array"]], "order": 38}, {"langs": {"py": {"body": "$PARENT.set_union(array)", "name": "set_union", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['equipment'].set_union(['newBoots', 'arc_reactor']).run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new\nboots and an arc reactor.\n", "can_try": false}]}, "rb": {"body": "$PARENT.set_union(array)", "name": "set_union", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:equipment].set_union(['newBoots', 'arc_reactor']).run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new\nboots and an arc reactor.\n", "can_try": false}]}, "js": {"body": "$PARENT.setUnion(array)", "name": "setUnion", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)", "description": "Retrieve Iron Man's equipment list with the addition of some new\nboots and an arc reactor.\n", "can_try": false}]}}, "tag": "set_union", "description": "Add a several values to an <code>array</code> and return it as a\n<code>set</code> (an <code>array</code> with distinct values).\n", "io": [["array", "array"]], "order": 39}, {"langs": {"py": {"body": "$PARENT.set_intersection(array)", "name": "set_intersection", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['equipment'].set_intersection(['newBoots', 'arc_reactor']).run(conn)", "description": "Check which pieces of equipment Iron Man has from a fixed list.", "can_try": false}]}, "rb": {"body": "$PARENT.setIntersection(array)", "name": "set_intersection", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:equipment].set_intersection(['newBoots', 'arc_reactor']).run(conn)", "description": "Check which pieces of equipment Iron Man has from a fixed list.", "can_try": false}]}, "js": {"body": "$PARENT.set_intersection(array)", "name": "setIntersection", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)", "description": "Check which pieces of equipment Iron Man has from a fixed list.", "can_try": false}]}}, "tag": "set_intersection", "description": "Intersect two <code>arrays</code> returning values that occur in both of\nthem as a <code>set</code> (an <code>array</code> with distinct values).\n", "io": [["array", "array"]], "order": 40}, {"langs": {"py": {"body": "$PARENT.set_difference(array)", "name": "set_difference", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['equipment'].set_difference(['newBoots', 'arc_reactor']).run(conn)", "description": "Check which pieces of equipment Iron Man has, excluding a fixed list.", "can_try": false}]}, "rb": {"body": "$PARENT.set_difference(array)", "name": "set_difference", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:equipment].set_difference(['newBoots', 'arc_reactor']).run(conn)", "description": "Check which pieces of equipment Iron Man has, excluding a fixed list.", "can_try": false}]}, "js": {"body": "$PARENT.setDifference(array)", "name": "setDifference", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)", "description": "Check which pieces of equipment Iron Man has, excluding a fixed list.", "can_try": false}]}}, "tag": "set_difference", "description": "Remove the elements of one array from another and return them as a\n<code>set</code> (an <code>array</code> with distinct values).\n", "io": [["array", "array"]], "order": 41}, {"langs": {"py": {"body": "$PARENT[attr]", "name": "[]", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['firstAppearance'].run(conn)", "description": "What was Iron Man's first appearance in a comic?", "can_try": false}]}, "rb": {"body": "$PARENT[attr]", "name": "[]", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:first_appearance].run(conn)", "description": "What was Iron Man's first appearance in a comic?", "can_try": false}]}, "js": {"body": "$PARENT(attr)", "name": "()", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)", "description": "What was Iron Man's first appearance in a comic?", "can_try": false}]}}, "tag": "get_field", "description": "Get a single field from an object.  If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.", "io": [["sequence", "sequence"], ["singleSelection", "value"], ["object", "value"]], "order": 42}, {"langs": {"py": {"body": "$PARENT.has_fields([selector1, selector2...])", "name": "has_fields", "examples": [{"dataset": null, "code": "r.table('marvel').has_fields('spouse').run(conn)", "description": "Which heroes are married?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get(\"IronMan\").has_fields('spouse').run(conn)", "description": "Test if a single object has a field.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').has_fields({'spouse' : {'powers' : True}}).run(conn)", "description": "You can also test if nested fields exist to get only spouses with powers of their own.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').has_fields({'spouse' : 'powers'}).run(conn)", "description": "The nested syntax can quickly get verbose so there's a shorthand.", "can_try": false}]}, "rb": {"body": "$PARENT.has_fields([selector1, selector2...])", "name": "has_fields", "examples": [{"dataset": null, "code": "r.table('marvel').has_fields(:spouse).run(conn)", "description": "Which heroes are married?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get(\"IronMan\").has_fields(:spouse).run(conn)", "description": "Test if a single object has a field.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').has_fields({:spouse => {:powers => true}}).run(conn)", "description": "You can also test if nested fields exist to get only spouses with powers of their own.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').has_fields({:spouse => :powers}).run(conn)", "description": "The nested syntax can quickly get verbose so there's a shorthand.", "can_try": false}]}, "js": {"body": "$PARENT.hasFields([selector1, selector2...])", "name": "hasFields", "examples": [{"dataset": null, "code": "r.table('marvel').hasFields('spouse')", "description": "Which heroes are married?", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get(\"IronMan\").hasFields('spouse')", "description": "Test if a single object has a field.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').hasFields({'spouse' : {'powers' : true}})", "description": "You can also test if nested fields exist to get only spouses with powers of their own.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').hasFields({'spouse' : 'powers'})", "description": "The nested syntax can quickly get verbose so there's a shorthand.", "can_try": false}]}}, "tag": "has_fields", "description": "Test if an object has all of the specified fields.  An object has a field if it has the specified key and that key maps to a non-null value.  For instance, the object `{'a':1,'b':2,'c':null}` has the fields `a` and `b`.", "io": [["sequence", "stream"], ["array", "array"], ["singleSelection", "boolean"], ["object", "boolean"]], "order": 43}, {"langs": {"py": {"body": "$PARENT.insert_at(index, value)", "name": "insert_at", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Spider-Man\"]).insert_at(1, \"Hulk\").run(conn)", "description": "Hulk decides to join the avengers.", "can_try": false}]}, "rb": {"body": "$PARENT.insert_at(index, value)", "name": "insert_at", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Spider-Man\"]).insert_at(1, \"Hulk\").run(conn)", "description": "Hulk decides to join the avengers.", "can_try": false}]}, "js": {"body": "$PARENT.insertAt(index, value)", "name": "insertAt", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Spider-Man\"]).insertAt(1, \"Hulk\").run(conn, callback)", "description": "Hulk decides to join the avengers.", "can_try": false}]}}, "tag": "insert_at", "description": "Insert a value in to an array at a given index. Returns the modified array.", "io": [["array", "array"]], "order": 44}, {"langs": {"py": {"body": "$PARENT.splice_at(index, array)", "name": "splice_at", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Spider-Man\"]).splice_at(1, [\"Hulk\", \"Thor\"]).run(conn)", "description": "Hulk and Thor decide to join the avengers.", "can_try": false}]}, "rb": {"body": "$PARENT.splice_at(index, array)", "name": "splice_at", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Spider-Man\"]).splice_at(1, [\"Hulk\", \"Thor\"]).run(conn)", "description": "Hulk and Thor decide to join the avengers.", "can_try": false}]}, "js": {"body": "$PARENT.spliceAt(index, array)", "name": "spliceAt", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Spider-Man\"]).spliceAt(1, [\"Hulk\", \"Thor\"]).run(conn, callback)", "description": "Hulk and Thor decide to join the avengers.", "can_try": false}]}}, "tag": "splice_at", "description": "Insert several values in to an array at a given index. Returns the modified array.", "io": [["array", "array"]], "order": 45}, {"langs": {"py": {"body": "$PARENT.delete_at(index [,endIndex])", "name": "delete_at", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Hulk\", \"Spider-Man\"]).delete_at(1).run(conn)", "description": "Hulk decides to leave the avengers.", "can_try": false}, {"dataset": null, "code": "r.expr([\"Iron Man\", \"Hulk\", \"Thor\", \"Spider-Man\"]).delete_at(1,3).run(conn)", "description": "Hulk and Thor decide to leave the avengers.", "can_try": false}]}, "rb": {"body": "$PARENT.delete_at(index [,endIndex])", "name": "delete_at", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Hulk\", \"Spider-Man\"]).delete_at(1).run(conn)", "description": "Hulk decides to leave the avengers.", "can_try": false}, {"dataset": null, "code": "r.expr([\"Iron Man\", \"Hulk\", \"Thor\", \"Spider-Man\"]).delete_at(1,3).run(conn)", "description": "Hulk and Thor decide to leave the avengers.", "can_try": false}]}, "js": {"body": "$PARENT.deleteAt(index [,endIndex])", "name": "deleteAt", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Hulk\", \"Spider-Man\"]).deleteAt(1).run(conn, callback)", "description": "Hulk decides to leave the avengers.", "can_try": false}, {"dataset": null, "code": "r.expr([\"Iron Man\", \"Hulk\", \"Thor\", \"Spider-Man\"]).deleteAt(1,3).run(conn, callback)", "description": "Hulk and Thor decide to leave the avengers.", "can_try": false}]}}, "tag": "delete_at", "description": "Remove an element from an array at a given index. Returns the modified array.", "io": [["array", "array"]], "order": 46}, {"langs": {"py": {"body": "$PARENT.change_at(index, value)", "name": "change_at", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Bruce\", \"Spider-Man\"]).change_at(1, \"Hulk\").run(conn)", "description": "Bruce Banner hulks out.", "can_try": false}]}, "rb": {"body": "$PARENT.change_at(index, value)", "name": "change_at", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Bruce\", \"Spider-Man\"]).change_at(1, \"Hulk\").run(conn)", "description": "Bruce Banner hulks out.", "can_try": false}]}, "js": {"body": "$PARENT.changeAt(index, value)", "name": "changeAt", "examples": [{"dataset": null, "code": "r.expr([\"Iron Man\", \"Bruce\", \"Spider-Man\"]).changeAt(1, \"Hulk\").run(conn, callback)", "description": "Bruce Banner hulks out.", "can_try": false}]}}, "tag": "change_at", "description": "Change a value in an array at a given index. Returns the modified array.", "io": [["array", "array"]], "order": 47}, {"langs": {"py": {"body": "$PARENT.keys()", "name": "keys", "examples": [{"dataset": null, "code": "r.table('marvel').get('ironman').keys().run(conn)", "description": "Get all the keys of a row.", "can_try": false}]}, "rb": {"body": "$PARENT.keys", "name": "keys", "examples": [{"dataset": null, "code": "r.table('marvel').get('ironman').keys.run(conn)", "description": "Get all the keys of a row.", "can_try": false}]}, "js": {"body": "$PARENT.keys()", "name": "keys", "examples": [{"dataset": null, "code": "r.table('marvel').get('ironman').keys().run(conn, callback)", "description": "Get all the keys of a row.", "can_try": false}]}}, "tag": "keys", "description": "Return an array containing all of the object's keys.", "io": [["singleSelection", "array"], ["object", "array"]], "order": 48}], "tag": "jsonobject", "name": "Document Manipulation", "description": "These commands manipulate JSON objects and documents"}, {"order": 10, "commands": [{"langs": {"py": {"body": "$PARENT + $ARG", "name": "+", "examples": [{"dataset": null, "code": "(r.expr(2) + 2).run(conn)", "description": "It's as easy as 2 + 2 = 4.", "can_try": false}, {"dataset": null, "code": "(r.expr(\"foo\") + \"bar\").run(conn)", "description": "Strings can be concatenated too.", "can_try": false}, {"dataset": null, "code": "(r.expr([\"foo\", \"bar\"]) + [\"buzz\"]).run(conn)", "description": "Arrays can be concatenated too.", "can_try": false}, {"dataset": null, "code": "r.now() + 365*24*60*60", "description": "Create a date one year from now.", "can_try": false}]}, "rb": {"body": "$PARENT + $ARG", "name": "+", "examples": [{"dataset": null, "code": "(r(2) + 2).run(conn)", "description": "It's as easy as 2 + 2 = 4.", "can_try": false}, {"dataset": null, "code": "(r(\"foo\") + \"bar\").run(conn)", "description": "Strings can be concatenated too.", "can_try": false}, {"dataset": null, "code": "(r([\"foo\", \"bar\"]) + [\"buzz\"]).run(conn)", "description": "Arrays can be concatenated too.", "can_try": false}, {"dataset": null, "code": "r.now() + 365*24*60*60", "description": "Create a date one year from now.", "can_try": false}]}, "js": {"body": "$PARENT.add($ARG)", "name": "add", "examples": [{"dataset": null, "code": "r.expr(2).add(2).run(conn, callback)", "description": "It's as easy as 2 + 2 = 4.", "can_try": false}, {"dataset": null, "code": "r.expr(\"foo\").add(\"bar\").run(conn, callback)", "description": "Strings can be concatenated too.", "can_try": false}, {"dataset": null, "code": "r.expr([\"foo\", \"bar\"]).add([\"buzz\"]).run(conn, callback)", "description": "Arrays can be concatenated too.", "can_try": false}, {"dataset": null, "code": "r.now().add(365*24*60*60)", "description": "Create a date one year from now.", "can_try": false}]}}, "tag": "add", "description": "Sum two numbers, concatenate two strings, or concatenate 2 arrays.", "io": [["number", "number"], ["string", "string"], ["array", "array"], ["time", "time", "number"]], "order": 17}, {"langs": {"py": {"body": "$PARENT - $ARG", "name": "-", "examples": [{"dataset": null, "code": "(r.expr(2) - 2).run(conn)", "description": "It's as easy as 2 - 2 = 0.", "can_try": false}, {"dataset": null, "code": "r.now() - 365*24*60*60", "description": "Create a date one year ago today.", "can_try": false}, {"dataset": null, "code": "r.now() - date", "description": "Retrieve how many seconds elapsed between today and date", "can_try": false}]}, "rb": {"body": "$PARENT - $ARG", "name": "-", "examples": [{"dataset": null, "code": "(r(2) - 2).run(conn)", "description": "It's as easy as 2 - 2 = 0.", "can_try": false}, {"dataset": null, "code": "r.now() - 365*24*60*60", "description": "Create a date one year ago today.", "can_try": false}, {"dataset": null, "code": "r.now() - date", "description": "Retrieve how many seconds elapsed between today and date", "can_try": false}]}, "js": {"body": "$PARENT.sub($ARG)", "name": "sub", "examples": [{"dataset": null, "code": "r.expr(2).sub(2).run(conn, callback)", "description": "It's as easy as 2 - 2 = 0.", "can_try": false}, {"dataset": null, "code": "r.now().sub(365*24*60*60)", "description": "Create a date one year ago today.", "can_try": false}, {"dataset": null, "code": "r.now().sub(date)", "description": "Retrieve how many seconds elapsed between today and date", "can_try": false}]}}, "tag": "sub", "description": "Subtract two numbers.", "io": [["number", "number"], ["time", "number", "time"], ["time", "time", "number"]], "order": 18}, {"langs": {"py": {"body": "$PARENT * number", "name": "*", "examples": [{"dataset": null, "code": "(r.expr(2) * 2).run(conn)", "description": "It's as easy as 2 * 2 = 4.", "can_try": false}, {"dataset": null, "code": "(r.expr([\"This\", \"is\", \"the\", \"song\", \"that\", \"never\", \"ends.\"]) * 100).run(conn)", "description": "Arrays can be multiplied by numbers as well.", "can_try": false}]}, "rb": {"body": "$PARENT * number", "name": "*", "examples": [{"dataset": null, "code": "(r(2) * 2).run(conn)", "description": "It's as easy as 2 * 2 = 4.", "can_try": false}, {"dataset": null, "code": "(r([\"This\", \"is\", \"the\", \"song\", \"that\", \"never\", \"ends.\"]) * 100).run(conn)", "description": "Arrays can be multiplied by numbers as well.", "can_try": false}]}, "js": {"body": "$PARENT.mul(number)", "name": "mul", "examples": [{"dataset": null, "code": "r.expr(2).mul(2).run(conn, callback)", "description": "It's as easy as 2 * 2 = 4.", "can_try": false}, {"dataset": null, "code": "r.expr([\"This\", \"is\", \"the\", \"song\", \"that\", \"never\", \"ends.\"]).mul(100).run(conn, callback)", "description": "Arrays can be multiplied by numbers as well.", "can_try": false}]}}, "tag": "mul", "description": "Multiply two numbers, or make a periodic array.", "io": [["number", "number"], ["array", "array"]], "order": 19}, {"langs": {"py": {"body": "$PARENT / $ARG", "name": "/", "examples": [{"dataset": null, "code": "(r.expr(2) / 2).run(conn)", "description": "It's as easy as 2 / 2 = 1.", "can_try": false}]}, "rb": {"body": "$PARENT / $ARG", "name": "/", "examples": [{"dataset": null, "code": "(r(2) / 2).run(conn)", "description": "It's as easy as 2 / 2 = 1.", "can_try": false}]}, "js": {"body": "$PARENT.div($ARG)", "name": "div", "examples": [{"dataset": null, "code": "r.expr(2).div(2).run(conn, callback)", "description": "It's as easy as 2 / 2 = 1.", "can_try": false}]}}, "tag": "div", "description": "Divide two numbers.", "io": [["number", "number"]], "order": 20}, {"langs": {"py": {"body": "$PARENT % $ARG", "name": "%", "examples": [{"dataset": null, "code": "(r.expr(2) % 2).run(conn)", "description": "It's as easy as 2 % 2 = 0.", "can_try": false}]}, "rb": {"body": "$PARENT % $ARG", "name": "%", "examples": [{"dataset": null, "code": "(r(2) % 2).run(conn)", "description": "It's as easy as 2 % 2 = 0.", "can_try": false}]}, "js": {"body": "$PARENT.mod($ARG)", "name": "mod", "examples": [{"dataset": null, "code": "r.expr(2).mod(2).run(conn, callback)", "description": "It's as easy as 2 % 2 = 0.", "can_try": false}]}}, "tag": "mod", "description": "Find the remainder when dividing two numbers.", "io": [["number", "number"]], "order": 21}, {"langs": {"py": {"body": "$PARENT & $ARG", "name": "&", "examples": [{"dataset": null, "code": "(r.expr(True) & False).run(conn)", "description": "True and false anded is false?", "can_try": false}]}, "rb": {"body": "$PARENT & $ARG", "name": "&", "examples": [{"dataset": null, "code": "(r(true) & false).run(conn)", "description": "True and false anded is false?", "can_try": false}]}, "js": {"body": "$PARENT.and($ARG)", "name": "and", "examples": [{"dataset": null, "code": "r.expr(true).and(false).run(conn, callback)", "description": "True and false anded is false?", "can_try": false}]}}, "tag": "and", "description": "Compute the logical and of two values.", "io": [["bool", "bool"]], "order": 22}, {"langs": {"py": {"body": "$PARENT | $ARG", "name": "|", "examples": [{"dataset": null, "code": "(r.expr(True) | False).run(conn)", "description": "True or false ored is true?", "can_try": false}]}, "rb": {"body": "$PARENT | $ARG", "name": "|", "examples": [{"dataset": null, "code": "(r.expr(true) | false).run(conn)", "description": "True or false ored is true?", "can_try": false}]}, "js": {"body": "$PARENT.or($ARG)", "name": "or", "examples": [{"dataset": null, "code": "r.expr(true).or(false).run(conn, callback)", "description": "True or false ored is true?", "can_try": false}]}}, "tag": "or", "description": "Compute the logical or of two values.", "io": [["bool", "bool"]], "order": 23}, {"langs": {"py": {"body": "$PARENT == $ARG", "name": "==", "examples": [{"dataset": null, "code": "(r.expr(2) == 2).run(conn)", "description": "Does 2 equal 2?", "can_try": false}]}, "rb": {"body": "$PARENT.eq($ARG)", "name": "eq", "examples": [{"dataset": null, "code": "(r.expr(2).eq 2).run(conn)", "description": "Does 2 equal 2?", "can_try": false}]}, "js": {"body": "$PARENT.eq($ARG)", "name": "eq", "examples": [{"dataset": null, "code": "r.expr(2).eq(2).run(conn, callback)", "description": "Does 2 equal 2?", "can_try": false}]}}, "tag": "eq", "description": "Test if two values are equal.", "io": [["value", "bool"]], "order": 24}, {"langs": {"py": {"body": "$PARENT != $ARG", "name": "!=", "examples": [{"dataset": null, "code": "(r.expr(2) != 2).run(conn)", "description": "Does 2 not equal 2?", "can_try": false}]}, "rb": {"body": "$PARENT.ne($ARG)", "name": "ne", "examples": [{"dataset": null, "code": "(r.expr(2).ne 2).run(conn)", "description": "Does 2 not equal 2?", "can_try": false}]}, "js": {"body": "$PARENT.ne($ARG)", "name": "ne", "examples": [{"dataset": null, "code": "r.expr(2).ne(2).run(conn, callback)", "description": "Does 2 not equal 2?", "can_try": false}]}}, "tag": "ne", "description": "Test if two values are not equal.", "io": [["value", "bool"]], "order": 25}, {"langs": {"py": {"body": "$PARENT > $ARG", "name": ">", "examples": [{"dataset": null, "code": "(r.expr(2) > 2).run(conn)", "description": "Is 2 greater than 2?", "can_try": false}]}, "rb": {"body": "$PARENT > $ARG", "name": ">", "examples": [{"dataset": null, "code": "(r.expr(2) > 2).run(conn)", "description": "Is 2 greater than 2?", "can_try": false}]}, "js": {"body": "$PARENT.gt($ARG)", "name": "gt", "examples": [{"dataset": null, "code": "r.expr(2).gt(2).run(conn, callback)", "description": "Is 2 greater than 2?", "can_try": false}]}}, "tag": "gt", "description": "Test if the first value is greater than other.", "io": [["value", "bool"]], "order": 26}, {"langs": {"py": {"body": "$PARENT >= $ARG", "name": ">=", "examples": [{"dataset": null, "code": "(r.expr(2) >= 2).run(conn)", "description": "Is 2 greater than or equal to 2?", "can_try": false}]}, "rb": {"body": "$PARENT >= $ARG", "name": ">=", "examples": [{"dataset": null, "code": "(r(2) >= 2).run(conn)", "description": "Is 2 greater than or equal to 2?", "can_try": false}]}, "js": {"body": "$PARENT.ge($ARG)", "name": "ge", "examples": [{"dataset": null, "code": "r.expr(2).ge(2).run(conn, callback)", "description": "Is 2 greater than or equal to 2?", "can_try": false}]}}, "tag": "ge", "description": "Test if the first value is greater than or equal to other.", "io": [["value", "bool"]], "order": 27}, {"langs": {"py": {"body": "$PARENT < $ARG", "name": "<", "examples": [{"dataset": null, "code": "(r.expr(2) < 2).run(conn)", "description": "Is 2 less than 2?", "can_try": false}]}, "rb": {"body": "$PARENT < $ARG", "name": "<", "examples": [{"dataset": null, "code": "(r.expr(2) < 2).run(conn)", "description": "Is 2 less than 2?", "can_try": false}]}, "js": {"body": "$PARENT.lt($ARG)", "name": "lt", "examples": [{"dataset": null, "code": "r.expr(2).lt(2).run(conn, callback)", "description": "Is 2 less than 2?", "can_try": false}]}}, "tag": "lt", "description": "Test if the first value is less than other.", "io": [["value", "bool"]], "order": 28}, {"langs": {"py": {"body": "$PARENT <= $ARG", "name": "<=", "examples": [{"dataset": null, "code": "(r.expr(2) <= 2).run(conn)", "description": "Is 2 less than or equal to 2?", "can_try": false}]}, "rb": {"body": "$PARENT <= $ARG", "name": "<=", "examples": [{"dataset": null, "code": "(r.expr(2) <= 2).run(conn)", "description": "Is 2 less than or equal to 2?", "can_try": false}]}, "js": {"body": "$PARENT.le($ARG)", "name": "le", "examples": [{"dataset": null, "code": "r.expr(2).le(2).run(conn, callback)", "description": "Is 2 less than or equal to 2?", "can_try": false}]}}, "tag": "le", "description": "Test if the first value is less than or equal to other.", "io": [["value", "bool"]], "order": 29}, {"langs": {"py": {"body": "~$PARENT", "name": "~", "examples": [{"dataset": null, "code": "(~r.expr(True)).run(conn)", "description": "Not true is false.", "can_try": false}]}, "rb": {"body": "$PARENT.not()", "name": "not", "examples": [{"dataset": null, "code": "r(true).not.run(conn)", "description": "Not true is false.", "can_try": false}]}, "js": {"body": "$PARENT.not()", "name": "not", "examples": [{"dataset": null, "code": "r.expr(true).not().run(conn, callback)", "description": "Not true is false.", "can_try": false}]}}, "tag": "not", "description": "Compute the logical inverse (not).", "io": [["bool", "bool"]], "order": 30}], "tag": "operators", "name": "Math and logic", "description": "These commands provide basic math and logic."}, {"order": 10, "commands": [{"langs": {"py": {"body": "$PARENT.match(regexp)", "name": "match", "examples": [{"dataset": null, "code": "r.table('users').filter(lambda row:row['name'].match(\"^A\")).run(conn)", "description": "Get all users whose name starts with A.", "can_try": false}, {"dataset": null, "code": "r.expr('id:0,name:mlucy,foo:bar').match('name:(\\w+)')['groups'][0]['str'].run(conn)", "description": "Parse out a name (returns \"mlucy\").", "can_try": false}, {"dataset": null, "code": "r.expr('id:0,foo:bar').match('name:(\\w+)')['groups'][0]['str'].run(conn)", "description": "Fail to parse out a name (returns null).", "can_try": false}]}, "rb": {"body": "$PARENT.match(regexp)", "name": "match", "examples": [{"dataset": null, "code": "r.table('users').filter{|row| row[:name].match(\"^A\")}.run(conn)", "description": "Get all users whose name starts with A.", "can_try": false}, {"dataset": null, "code": "r('id:0,name:mlucy,foo:bar').match('name:(\\w+)')[:groups][0][:str].run(conn)", "description": "Parse out a name (returns \"mlucy\").", "can_try": false}, {"dataset": null, "code": "r('id:0,foo:bar').match('name:(\\w+)')[:groups][0][:str].run(conn)", "description": "Fail to parse out a name (returns null).", "can_try": false}]}, "js": {"body": "$PARENT.match(regexp)", "name": "match", "examples": [{"dataset": null, "code": "r.table('users').filter(function(row){return row('name').match(\"^A\")}).run(conn, callback)", "description": "Get all users whose name starts with A.", "can_try": false}, {"dataset": null, "code": "r.expr('id:0,name:mlucy,foo:bar').match('name:(\\w+)')('groups').nth(0)('str').run(conn, callback)", "description": "Parse out a name (returns \"mlucy\").", "can_try": false}, {"dataset": null, "code": "r.expr('id:0,foo:bar').match('name:(\\w+)')('groups').nth(0)('str').run(conn, callback)", "description": "Fail to parse out a name (returns null).", "can_try": false}]}}, "tag": "match", "description": "Match against a regular expression.  Returns a match object containing the matched string, that string's start/end position, and the capture groups.  Accepts RE2 syntax (https://code.google.com/p/re2/wiki/Syntax).  You can enable case-insensitive matching by prefixing the regular expression with `(?i)`.  (See linked RE2 documentation for more flags.)", "io": [["string", "array"]], "order": 95}], "tag": "string", "name": "String manipulation", "description": "These commands provide string operators."}, {"order": 11, "commands": [{"langs": {"py": {"body": "$PARENT.now()", "name": "now", "examples": [{"dataset": null, "code": "r.table(\"users\").insert({\n  \"name\": \"John\",\n  \"subscription_date\": r.now()\n}).run(conn)\n", "description": "Add a new user with the time at which he subscribed.", "can_try": false}]}, "rb": {"body": "$PARENT.now()", "name": "now", "examples": [{"dataset": null, "code": "r.table(\"users\").insert({\n  :name => \"John\",\n  :subscription_date => r.now()\n}).run(conn)\n", "description": "Add a new user with the time at which he subscribed.", "can_try": false}]}, "js": {"body": "$PARENT.now()", "name": "now", "examples": [{"dataset": null, "code": "r.table(\"users\").insert({\n  name: \"John\",\n  subscription_date: r.now()\n}).run(conn, callback)\n", "description": "Add a new user with the time at which he subscribed.", "can_try": false}]}}, "tag": "now", "description": "\nReturn a time object representing the current time in UTC. The\ncommand <code>now()</code> is computed once when the server\nreceives the query, so multiple instances of\n<code>r.now()</code> will always return the same time inside a\nquery.\n", "io": [["r", "time"]], "order": 76}, {"langs": {"py": {"body": "$PARENT.time(year, month, day[, hour, minute, second], timezone)", "name": "time", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update({\"birthdate\": r.time(1986, 11, 3, 'Z')}).run(conn)\n", "description": "Update the birthdate of the user \"John\" to November 3rd, 1986 UTC.", "can_try": false}]}, "rb": {"body": "$PARENT.time(year, month, day[, hour, minute, second], timezone)", "name": "time", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update(:birthdate => r.time(1986, 11, 3, 'Z')).run(conn)\n", "description": "Update the birthdate of the user \"John\" to November 3rd, 1986 UTC.", "can_try": false}]}, "js": {"body": "$PARENT.time(year, month, day[, hour, minute, second], timezone)", "name": "time", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update({birthdate: r.time(1986, 11, 3, 'Z')}).run(conn, callback)\n", "description": "Update the birthdate of the user \"John\" to November 3rd, 1986 UTC.", "can_try": false}]}}, "tag": "time", "description": "Create a time object for a specific time.\n", "io": [["r", "time"]], "order": 77}, {"langs": {"py": {"body": "$PARENT.epoch_time(epoch_time)", "name": "epoch_time", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update({\"birthdate\": r.epoch_time(531360000)}).run(conn)\n", "description": "Update the birthdate of the user \"John\" to November 3rd, 1986.", "can_try": false}]}, "rb": {"body": "$PARENT.epoch_time(epoch_time)", "name": "epoch_time", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update(:birthdate => r.epoch_time(531360000)).run(conn)\n", "description": "Update the birthdate of the user \"John\" to November 3rd, 1986.", "can_try": false}]}, "js": {"body": "$PARENT.epochTime(epochTime)", "name": "epochTime", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update({birthdate: r.epochTime(531360000)}).run(conn, callback)\n", "description": "Update the birthdate of the user \"John\" to November 3rd, 1986.", "can_try": false}]}}, "tag": "epoch_time", "description": "Create a time object based on seconds since epoch.\n", "io": [["r", "time"]], "order": 78}, {"langs": {"py": {"body": "$PARENT.iso8601(iso8601Date[, default_timezone=''])", "name": "iso8601", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update({\"birth\": r.iso8601('1986-11-03T08:30:00-07:00')}).run(conn)\n", "description": "Update the time of John's birth.", "can_try": false}]}, "rb": {"body": "$PARENT.iso8601(iso8601Date[, :default_timezone => ''])", "name": "iso8601", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update(:birth => r.iso8601('1986-11-03T08:30:00-07:00')).run(conn)\n", "description": "Update the time of John's birth.", "can_try": false}]}, "js": {"body": "$PARENT.ISO8601(iso8601Date[, {default_timezone:''}])", "name": "iso8601", "examples": [{"dataset": null, "code": "r.table(\"user\").get(\"John\").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)\n", "description": "Update the time of John's birth.", "can_try": false}]}}, "tag": "iso8601", "description": "\nCreate a time object based on an iso8601 date-time string\n(e.g. '2013-01-01T01:01:01+00:00'). We support all valid ISO\n8601 formats except for week dates.  If you pass an ISO 8601\ndate-time without a time zone, you must specify the time zone\nwith the optarg `default_timezone`.  Read\nmore about the ISO 8601 format on the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">Wikipedia page</a>.\n", "io": [["r", "time"]], "order": 79}, {"langs": {"py": {"body": "$PARENT.in_timezone(timezone)", "name": "in_timezone", "examples": [{"dataset": null, "code": "r.now().in_timezone('-08:00').hours().run(conn)\n", "description": "Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).", "can_try": false}]}, "rb": {"body": "$PARENT.in_timezone(timezone)", "name": "in_timezone", "examples": [{"dataset": null, "code": "r.now().in_timezone('-08:00').hours().run(conn)\n", "description": "Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).", "can_try": false}]}, "js": {"body": "$PARENT.inTimezone(timezone)", "name": "inTimezone", "examples": [{"dataset": null, "code": "r.now().inTimezone('-08:00').hours().run(conn, callback)\n", "description": "Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).", "can_try": false}]}}, "tag": "in_timezone", "description": "Return a new time object with a different timezone. While the time stays the same,\nthe results returned by methods such as <code>hours()</code> will change since they take the\ntimezone into account.\nThe timezone argument has to be of the ISO 8601 format.\n", "io": [["time", "time"]], "order": 80}, {"langs": {"py": {"body": "$PARENT.timezone()", "name": "timezone", "examples": [{"dataset": null, "code": "r.table(\"users\").filter( lambda user:\n  user[\"subscriptionDate\"].timezone() == \"-07:00\"\n)\n", "description": "Return all the users in the \"-07:00\" timezone.", "can_try": false}]}, "rb": {"body": "$PARENT.timezone()", "name": "timezone", "examples": [{"dataset": null, "code": "r.table(\"users\").filter{ |user|\n  user[\"subscriptionDate\"].timezone().eq(\"07:00\")\n}\n", "description": "Return all the users in the \"-07:00\" timezone.", "can_try": false}]}, "js": {"body": "$PARENT.timezone()", "name": "timezone", "examples": [{"dataset": null, "code": "r.table(\"users\").filter( function(user) {\n  return user(\"subscriptionDate\").timezone().eq(\"-07:00\")\n})\n", "description": "Return all the users in the \"-07:00\" timezone.", "can_try": false}]}}, "tag": "timezone", "description": "Return the timezone of the time object.\n", "io": [["time", "string"]], "order": 81}, {"langs": {"py": {"body": "$PARENT.during(start_time, end_time[, left_bound=\"open/closed\", right_bound=\"open/closed\"])", "name": "during", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(\n    r.row['date'].during(r.time(2013, 12, 1), r.time(2013, 12, 10))\n).run(conn)\n", "description": "Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).", "can_try": false}, {"dataset": null, "code": "r.table(\"posts\").filter(\n  r.row['date'].during(r.time(2013, 12, 1), r.time(2013, 12, 10), left_bound=\"open\", right_bound=\"closed\")\n).run(conn)\n", "description": "Retrieve all the posts that were posted between December 1st, 2013 (exclusive) and December 10th, 2013 (inclusive).", "can_try": false}]}, "rb": {"body": "$PARENT.during(start_time, end_time[, options])", "name": "during", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter{ |post|\n  post['date'].during(r.time(2013, 12, 1), r.time(2013, 12, 10))\n}.run(conn)\n", "description": "Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).", "can_try": false}, {"dataset": null, "code": "r.table(\"posts\").filter{ |post|\n  post['date'].during(r.time(2013, 12, 1), r.time(2013, 12, 10), :left_bound => \"open\", :right_bound => \"closed\")\n}.run(conn)\n", "description": "Retrieve all the posts that were posted between December 1st, 2013 (exclusive) and December 10th, 2013 (inclusive).", "can_try": false}]}, "js": {"body": "$PARENT.during(startTime, endTime[, options])", "name": "during", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(\n    r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10))\n).run(conn, callback)\n", "description": "Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).", "can_try": false}, {"dataset": null, "code": "r.table(\"posts\").filter(\n  r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10), {leftBound: \"open\", rightBound: \"closed\"})\n).run(conn, callback)\n", "description": "Retrieve all the posts that were posted between December 1st, 2013 (exclusive) and December 10th, 2013 (inclusive).", "can_try": false}]}}, "tag": "during", "description": "Return if a time is between two other times (by default, inclusive for the start, exclusive for the end).\n", "io": [["time", "bool"]], "order": 82}, {"langs": {"py": {"body": "$PARENT.date()", "name": "date", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(lambda user:\n  user[\"birthdate\"].date() == r.now().date()\n).run(conn)\n", "description": "Retrieve all the users whose birthday is today", "can_try": false}]}, "rb": {"body": "$PARENT.date()", "name": "date", "examples": [{"dataset": null, "code": "r.table(\"users\").filter{ |user|\n  user[\"birthdate\"].date().eq(r.now().date())\n}.run(conn)\n", "description": "Retrieve all the users whose birthday is today", "can_try": false}]}, "js": {"body": "$PARENT.date()", "name": "date", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(function(user) {\n  return user(\"birthdate\").date().eq(r.now().date())\n}).run(conn, callback)\n", "description": "Retrieve all the users whose birthday is today", "can_try": false}]}}, "tag": "date", "description": "Return a new time object only based on the day, month and year (ie. the same day at 00:00).\n", "io": [["time", "time"]], "order": 83}, {"langs": {"py": {"body": "$PARENT.time_of_day()", "name": "time_of_day", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(\n    r.row[\"date\"].time_of_day() <= 12*60*60\n).run(conn)\n", "description": "Retrieve posts that were submitted before noon.", "can_try": false}]}, "rb": {"body": "$PARENT.time_of_day()", "name": "time_of_day", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter{ |post|\n    post[\"date\"].time_of_day() <= 12*60*60\n}.run(conn)\n", "description": "Retrieve posts that were submitted before noon.", "can_try": false}]}, "js": {"body": "$PARENT.timeOfDay()", "name": "timeOfDay", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(\n    r.row(\"date\").timeOfDay().le(12*60*60)\n).run(conn, callback)\n", "description": "Retrieve posts that were submitted before noon.", "can_try": false}]}}, "tag": "time_of_day", "description": "Return the number of seconds elapsed since the beginning of the day stored in the time object.\n", "io": [["time", "number"]], "order": 84}, {"langs": {"py": {"body": "$PARENT.year()", "name": "year", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(lambda user:\n  user[\"birthdate\"].year() == 1986\n).run(conn)\n", "description": "Retrieve all the users born in 1986.", "can_try": false}]}, "rb": {"body": "$PARENT.year()", "name": "year", "examples": [{"dataset": null, "code": "r.table(\"users\").filter{ |user|\n  user[\"birthdate\"].year().eq(1986)\n}.run(conn)\n", "description": "Retrieve all the users born in 1986.", "can_try": false}]}, "js": {"body": "$PARENT.year()", "name": "year", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(function(user) {\n  return user(\"birthdate\").year().eq(1986)\n}).run(conn, callback)\n", "description": "Retrieve all the users born in 1986.", "can_try": false}]}}, "tag": "year", "description": "Return the year of a time object.\n", "io": [["time", "number"]], "order": 85}, {"langs": {"py": {"body": "$PARENT.month()", "name": "month", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(\n  r.row[\"birthdate\"].month() == 11\n)\n", "description": "Retrieve all the users who were born in November.", "can_try": false}, {"dataset": null, "code": "r.table(\"users\").filter(\n  r.row[\"birthdate\"].month() == r.november\n)\n", "description": "Retrieve all the users who were born in November.", "can_try": false}]}, "rb": {"body": "$PARENT.month()", "name": "month", "examples": [{"dataset": null, "code": "r.table(\"users\").filter{ |user|\n  user[\"birthdate\"].month().eq(11)\n}\n", "description": "Retrieve all the users who were born in November.", "can_try": false}, {"dataset": null, "code": "r.table(\"users\").filter{ |user|\n  user[\"birthdate\"].month().eq(r.november)\n}\n", "description": "Retrieve all the users who were born in November.", "can_try": false}]}, "js": {"body": "$PARENT.month()", "name": "month", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(\n  r.row(\"birthdate\").month().eq(11)\n)\n", "description": "Retrieve all the users who were born in November.", "can_try": false}, {"dataset": null, "code": "r.table(\"users\").filter(\n  r.row(\"birthdate\").month().eq(r.november)\n)\n", "description": "Retrieve all the users who were born in November.", "can_try": false}]}}, "tag": "month", "description": "Return the month of a time object as a number between 1 and 12.\nFor your convenience, the terms <code>r.january</code>, <code>r.february</code> etc. are defined and map\nto the appropriate integer.\n", "io": [["time", "number"]], "order": 86}, {"langs": {"py": {"body": "$PARENT.day()", "name": "day", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(\n  r.row[\"birthdate\"].day() == 24\n)\n", "description": "Return the users born on the 24th of any month.", "can_try": false}]}, "rb": {"body": "$PARENT.day()", "name": "day", "examples": [{"dataset": null, "code": "r.table(\"users\").filter{ |user|\n  user[\"birthdate\"].day().eq(24)\n}\n", "description": "Return the users born on the 24th of any month.", "can_try": false}]}, "js": {"body": "$PARENT.day()", "name": "day", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(\n  r.row(\"birthdate\").day().eq(24)\n)\n", "description": "Return the users born on the 24th of any month.", "can_try": false}]}}, "tag": "day", "description": "Return the day of a time object as a number between 1 and 31.\n", "io": [["time", "number"]], "order": 87}, {"langs": {"py": {"body": "$PARENT.day_of_week()", "name": "day_of_week", "examples": [{"dataset": null, "code": "r.now().day_of_week().run(conn)\n", "description": "Return today's day of week.", "can_try": false}, {"dataset": null, "code": "r.table(\"users\").filter(\n  r.row[\"birthdate\"].day_of_week() == r.tuesday\n)\n", "description": "Retrieve all the users who were born on a Tuesday.", "can_try": false}]}, "rb": {"body": "$PARENT.day_of_week()", "name": "day_of_week", "examples": [{"dataset": null, "code": "r.now().day_of_week().run(conn)\n", "description": "Return today's day of week.", "can_try": false}, {"dataset": null, "code": "r.table(\"users\").filter{ |user|\n  user[\"birthdate\"].day_of_week().eq(r.tuesday)\n}\n", "description": "Retrieve all the users who were born on a Tuesday.", "can_try": false}]}, "js": {"body": "$PARENT.dayOfWeek()", "name": "dayOfWeek", "examples": [{"dataset": null, "code": "r.now().dayOfWeek().run(conn, callback)\n", "description": "Return today's day of week.", "can_try": false}, {"dataset": null, "code": "r.table(\"users\").filter(\n  r.row(\"birthdate\").dayOfWeek().eq(r.tuesday)\n)\n", "description": "Retrieve all the users who were born on a Tuesday.", "can_try": false}]}}, "tag": "day_of_week", "description": "Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard).\nFor your convenience, the terms <code>r.monday</code>, <code>r.tuesday</code> etc. are defined and map\nto the appropriate integer.\n", "io": [["time", "number"]], "order": 88}, {"langs": {"py": {"body": "$PARENT.day_of_year()", "name": "day_of_year", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(\n  r.row[\"birthdate\"].day_of_year() == 1\n)\n", "description": "Retrieve all the users who were born the first day of a year.", "can_try": false}]}, "rb": {"body": "$PARENT.day_of_year()", "name": "day_of_year", "examples": [{"dataset": null, "code": "r.table(\"users\").filter{ |user|\n  user[\"birthdate\"].day_of_year().eq(1)\n}\n", "description": "Retrieve all the users who were born the first day of a year.", "can_try": false}]}, "js": {"body": "$PARENT.dayOfYear()", "name": "dayOfYear", "examples": [{"dataset": null, "code": "r.table(\"users\").filter(\n  r.row(\"birthdate\").dayOfYear().eq(1)\n)\n", "description": "Retrieve all the users who were born the first day of a year.", "can_try": false}]}}, "tag": "day_of_year", "description": "Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).\n", "io": [["time", "number"]], "order": 89}, {"langs": {"py": {"body": "$PARENT.hours()", "name": "hours", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(lambda post:\n    post[\"date\"].hours() < 4\n)\n", "description": "Return all the posts submitted after midnight and before 4am.", "can_try": false}]}, "rb": {"body": "$PARENT.hours()", "name": "hours", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter{ |post|\n    post[\"date\"].hours() < 4\n}\n", "description": "Return all the posts submitted after midnight and before 4am.", "can_try": false}]}, "js": {"body": "$PARENT.hours()", "name": "hours", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(function(post) {\n    return post(\"date\").hours().lt(4)\n})\n", "description": "Return all the posts submitted after midnight and before 4am.", "can_try": false}]}}, "tag": "hours", "description": "Return the hour in a time object as a number between 0 and 23.\n", "io": [["time", "number"]], "order": 90}, {"langs": {"py": {"body": "$PARENT.minutes()", "name": "minutes", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(lambda post:\n    post[\"date\"].minutes() < 10\n)\n", "description": "Return all the posts submitted during the first 10 minutes of every hour.", "can_try": false}]}, "rb": {"body": "$PARENT.minutes()", "name": "minutes", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter{ |post|\n    post[\"date\"].minutes() < 10\n}\n", "description": "Return all the posts submitted during the first 10 minutes of every hour.", "can_try": false}]}, "js": {"body": "$PARENT.minutes()", "name": "minutes", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(function(post) {\n    return post(\"date\").minutes().lt(10)\n})\n", "description": "Return all the posts submitted during the first 10 minutes of every hour.", "can_try": false}]}}, "tag": "minutes", "description": "Return the minute in a time object as a number between 0 and 59.\n", "io": [["time", "number"]], "order": 91}, {"langs": {"py": {"body": "$PARENT.seconds()", "name": "seconds", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(lambda post:\n    post[\"date\"].seconds() < 30\n)\n", "description": "Return the post submitted during the first 30 seconds of every minute.", "can_try": false}]}, "rb": {"body": "$PARENT.seconds()", "name": "seconds", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter{ |post|\n    post[\"date\"].seconds() < 30\n}\n", "description": "Return the post submitted during the first 30 seconds of every minute.", "can_try": false}]}, "js": {"body": "$PARENT.seconds()", "name": "seconds", "examples": [{"dataset": null, "code": "r.table(\"posts\").filter(function(post) {\n    return post(\"date\").seconds().lt(30)\n})\n", "description": "Return the post submitted during the first 30 seconds of every minute.", "can_try": false}]}}, "tag": "seconds", "description": "Return the seconds in a time object as a number between 0 and 59.999 (double precision).\n", "io": [["time", "number"]], "order": 92}, {"langs": {"py": {"body": "$PARENT.seconds()", "name": "to_iso8601", "examples": [{"dataset": null, "code": "r.now().to_iso8601()\n", "description": "Return the current time in an ISO8601 format.", "can_try": false}]}, "rb": {"body": "$PARENT.seconds()", "name": "to_iso8601", "examples": [{"dataset": null, "code": "r.now().to_iso8601()\n", "description": "Return the current time in an ISO8601 format.", "can_try": false}]}, "js": {"body": "$PARENT.seconds()", "name": "toISO8601", "examples": [{"dataset": null, "code": "r.now().toISO8601()\n", "description": "Return the current time in an ISO8601 format.", "can_try": false}]}}, "tag": "to_iso8601", "description": "Convert a time object to its iso 8601 format.\n", "io": [["time", "number"]], "order": 93}, {"langs": {"py": {"body": "$PARENT.to_epoch_time()", "name": "to_epoch_time", "examples": [{"dataset": null, "code": "r.now().to_epoch_time()\n", "description": "Return the current time in an ISO8601 format.", "can_try": false}]}, "rb": {"body": "$PARENT.to_epoch_time()", "name": "to_epoch_time", "examples": [{"dataset": null, "code": "r.now().to_epoch_time()\n", "description": "Return the current time in an ISO8601 format.", "can_try": false}]}, "js": {"body": "$PARENT.toEpochTime()", "name": "toEpochTime", "examples": [{"dataset": null, "code": "r.now().toEpochTime()\n", "description": "Return the current time in an ISO8601 format.", "can_try": false}]}}, "tag": "to_epoch_time", "description": "Convert a time object to its epoch time.\n", "io": [["time", "number"]], "order": 94}], "tag": "date", "name": "Dates and times", "description": "Date and time operations."}, {"order": 11, "commands": [{"langs": {"py": {"body": "$PARENT.do(arg [, args]*, expr)", "name": "do", "examples": [{"dataset": null, "code": "r.do(r.table('marvel').get('IronMan'),\n     lambda ironman: ironman['name']).run(conn)", "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings.", "can_try": false}]}, "rb": {"body": "$PARENT.do(arg [, args]*) {expr}", "name": "do", "examples": [{"dataset": null, "code": "r.do(r.table('marvel').get('IronMan')) { |ironman| ironman[:name] }.run(conn)", "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings.", "can_try": false}]}, "js": {"body": "$PARENT.do(arg [, args]*, expr)", "name": "do", "examples": [{"dataset": null, "code": "r.do(r.table('marvel').get('IronMan'),\n     function (ironman) { return ironman('name'); }\n).run(conn, callback)", "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings.", "can_try": false}]}}, "tag": "do", "description": "Evaluate the <code>expr</code> in the context of one or more value\nbindings.<br /><br />\nThe type of the result is the type of the value returned from <code>expr</code>.\n", "io": [["any", "any"]], "order": 0}, {"langs": {"py": {"body": "$PARENT.branch(test, true_branch, false_branch)", "name": "branch", "examples": [{"dataset": null, "code": "r.table('marvel').map(r.branch(r.row['victories'] > 100,\n    r.row['name'] + ' is a superhero',\n    r.row['name'] + ' is a hero')\n).run(conn)", "description": "Return the manlier of two heroes:", "can_try": false}]}, "rb": {"body": "$PARENT.branch(test, true_branch, false_branch)", "name": "branch", "examples": [{"dataset": null, "code": "r.table('marvel').map { |row|  r.branch(row[:victories] > 100,\n    row[:name] + ' is a superhero',\n    row[:name] + ' is a hero')\n}.run(conn)", "description": "Return the manlier of two heroes:", "can_try": false}]}, "js": {"body": "$PARENT.branch(test, trueBranch, falseBranch)", "name": "branch", "examples": [{"dataset": null, "code": "r.table('marvel').map(r.branch(r.row('victories').gt(100),\n    r.row('name').add(' is a superhero'),\n    r.row('name').add(' is a hero'))\n).run(conn, callback)", "description": "Return the manlier of two heroes:", "can_try": false}]}}, "tag": "branch", "description": "Evaluate one of two control paths based on the value of an expression. \n<code>branch</code> is effectively an <code>if</code> renamed due to\nlanguage constraints.<br /><br />\nThe type of the result is determined by the type of the branch that\ngets executed.\n", "io": [["r", "any"]], "order": 1}, {"langs": {"py": {"body": "$PARENT.for_each(write_query)", "name": "for_each", "examples": [{"dataset": null, "code": "r.table('marvel').for_each(\n    lambda hero: r.table('villains').get(hero['villainDefeated']).delete()\n).run(conn)", "description": "Now that our heroes have defeated their villains, we can safely remove them from the villain table.", "can_try": false}]}, "rb": {"body": "$PARENT.for_each(write_query)", "name": "for_each", "examples": [{"dataset": null, "code": "r.table('marvel').for_each {|hero|\n  r.table('villains').get(hero[:villain_defeated]).delete\n}.run(conn)", "description": "Now that our heroes have defeated their villains, we can safely remove them from the villain table.", "can_try": false}]}, "js": {"body": "$PARENT.forEach(writeQuery)", "name": "forEach", "examples": [{"dataset": null, "code": "r.table('marvel').forEach(function(hero) {\n return r.table('villains').get(hero('villainDefeated')).delete()\n}).run(conn, callback)", "description": "Now that our heroes have defeated their villains, we can safely remove them from the villain table.", "can_try": false}]}}, "tag": "foreach", "description": "Loop over a sequence, evaluating the given write query for each element.", "io": [["sequence", "object"]], "order": 2}, {"langs": {"py": {"body": "$PARENT.error(message)", "name": "error", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').do(\n  lambda ironman: r.branch(ironman['victories'] < ironman['battles'],\n                            r.error('impossible code path'),\n                            ironman)\n).run(conn)", "description": "Iron Man can't possibly have lost a battle:", "can_try": false}]}, "rb": {"body": "$PARENT.error(message)", "name": "error", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').do { |ironman|\n  r.branch(ironman[:victories] < ironman[:battles],\n    r.error('impossible code path'),\n    ironman)\n}.run(conn)", "description": "Iron Man can't possibly have lost a battle:", "can_try": false}]}, "js": {"body": "$PARENT.error(message)", "name": "error", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').do(function(ironman) {\n return r.branch(ironman('victories').lt(ironman('battles')),\n  r.error('impossible code path'),\n  ironman)\n}).run(conn, callback)", "description": "Iron Man can't possibly have lost a battle:", "can_try": false}]}}, "tag": "error", "description": "Throw a runtime error.  If called with no arguments inside the second argument to `default`, re-throw the current error.", "io": [["r", "error"]], "order": 3}, {"langs": {"py": {"body": "$PARENT.default(default_value)", "name": "default", "examples": [{"dataset": null, "code": "r.table('projects').map(\n  lambda p: p['staff'].default(0) + p['management'].default(0)\n).run(conn)", "description": "Stark Industries made the mistake of trusting an intern with data entry, and now a bunch of fields are missing from some of their documents.  Iron Man takes a break from fighting Mandarin to write some safe analytics queries.", "can_try": false}]}, "rb": {"body": "$PARENT.default(default_value)", "name": "default", "examples": [{"dataset": null, "code": "r.table('projects').map {|p|\n  p[:staff].default(0) + p[:management].default(0)\n}.run(conn)", "description": "Stark Industries made the mistake of trusting an intern with data entry, and now a bunch of fields are missing from some of their documents.  Iron Man takes a break from fighting Mandarin to write some safe analytics queries.", "can_try": false}]}, "js": {"body": "$PARENT.default(default_value)", "name": "default", "examples": [{"dataset": null, "code": "r.table('projects').map(function(p) {\n  return p('staff').default(0).add(p('management').default(0))\n}).run(conn, callback)", "description": "Stark Industries made the mistake of trusting an intern with data entry, and now a bunch of fields are missing from some of their documents.  Iron Man takes a break from fighting Mandarin to write some safe analytics queries.", "can_try": false}]}}, "tag": "default", "description": "Handle non-existence errors.  Tries to evaluate and return its first argument.  If an error related to the absence of a value is thrown in the process, or if its first argument returns null, returns its second argument.  (Alternatively, the second argument may be a function which will be called with either the text of the non-existence error or null.)", "io": [["value", "any"], ["sequence", "any"]], "order": 4}, {"langs": {"py": {"body": "$PARENT.expr(value)", "name": "expr", "examples": [{"dataset": null, "code": "r.expr({'a':'b'}).merge({'b':[1,2,3]}).run(conn)", "description": "Objects wrapped with expr can then be manipulated by RQL API functions.", "can_try": false}]}, "rb": {"body": "$PARENT.expr(value)", "name": "expr", "examples": [{"dataset": null, "code": "r.expr({:a => 'b'}).merge({:b => [1,2,3]}).run(conn)", "description": "Objects wrapped with expr can then be manipulated by RQL API functions.", "can_try": false}, {"dataset": null, "code": "r({:a => 'b'}).merge({:b => [1,2,3]}).run(conn)", "description": "In Ruby, you can also do this with just r.", "can_try": false}]}, "js": {"body": "$PARENT.expr(value)", "name": "expr", "examples": [{"dataset": null, "code": "r.expr({a:'b'}).merge({b:[1,2,3]}).run(conn, callback)", "description": "Objects wrapped with expr can then be manipulated by RQL API functions.", "can_try": false}, {"dataset": null, "code": "r({a: 'b'}).merge({b: [1,2,3]}).run(conn, callback)", "description": "In JavaScript, you can also do this with just r.", "can_try": false}]}}, "tag": "expr", "description": "Construct a RQL JSON object from a native object.", "io": [["r", "value"]], "order": 4}, {"langs": {"py": {"body": "$PARENT.js(js_string)", "name": "js", "examples": [{"dataset": null, "code": "r.js(\"'str1' + 'str2'\").run(conn)", "description": "Concatenate two strings using Javascript'", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.js('(function (row) { return row.magazines > 5; })')).run(conn)", "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server.", "can_try": false}, {"dataset": null, "code": "r.js('while(true) {}', timeout=1.3).run(conn)", "description": "You may also specify a timeout in seconds (defaults to 5).", "can_try": false}]}, "rb": {"body": "$PARENT.js(js_string)", "name": "js", "examples": [{"dataset": null, "code": "r.js(\"'str1' + 'str2'\").run(conn)", "description": "Concatenate two strings using Javascript'", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.js('(function (row) { return row.magazines > 5; })')).run(conn)", "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server.", "can_try": false}, {"dataset": null, "code": "r.js('while(true) {}', :timeout => 1.3).run(conn)", "description": "You may also specify a timeout in seconds (defaults to 5).", "can_try": false}]}, "js": {"body": "$PARENT.js(jsString)", "name": "js", "examples": [{"dataset": null, "code": "r.js(\"'str1' + 'str2'\").run(conn, callback)", "description": "Concatenate two strings using Javascript'", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.js('(function (row) { return row.magazines > 5; })')).run(conn, callback)", "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server.", "can_try": false}, {"dataset": null, "code": "r.js('while(true) {}', {timeout:1.3}).run(conn, callback)", "description": "You may also specify a timeout in seconds (defaults to 5).", "can_try": false}]}}, "tag": "js", "description": "Create a javascript expression.", "io": [["r", "value"]], "order": 5}, {"langs": {"py": {"body": "$PARENT.coerce_to(type_name)", "name": "coerce_to", "examples": [{"dataset": null, "code": "r.table('marvel').coerce_to('array').run(conn)", "description": "Convert a table to an array.", "can_try": false}, {"dataset": null, "code": "r.expr([['name', 'Ironman'], ['victories', 2000]]).coerce_to('object').run(conn)", "description": "Convert an array of pairs into an object.", "can_try": false}, {"dataset": null, "code": "r.expr(1).coerce_to('string').run(conn)", "description": "Convert a number to a string.", "can_try": false}]}, "rb": {"body": "$PARENT.coerce_to(type_name)", "name": "coerce_to", "examples": [{"dataset": null, "code": "r.table('marvel').coerce_to('array').run(conn)", "description": "Convert a table to an array.", "can_try": false}, {"dataset": null, "code": "r.expr([['name', 'Ironman'], ['victories', 2000]]).coerce_to('object').run(conn)", "description": "Convert an array of pairs into an object.", "can_try": false}, {"dataset": null, "code": "r.expr(1).coerce_to('string').run(conn)", "description": "Convert a number to a string.", "can_try": false}]}, "js": {"body": "$PARENT.coerceTo(typeName)", "name": "coerceTo", "examples": [{"dataset": null, "code": "r.table('marvel').coerceTo('array').run(conn, callback)", "description": "Convert a table to an array.", "can_try": false}, {"dataset": null, "code": "r.expr([['name', 'Ironman'], ['victories', 2000]]).coerceTo('object').run(conn, callback)", "description": "Convert an array of pairs into an object.", "can_try": false}, {"dataset": null, "code": "r.expr(1).coerceTo('string').run(conn, callback)", "description": "Convert a number to a string.", "can_try": false}]}}, "tag": "coerce_to", "description": "Converts a value of one type into another. <br /><br />\nYou can convert: a selection, sequence, or object into an ARRAY, \nan array of pairs into an OBJECT, and any DATUM into a STRING.\n", "io": [["sequence", "array"], ["value", "string"], ["array", "object"], ["object", "array"]], "order": 6}, {"langs": {"py": {"body": "$PARENT.type_of()", "name": "type_of", "examples": [{"dataset": null, "code": "r.expr(\"foo\").type_of().run(conn)", "description": "Get the type of a string.", "can_try": false}]}, "rb": {"body": "$PARENT.type_of()", "name": "type_of", "examples": [{"dataset": null, "code": "r.expr(\"foo\").type_of().run(conn)", "description": "Get the type of a string.", "can_try": false}]}, "js": {"body": "$PARENT.typeOf()", "name": "typeOf", "examples": [{"dataset": null, "code": "r.expr(\"foo\").typeOf().run(conn, callback)", "description": "Get the type of a string.", "can_try": false}]}}, "tag": "type_of", "description": "Gets the type of a value.", "io": [["any", "string"]], "order": 7}, {"langs": {"py": {"body": "$PARENT.info()", "name": "info", "examples": [{"dataset": null, "code": "r.table('marvel').info().run(conn)", "description": "Get information about a table such as primary key, or cache size.\n", "can_try": false}]}, "rb": {"body": "$PARENT.info", "name": "info", "examples": [{"dataset": null, "code": "r.table('marvel').info().run(conn)", "description": "Get information about a table such as primary key, or cache size.\n", "can_try": false}]}, "js": {"body": "$PARENT.info()", "name": "info", "examples": [{"dataset": null, "code": "r.table('marvel').info().run(conn, callback)", "description": "Get information about a table such as primary key, or cache size.\n", "can_try": false}]}}, "tag": "info", "description": "Get information about a RQL value.", "io": [["any", "object"]], "order": 8}, {"langs": {"py": {"body": "$PARENT.json(json_string)", "name": "json", "examples": [{"dataset": null, "code": "r.json(\"[1,2,3]\").run(conn)", "description": "Send an array to the server'", "can_try": false}]}, "rb": {"body": "$PARENT.json(json_string)", "name": "json", "examples": [{"dataset": null, "code": "r.json(\"[1,2,3]\").run(conn)", "description": "Send an array to the server'", "can_try": false}]}, "js": {"body": "$PARENT.json(json_string)", "name": "json", "examples": [{"dataset": null, "code": "r.json(\"[1,2,3]\").run(conn, callback)", "description": "Send an array to the server'", "can_try": false}]}}, "tag": "json", "description": "Parse a JSON string on the server.", "io": [["r", "value"]], "order": 115}], "tag": "control", "name": "Control Structures", "description": "These commands provide basic control structures for the composition of complex queries."}], "types": {"selection": {"parents": ["sequence"]}, "sequence": {"parents": ["query"]}, "object": {"parents": ["json"]}, "db": {"parents": null}, "number": {"parents": ["json"]}, "json": {"parents": null}, "cursor": {"parents": null}, "connection": {"parents": null}, "r": {"parents": null}, "bool": {"parents": ["json"]}, "error": {"parents": null}, "query": {"parents": null}, "array": {"parents": ["sequence"]}, "null": {"parents": ["json"]}, "table": {"parents": ["selection"]}}}