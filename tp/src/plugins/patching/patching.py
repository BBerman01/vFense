import os
import logging
import urllib

from hashlib import sha256
from vFense.core._constants import *
from vFense.core.agent._db import total_agents_in_customer
from vFense.errorz.status_codes import DbCodes
from vFense.plugins.patching import AppsKey, AppCollections
from vFense.plugins.patching._constants import CommonAppKeys, \
    FileLocationUris, CommonFileKeys
from vFense.core.decorators import time_it 
from vFense.core.customer import CustomerKeys
from vFense.core.customer.customers import get_customer_property
from vFense.plugins.patching._db import fetch_file_servers_addresses, \
    delete_app_data_for_agentid, update_apps_per_agent_by_customer, \
    update_app_data_by_agentid, update_app_data_by_agentid_and_appid, \
    update_customers_in_apps_by_customer

logging.config.fileConfig('/opt/TopPatch/conf/logging.config')
logger = logging.getLogger('rvapi')


def get_remote_file_size(url):
    """If the agent does not provide us with the size of the file,
        we will go and make a connection to the url provided and
        retrieve the size from the Content-Length

    Args:
        url (str): The url, where the vendor hosts the file.

    Returns:
        String (The size of the file)

    """
    remote_size = None

    if uri:
        try:
            remote_size = (
                urllib
                .urlopen(uri)
                .info()
                .getheaders("Content-Length")[0]
            )

        except Exception as e:
            logger.exception(e)

    return(str(remote_size))


def build_app_id(app):
    """ Return the 64 character hexdigest of the appid.
        The app_id is generated by creating a hexdigest based of the 
        name and the version of the application.

    Args:
        app (dict): Dictionary containing the name and version of the
            application.

    Basic Usage:
        >>> vFense.plugins.patching.patching import build_app_id
        >>> app = {'name': 'gpgv', 'version': '1.4.11-3ubuntu2.5'}
 
    Returns:
        String
        'c726edf62d1d17ca8b420f24bbdc9c8fa58d000b51d31614e3826c2fb37'
    """
    app_id = '%s%s' % (app[AppsKey.Name], app[AppsKey.Version])
    app_id = app_id.encode('utf-8')

    return (sha256(app_id).hexdigest())


def build_agent_app_id(agent_id, app_id):
    """ Return the 64 character hexdigest of the 
        appid and agentid combined

    Args:
        agent_id (str): The 36 character UUID of the agent.
        app_id (str): The 64 character hexdigest of the app id

    Basic Usage:
        >>> vFense.plugins.patching.patching import build_agent_app_id
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> app_id = '15fa819554aca425d7f699e81a2097898b06f00a0f2dd6e8d51a18405360a6eb'
        >>> build_agent_app_id(agent_id, app_id)
 
    Returns:
        String
        '0009281d779a37cc73919656f6575de471237c3ed99f585160708defe8396d3d'
    """
    agent_app_id = (
        agent_id.encode('utf8') +
        app_id.encode('utf8')
    )

    return (sha258(agent_app_id).hexdigest())


def get_base_url(customer_name):
    """Retrieve the base url for downloading packages
    Args:
        customer_name (str): The name of the customer

    Basic Usage:
        >>> vFense.plugins.patching.patching import get_base_url
        >>> customer_name = 'default'
        >>> get_base_url(customer_name)

    Returns:
        String
    """
    return(
        get_customer_property(
            customer_name, CustomerKeys.PackageUrl
        )
    )

def get_download_urls(customer_name, app_id, file_data):
    """Replace the vendor supplied url with the vFense Server urls
    Args:
        customer_name (str): The name of the customer
        app_id (str): The 64 character ID of the app
        file_data (list): List of the file_data that will be manipulated

    Basic Usage:
        >>> from vFense.plugins.patching._db_files import fetch_file_data
        >>> from vFense.plugins.patching.patching import get_download_urls
        >>> customer_name = 'default'
        >>> app_id = 'c726edf62d1d17ca8b420f24bbdc9c8fa58d000b51d31614e3826c2fb37a2929'
        >>> file_data = fetch_file_data(app_id)
        >>> get_download_urls(customer_name, app_id, file_data)

    Returns:
        List of dictionaries
        [
            {
                "file_uris": [
                    "https://10.0.0.15/packages/c726edf62d1d17ca8b420f24bbdc9c8fa58d000b51d31614e3826c2fb37a2929gpgv_1.4.11-3ubuntu2.5_amd64.deb"
                ], 
                "file_name": "gpgv_1.4.11-3ubuntu2.5_amd64.deb", 
                "file_hash": "47dc1daa42e6d53e1a881f4ed9c5472f6732665af2cba082f8fa3931199fb746", 
                "file_size": 185400, 
                "file_uri": "https://10.0.0.15/packages/c726edf62d1d17ca8b420f24bbdc9c8fa58d000b51d31614e3826c2fb37a2929/gpgv_1.4.11-3ubuntu2.5_amd64.deb"
            }
        ]
    """
    uris = []
    url_base = get_base_url(customer_name)
    file_uris_base = None
    url_base = os.path.join(url_base,app_id)
    file_uris_base = os.path.join(FileLocationUris.PACKAGES, app_id)

    for pkg in file_data:
        file_servers = fetch_file_servers_addresses(customer_name)
        file_uris = []
        if file_servers:
            for mm in file_servers:
                file_uris.append(
                    'http://%s/%s%s' %
                    (mm[FileServerKeys.Addresses], file_uris_base, pkg[CommonFileKeys.PKG_NAME])
                )
        file_uris.append(url_base + pkg[CommonFileKeys.PKG_NAME])
        uris.append(
            {
                CommonFileKeys.PKG_NAME: pkg[CommonFileKeys.PKG_NAME],
                CommonFileKeys.PKG_URI: os.path.join(url_base, pkg[CommonFileKeys.PKG_NAME]),
                CommonFileKeys.FILE_URIS: file_uris,
                CommonFileKeys.PKG_SIZE: pkg[CommonFileKeys.PKG_SIZE],
                CommonFileKeys.PKG_HASH: pkg[CommonFileKeys.PKG_HASH]
            }
        )

    return(uris)

@time_it
def update_custom_app_data_by_agentid(agent_id, data, conn=None):
    """Update app data for an agent.
        This function should not be called directly.
    Args:
        agent_id (str): 36 character UUID of the agent.
        data(dict): Dictionary of the application data that
            is being updated for the agent.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_custom_app_data_by_agentid
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> data = {'status': 'pending'}
        >>> table = 'apps_per_agent'
        >>> update_custom_app_data_by_agentid(agent_id, data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    table=AppCollections.CustomAppsPerAgent
    return(update_app_data_by_agentid(agent_id, data, table))

@time_it
def update_supported_app_data_by_agentid(agent_id, data, conn=None):
    """Update app data for an agent.
        This function should not be called directly.
    Args:
        agent_id (str): 36 character UUID of the agent.
        data(dict): Dictionary of the application data that
            is being updated for the agent.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_supported_app_data_by_agentid
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> data = {'status': 'pending'}
        >>> update_supported_app_data_by_agentid(agent_id, data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    table=AppCollections.SupportedAppsPerAgent
    return(update_app_data_by_agentid(agent_id, data, table))

@time_it
def update_vfense_app_data_by_agentid(agent_id, data, conn=None):
    """Update app data for an agent.
        This function should not be called directly.
    Args:
        agent_id (str): 36 character UUID of the agent.
        data(dict): Dictionary of the application data that
            is being updated for the agent.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_vfense_app_data_by_agentid
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> data = {'status': 'pending'}
        >>> update_vfense_app_data_by_agentid(agent_id, data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    table=AppCollections.vFenseAppsPerAgent
    return(update_app_data_by_agentid(agent_id, data, table))

@time_it
def update_os_app_data_by_agentid_and_appid(agent_id, app_id, data):
    """Update the apps_per_agent collection by agent_id and app_id.
        This function should not be called directly.
    Args:
        agent_id (str): 36 character UUID of the agent.
        app_id (str): 64 character ID of the application.
        data(dict): Dictionary of the application data that
            is being updated for the agent.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_os_app_data_by_agentid_and_appid
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> app_id = '15fa819554aca425d7f699e81a2097898b06f00a0f2dd6e8d51a18405360a6eb'
        >>> data = {'status': 'pending'}
        >>> update_os_app_data_by_agentid_and_appid(agent_id, app_id, data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    table = AppCollections.AppsPerAgent
    return(
        update_app_data_by_agentid_and_appid(
            agent_id, app_id, data, table=table
        )
    )
 
@time_it
def update_custom_app_data_by_agentid_and_appid(agent_id, app_id, data):
    """Update the custom_apps_per_agent collection by agent_id and app_id.
        This function should not be called directly.
    Args:
        agent_id (str): 36 character UUID of the agent.
        app_id (str): 64 character ID of the application.
        data(dict): Dictionary of the application data that
            is being updated for the agent.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_custom_app_data_by_agentid_and_appid
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> app_id = '15fa819554aca425d7f699e81a2097898b06f00a0f2dd6e8d51a18405360a6eb'
        >>> data = {'status': 'pending'}
        >>> update_custom_app_data_by_agentid_and_appid(agent_id, app_id, data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    table = AppCollections.CustomAppsPerAgent
    return(
        update_app_data_by_agentid_and_appid(
            agent_id, app_id, data, table=table
        )
    )

@time_it
def update_vfense_app_data_by_agentid_and_appid(agent_id, app_id, data):
    """Update the vfense_apps_per_agent collection by agent_id and app_id.
        This function should not be called directly.
    Args:
        agent_id (str): 36 character UUID of the agent.
        app_id (str): 64 character ID of the application.
        data(dict): Dictionary of the application data that
            is being updated for the agent.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_vfense_app_data_by_agentid_and_appid
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> app_id = '15fa819554aca425d7f699e81a2097898b06f00a0f2dd6e8d51a18405360a6eb'
        >>> data = {'status': 'pending'}
        >>> update_vfense_app_data_by_agentid_and_appid(agent_id, app_id, data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    table = AppCollections.vFenseAppsPerAgent
    return(
        update_app_data_by_agentid_and_appid(
            agent_id, app_id, data, table=table
        )
    )

@time_it
def remove_os_apps_for_agent_by_customer(customer_name):
    """Delete all apps for all agents by customer for 
    Args:
        customer_name (str): Name of the customer.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import remove_os_apps_for_agent_by_customer
        >>> customer_name = 'vFense'
        >>> remove_os_apps_for_agent_by_customer(customer_name)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection_name = AppCollections.AppsPerAgent
    return(
        delete_apps_by_customer(
            customer_name,
            collection_name,
        )
    )

@time_it
def remove_supported_apps_for_agent_by_customer(customer_name):
    """Delete all apps for all agents by customer for 
    Args:
        customer_name (str): Name of the customer.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import remove_supported_apps_for_agent_by_customer
        >>> customer_name = 'vFense'
        >>> remove_supported_apps_for_agent_by_customer(customer_name)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection_name = AppCollections.SupportedAppsPerAgent
    return(
        delete_apps_by_customer(
            customer_name,
            collection_name,
        )
    )

@time_it
def remove_custom_apps_for_agent_by_customer(customer_name):
    """Delete all apps for all agents by customer for 
    Args:
        customer_name (str): Name of the customer.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import remove_custom_apps_for_agent_by_customer
        >>> customer_name = 'vFense'
        >>> remove_custom_apps_for_agent_by_customer(customer_name)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection_name = AppCollections.CustomAppsPerAgent
    return(
        delete_apps_by_customer(
            customer_name,
            collection_name,
        )
    )

@time_it
def remove_vfense_apps_for_agent_by_customer(customer_name):
    """Delete all apps for all agents by customer for 
    Args:
        customer_name (str): Name of the customer.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import remove_vfense_apps_for_agent_by_customer
        >>> customer_name = 'vFense'
        >>> remove_vfense_apps_for_agent_by_customer(customer_name)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection_name = AppCollections.vFenseAppsPerAgent
    return(
        delete_apps_by_customer(
            customer_name,
            collection_name,
        )
    )

@time_it
def update_os_apps_for_agent_by_customer(customer_name, app_data):
    """Update all apps for all agents by customer name
    Args:
        customer_name (str): Name of the customer.
        app_data (dict): The data that you are updating.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_os_apps_for_agent_by_customer
        >>> customer_name = 'vFense'
        >>> app_data = {'customer_name': 'vFense'}
        >>> update_os_apps_for_agent_by_customer(customer_name, app_data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection_name = AppCollections.AppsPerAgent
    return(
        update_apps_per_agent_by_customer(
            customer_name, app_data, collection_name
        )
    )

@time_it
def update_supported_apps_for_agent_by_customer(customer_name, app_data):
    """Update all apps for all agents by customer name
    Args:
        customer_name (str): Name of the customer.
        app_data (dict): The data that you are updating.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_supported_apps_for_agent_by_customer
        >>> customer_name = 'vFense'
        >>> app_data = {'customer_name': 'vFense'}
        >>> update_supported_apps_for_agent_by_customer(customer_name, app_data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection_name = AppCollections.SupportedAppsPerAgent
    return(
        update_apps_per_agent_by_customer(
            customer_name, app_data, collection_name
        )
    )

@time_it
def update_custom_apps_for_agent_by_customer(customer_name, app_data):
    """Update all apps for all agents by customer name
    Args:
        customer_name (str): Name of the customer.
        app_data (dict): The data that you are updating.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_custom_apps_for_agent_by_customer
        >>> customer_name = 'vFense'
        >>> app_data = {'customer_name': 'vFense'}
        >>> update_custom_apps_for_agent_by_customer(customer_name, app_data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection_name = AppCollections.CustomAppsPerAgent
    return(
        update_apps_per_agent_by_customer(
            customer_name, app_data, collection_name
        )
    )

@time_it
def update_vfense_apps_for_agent_by_customer(customer_name, app_data):
    """Update all apps for all agents by customer name.
    Args:
        customer_name (str): Name of the customer.
        app_data (dict): The data that you are updating.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_agent_apps_for_agent_by_customer
        >>> customer_name = 'vFense'
        >>> app_data = {'customer_name': 'vFense'}
        >>> update_agent_apps_for_agent_by_customer(customer_name, app_data)

    Return:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection_name = AppCollections.CustomAppsPerAgent
    return(
        update_apps_per_agent_by_customer(
            customer_name, app_data, collection_name
        )
    )


@time_it
def update_customers_in_supported_apps(
    current_customer, new_customer, remove_customer=False,
    conn=None
    ):
    """ Update the customers list of all applications for the current customer.
    Args:
        current_customer (str): Name of the current customer.
        new_customer (str): Name of the new customer.

    Kwargs:
        remove_customer (bool): True or False
            default = False

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_customers_in_supported_apps
        >>> current_customer = 'default'
        >>> new_customer = 'test'
        >>> remove_customer = True
        >>> update_customers_in_supported_apps(
                current_customer, new_customer, remove_customer
            )

    Returns:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection = AppCollections.SupportedApps
    return(
        update_customers_in_apps_by_customer(
            current_customer, new_customer,
            remove_customer, collection
        )
    )


@time_it
def update_customers_in_custom_apps(
    current_customer, new_customer, remove_customer=False,
    conn=None
    ):
    """ Update the customers list of all applications for the current customer.
    Args:
        current_customer (str): Name of the current customer.
        new_customer (str): Name of the new customer.

    Kwargs:
        remove_customer (bool): True or False
            default = False

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_customers_in_custom_apps
        >>> current_customer = 'default'
        >>> new_customer = 'test'
        >>> remove_customer = True
        >>> update_customers_in_custom_apps(
                current_customer, new_customer, remove_customer
            )

    Returns:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection = AppCollections.CustomApps
    return(
        update_customers_in_apps_by_customer(
            current_customer, new_customer,
            remove_customer, collection
        )
    )


@time_it
def update_customers_in_vfense_apps(
    current_customer, new_customer, remove_customer=False,
    ):
    """ Update the customers list of all applications for the current customer.
    Args:
        current_customer (str): Name of the current customer.
        new_customer (str): Name of the new customer.

    Kwargs:
        remove_customer (bool): True or False
            default = False

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_customers_in_vfense_apps
        >>> current_customer = 'default'
        >>> new_customer = 'test'
        >>> remove_customer = True
        >>> update_customers_in_vfense_apps(
                current_customer, new_customer, remove_customer
            )

    Returns:
        Tuple (status_code, count, error, generated ids)
        >>> (2001, 1, None, [])
    """
    collection = AppCollections.vFenseApps
    return(
        update_customers_in_apps_by_customer(
            current_customer, new_customer,
            remove_customer, collection
        )
    )


@time_it
def remove_all_app_data_for_agent(agent_id):
    """Remove all apps for agent id.
    Args:
        agent_id (str): The 36 character UUID of the agent.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import remove_all_app_data_for_agent
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> remove_all_app_data_for_agent(agent_id)
    """
    delete_app_data_for_agentid(agent_id)
    delete_app_data_for_agentid(agent_id, table=AppCollections.CustomAppsPerAgent)
    delete_app_data_for_agentid(agent_id, table=AppCollections.SupportedAppsPerAgent)
    delete_app_data_for_agent_id(agent_id, table=AppCollections.vFenseAppsPerAgent)


@time_it
def remove_all_apps_for_customer(customer_name):
    """Remove all apps for customer.
    Args:
        customer_name (str): The name of the customer

    Basic Usage:
        >>> from vFense.plugins.patching.patching import remove_all_apps_for_customer
        >>> customer_name = 'default'
        >>> remove_all_apps_for_customer(customer_name)
    """
    remove_os_apps_for_agent_by_customer(customer_name)
    remove_supported_apps_for_agent_by_customer(customer_name)
    remove_custom_apps_for_agent_by_customer(customer_name)
    remove_agent_apps_for_agent_by_customer(customer_name)


@time_it
def change_customer_for_apps_in_customer(
    original_customer, new_customer
    ):
    """Update the customer name for all apps in original customer.
    Args:
        current_customer (str): The name of the current customer.
        new_customer (str): The name of the new customer.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_all_apps_for_customer
        >>> original_customer = 'default'
        >>> new_customer = 'test'
        >>> app_data = {'customer_name': 'test'}
        >>> update_all_apps_for_customer(
                original_customer, new_customer, app_data
            )
    """
    remove_customer = False
    agent_count = total_agents_in_customer(original_customer)
    if agent_count == 0:
        remove_customer = True

    app_data = {CommonAppKeys.CustomerName: new_customer}

    update_os_apps_for_agent_by_customer(
        original_customer, app_data
    )

    update_customers_in_apps_by_customer(
        original_customer, new_customer, remove_customer
    )

    update_supported_apps_for_agent_by_customer(
        original_customer, app_data
    )

    update_customers_in_supported_apps(
        original_customer, new_customer, remove_customer
    )

    update_custom_apps_for_agent_by_customer(
        original_customer, app_data
    )

    update_customers_in_custom_apps(
        original_customer, new_customer, remove_customer
    )

    update_vfense_apps_for_agent_by_customer(
        original_customer, app_data
    )

    update_customers_in_vfense_apps(
        original_customer, new_customer, remove_customer
    )


@time_it
def update_all_app_data_for_agent(agent_id, app_data):
    """Update application data for an agent id.
    Args:
        agent_id (str): The 36 character UUID of the agent.
        app_data (dict): Dictionary of the data you want to update.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_all_app_data_for_agent
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> app_data = {'customer_name': 'default'}
        >>> update_all_app_data_for_agent(agent_id, app_data)
    """
    update_app_data_by_agentid(agent_id, app_data)
    update_custom_app_data_by_agentid(agent_id, app_data)
    update_supported_app_data_by_agentid(agent_id, app_data)
    update_vfense_app_data_by_agentid(agent_id, app_data)


@time_it
def update_app_status_by_agentid_and_appid(
    agent_id, app_id, status=CommonAppKeys.PENDING
    ):
    """Update the application status for an agent
    Args:
        agent_id (str): 36 character UUID of the agent.
        app_id (str): 64 character ID of the application.

    Basic Usage:
        >>> from vFense.plugins.patching.patching import update_app_status_by_agentid_and_appid
        >>> agent_id = '7f242ab8-a9d7-418f-9ce2-7bcba6c2d9dc'
        >>> app_id = '15fa819554aca425d7f699e81a2097898b06f00a0f2dd6e8d51a18405360a6eb'
        >>> status = 'pending'
        >>> update_app_status_by_agentid_and_appid(agent_id, app_id, status)

    Returns:
        Boolean
    """
    updated = False
    if status in CommonAppKeys.ValidPackageStatuses:
        status_code, count, error, generated_ids = (
            update_os_app_data_by_agentid_and_appid(
                agent_id, app_id, status
            )
        )

        if status_code != DbCodes.Replaced and count < 1:
            status_code, count, error, generated_ids = (
                update_custom_app_data_by_agentid(
                    agent_id, app_id, status
                )
            )

            if status_code != DbCodes.Replaced and count < 1:
                status_code, count, error, generated_ids = (
                    update_supported_app_data_by_agentid(
                        agent_id, app_id, status
                    )
                )

                if status_code != DbCodes.Replaced and count < 1:
                    status_code, count, error, generated_ids = (
                        update_vfense_app_data_by_agentid(
                            agent_id, app_id, status
                        )
                    )

        elif status_code == DbCodes.Replaced:
            updated = True

    return(updated)
