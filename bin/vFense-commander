#!/usr/bin/env python
import os
import sys
import json
import ConfigParser
import argparse
import cookielib
import requests

API_VERSION = '/api/v1'
SESSION = requests.session()
JAR = cookielib.CookieJar()
HEADERS = {'Content-type': 'application/json', 'Accept': 'text/plain'}

def get_credentials(config=None):
    """Retrieve the credentials from the config file
    The default config file should be read from your home directory.
    Notes:
        Config file /home/vFense/.vFense.config
        [vFense]
        user_name: global_admin
        password: vFense#123

    Returns:
        Tuple (username, password, url)
    """
    Config = ConfigParser.ConfigParser()
    file_exists = False
    if not config:
        config = (
            os.path.join(
                os.environ.get('HOME'), '.vFense.config'
            )
        )
    if os.path.exists(config):
        file_exists = True
        Config.read(config)
        username = Config.get('vFense', 'user_name')
        password = Config.get('vFense', 'password')
        url = Config.get('vFense', 'url')
    else:
        username = None
        password = None
        url = None

    return(username, password, url, file_exists)

def authenticate(username, password, url):
    """Authenticates against the vFense server
    Args:
        username (str): The username.
        password (str): The password.
        url (str): The vFense url.

    Returns:
        Request object
    """
    login_url = os.path.join(url, 'login')
    creds = {
        'username': username,
        'password': password
    }
    authenticated = (
        SESSION.post(
            login_url, data=json.dumps(creds),
            verify=False, headers=HEADERS, cookies=JAR
        )
    )
    return authenticated

class vFense(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='vFense command line tool.',
            usage='''vfense <api> [<args>]

The various api base calls.
   users      Search, create, edit and delete users.
   views      Search, create, edit and delete views.
   groups     Search, create, edit and delete groups.
   tags       Search, create, edit and delete tags.
   agents     Search, edit and delete agents.
   operations Search operations.
   schedule   Search, create, and delete schedules.
''')
        self.username, self.password, self.url, config_exists = (
            get_credentials()
        )
        if config_exists:
            parser.add_argument(
                'api', help='The api you want to run',
                choices=[
                    'users', 'views', 'groups',
                    'agents', 'tags', 'schedule',
                    'operations', 'dashboard'
                ]
            )
            args = parser.parse_args(sys.argv[1:2])
            if not hasattr(self, args.api):
                print 'Unrecognized api'
                parser.print_help()
                exit(1)
            getattr(self, args.api)()

        else:
            config_file = os.path.join(os.getenv('HOME'), '.vFense.config')
            print 'Missing config {0}'.format(config_file)
            exit(1)

#######################AGENTS MANAGEMENT######################################

    def agents(self):
        self.agents_url = os.path.join(self.url, 'api/v1/agents')
        parser = argparse.ArgumentParser(
            description='''Here you can search for agents with various filters
            as well as modify an agents properties and delete agents.'''
        )
        parser.add_argument(
            'command', help='commands available for agents',
            choices=[
                'search', 'delete', 'delete_multiple',
                'edit', 'get', 'apps'
            ]
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.command == 'search':
            self.agents_search()

        elif args.command == 'delete_multiple':
            self.delete_agents()

        elif args.command == 'delete':
            self.agent_id(args.command)

        elif args.command == 'get':
            self.agent_id(args.command)

        elif args.command == 'apps':
            self.agent_id(args.command)

    def agent_id(self, command):
        parser = argparse.ArgumentParser(
            description='The agent id you are going to manage.'
        )
        parser.add_argument(
            'agent_id', type=str,
            help='The id of the agent you are going to manage.'
        )
        args = parser.parse_args(sys.argv[3:4])
        agent_id = args.agent_id
        self.agent_url = os.path.join(self.url, 'api/v1/agent', agent_id)
        self.agent_id = agent_id
        if command == 'get':
            self.agent_get()

        elif command == 'edit':
            self.agent_edit()

        elif command == 'delete':
            self.agent_delete()

        elif command == 'add_to':
            self.add_views_or_groups_to_user()

        elif command == 'remove_from':
            self.delete_views_or_groups_from_user()

        elif command == 'apps':
            self.agent_apps()


    def agent_get(self):
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.agent_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def agent_edit(self):
        msg = 'Edit the attributes of this agent {0}'.format(self.agent_id)
        parser = argparse.ArgumentParser(description=msg)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--action', dest='action', type=str,
                help='''What action you would like to take..
                This can only be called with --views''',
                choices=['add', 'delete'], default=None
            )
            parser.add_argument(
                '--display_name', dest='display_name', type=str,
                help='''Edit the display name in the vFense UI.
                This does not change the computer name.''', default=None
            )
            parser.add_argument(
                '--environment', dest='environment', type=str,
                help='''Change the environment this agent belongs too.
                Example.. Production, Staging, QA, Dev, etc...''',
                default=None
            )
            parser.add_argument(
                '--views', dest='views', type=str, action='append',
                help='''The views you want this agent added to
                or removed from. This must be called with --action''',
                default=None
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            data = (
                SESSION.put(
                    self.agent_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_agent(self):
        self.agent_url = os.path.join(self.url, 'api/v1/agent', self.agent_id)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.delete(
                    self.agent_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def delete_agents(self):
        parser = argparse.ArgumentParser(
            description='''
        Delete 1 or multiple agents from vFense. This will send the uninstall
        operation to the agent.
        '''
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            parser.add_argument(
                '--agent_ids', dest='agent_ids', action='append',
                help='The ids of the agents, you are deleting.'
            )
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.agents_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def agents_search(self):
        parser = self._common_search_parser()
        parser.description = """Search for agents"""
        parser.add_argument(
            '--sort_by', dest='sort_by', default='computer_name', type=str,
            help='The key that will be used to sort by.', choices=[
                'computer_name', 'display_name', 'os_string',
                'os_code', 'agent_status', 'available_updates',
                'available_vulnerabilities' 'production_level',
                'last_agent_update'
            ]
        )
        parser.add_argument(
            '--query', dest='query',
            help='''The regular expression of the computer name
            or display name you are searching for.'''
        )
        parser.add_argument(
            '--ip', dest='ip',
            help='''The regular expression of the ip address you are
            searching for.'''
        )
        parser.add_argument(
            '--mac', dest='mac',
            help='''The regular expression of the mac address you are
            searching for.'''
        )
        parser.add_argument(
            '--fkey', dest='fkey',
            help='''The property you want to filter by. This option is only
            used with the fval option''',
            choices=[
                'os_string', 'os_code', 'agent_status',  'production_level'
            ]
        )
        parser.add_argument(
            '--fval', dest='fval',
            help='''The value you are filtering by. This option is only used
            with the fkey option'''
        )
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.agents_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content['data'], indent=4)

    def agent_apps(self):
        parser = argparse.ArgumentParser(
            description='''Search or Install applications'''
        )
        parser.add_argument(
            'command', type=str,
                help='''Commands you want to perform with applications.''',
                choices=['search', 'install'], default=None
            )
        args = parser.parse_args(sys.argv[4:5])
        command = args.command
        if command:
            self.agent_apps_type(command)

    def agent_apps_type(self, command):
        parser = argparse.ArgumentParser(
            description='''Which type of applications you want to manage.'''
        )
        parser.add_argument(
            'app_type', type=str,
                help='''The application type.''',
                choices=['os', 'custom', 'supported'], default='os'
            )
        args = parser.parse_args(sys.argv[5:6])
        app_type = args.app_type
        if command == 'search':
            self.agent_apps_status(app_type)

        elif command == 'install':
            self.agent_apps_install(app_type)

    def agent_apps_install(self, app_type):
        self.agent_apps_url = (
            os.path.join(self.agent_url, 'apps', app_type)
        )
        parser = argparse.ArgumentParser(
            description='''Install applications/updates'''
        )
        install  = parser.add_argument_group('Install arguments')
        install.add_argument(
            '--app_id', type=str, action='append',
                help='''The id of the applications you are installing'''
        )
        install.add_argument(
            '--restart', type=str, default='none',
            help='''whether to restart the agent after the updates''',
            choices=['none', 'force', 'needed']
        )
        install.add_argument(
            '--cpu_throttle', type=str, default='normal',
            help='''whether to throttle the cpu on the agent during
            the updates''',
            choices=['idle', 'below_normal', 'normal', 'above_normal', 'high']
        )
        install.add_argument(
            '--net_throttle', type=int, default=0,
            help='''whether to throttle the bandwith on the agent during
            the download of the updates''',
        )
        jobs = parser.add_argument_group('Schedule arguments')
        jobs.add_argument(
            '--job_name', type=str, default=None,
            help='''The name of the scheduled job'''
        )
        jobs.add_argument(
            '--run_date', type=float, default=None,
            help='''The run date in epoch time'''
        )
        args = parser.parse_args(sys.argv[6:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.put(
                    self.agent_apps_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            print data.content


    def agent_apps_status(self, app_type):
        parser = argparse.ArgumentParser(
            description='''The status of the applications you want to search .
            for. installed or available.'''
        )
        parser.add_argument(
            'status', type=str,
                help='''The status of the applications you are searching
                for.''',
                choices=['installed', 'available', 'pending']
            )
        args = parser.parse_args(sys.argv[6:7])
        status = args.status
        if status:
            self.agent_apps_search(status, app_type)

    def agent_apps_search(self, status, app_type):
        parser = self._common_search_parser()
        self.agent_apps_url = (
            os.path.join(
                self.agent_url, 'apps', app_type
            )
        )
        parser.description = (
        '''Search applications by name, or filter by severity
            or filter by vulnerability or sort by release_date, etc...'''
        )
        parser.add_argument(
            '--sort_by', dest='sort_by', default='app_name', type=str,
            help='The key that will be used to sort by.', choices=[
                'app_name', 'version', 'release_date', 'rv_severity',
                'vulnerability_id'
            ]
        )
        search_options = (
            parser.add_argument_group('Search arguments')
        )
        search_options.add_argument(
            '--severity', dest='severity', default=None, type=str,
            help='The severity of the applications you want to filer on.',
            choices=['Critical', 'Recommended', 'Optional']
        )
        search_options.add_argument(
            '--query', dest='query', default=None, type=str,
            help='The regex of the application name you are searching for.',
        )
        search_options.add_argument(
            '--show_hidden', dest='hidden', default='false',
            help='Show hidden applications, default is False.',
        )
        search_options.add_argument(
            '--vuln', dest='vuln', default=None, action='store_true',
            help='Only show applications with vulnerabilities.',
        )
        args = parser.parse_args(sys.argv[7:])
        pay_load = vars(args)
        pay_load['status'] = status
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.agent_apps_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            print data.content

#######################USER MANAGEMENT######################################

    def users(self):
        self.user_url = os.path.join(self.url, 'api/v1/user')
        self.users_url = os.path.join(self.url, 'api/v1/users')
        parser = argparse.ArgumentParser(description='users api calls')
        parser.add_argument(
            'command', help='commands available for users',
            choices=['get', 'edit', 'delete', 'add', 'remove', 'search']
        )
        args = parser.parse_args(sys.argv[2:3])
        if args.command == 'get':
            self.user_name(args.command)

        elif args.command == 'delete':
            self.user_name(args.command)

        elif args.command == 'edit':
            self.user_name(args.command)

        elif args.command == 'add_to':
            self.user_name(args.command)

        elif args.command == 'remove_from':
            self.user_name(args.command)

        elif args.command == 'search':
            self.users_search()

        elif args.command == 'create':
            self.user_create()

        elif args.command == 'delete_multiple':
            self.delete_users()


    def user_name(self, command):
        parser = argparse.ArgumentParser(
            description='the user name you are going to manage.'
        )
        parser.add_argument(
            'user_name', type=str,
            help='The name of the user you want to manage'
        )
        args = parser.parse_args(sys.argv[3:4])
        user_name = args.user_name
        if command == 'get':
            self.user_get(user_name)

        elif command == 'edit':
            self.user_edit(user_name)

        elif command == 'delete':
            self.user_delete(user_name)

        elif command == 'add_to':
            self.add_views_or_groups_to_user(user_name)

        elif command == 'remove_from':
            self.delete_views_or_groups_from_user(user_name)


    def user_get(self, user_name):
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.user_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            print json.dumps(data.content, indent=4)


    def add_views_or_groups_to_user(self, user_name):
        msg = 'Add views or groups to this user {0}'.format(user_name)
        parser = argparse.ArgumentParser(description=msg)
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            add_views = (
                parser.add_argument_group('Add views to user arguments')
            )
            add_views.add_argument(
                '--view_names', dest='view_names', action='append',
                help='Views to add to this user.'
            )
            add_groups = (
                parser.add_argument_group('Add groups to user arguments')
            )
            add_groups.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='Group ids to add to this user.'
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            pay_load['action'] = 'add'
            data = (
                SESSION.post(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            print json.dumps(data.content, indent=4)


    def delete_views_or_groups_from_user(self, user_name):
        msg = 'Remove views or groups from this user {0}'.format(user_name)
        parser = argparse.ArgumentParser(description=msg)
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            remove_views = (
                parser.add_argument_group('Remove views arguments')
            )
            remove_views.add_argument(
                '--view_names', dest='view_names', action='append',
                help='Views to remove from this user.'
            )
            remove_groups = (
                parser.add_argument_group('Remove groups arguments')
            )
            remove_groups.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='Group ids to deleted from this user.'
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            pay_load['action'] = 'delete'
            data = (
                SESSION.post(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            print json.dumps(data.content, indent=4)


    def user_edit(self, user_name):
        msg = 'Edit the attributes of this user {0}'.format(user_name)
        parser = argparse.ArgumentParser(description=msg)
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            edit_passwd = (
                parser.add_argument_group('Edit password arguments')
            )
            edit_passwd.add_argument(
                '--password', dest='password', type=str,
                help='The current password of the user.', default=None
            )
            edit_passwd.add_argument(
                '--new_password', dest='new_password', type=str,
                help='The new password of the user.', default=None
            )
            edit_fullname = (
                parser.add_argument_group('Edit full_name arguments')
            )
            edit_fullname.add_argument(
                '--fullname', dest='fullname', type=str,
                help='Edit the full name of the user.', default=None
            )
            edit_email = (
                parser.add_argument_group('Edit email arguments')
            )
            edit_email.add_argument(
                '--email', dest='email', type=str,
                help='Edit the email of the user.', default=None
            )
            edit_current_view = (
                parser.add_argument_group('Edit current_view arguments')
            )
            edit_current_view.add_argument(
                '--current_view', dest='current_view', type=str,
                help='Change the current view of the user.', default=None
            )
            edit_default_view = (
                parser.add_argument_group('Edit default_view arguments')
            )
            edit_default_view.add_argument(
                '--default_view', dest='default_view', type=str,
                help='Change the default view of the user.', default=None
            )
            edit_user_status = (
                parser.add_argument_group('Edit user status arguments')
            )
            edit_user_status.add_argument(
                '--enabled', dest='enabled', type=str,
                help='Enable or disable a user.', default=None,
                choices=['toggle']
            )
            args = parser.parse_args(sys.argv[4:])
            pay_load = vars(args)
            data = (
                SESSION.put(
                    self.user_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def user_delete(self, user_name):
        self.user_url = os.path.join(self.url, 'api/v1/user', user_name)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.delete(
                    self.user_url, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def delete_users(self):
        parser = argparse.ArgumentParser(
            description='Delete 1 or multiple users.'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            user = parser.add_argument_group('Delete multiple users arguments')
            user.add_argument(
                '--user_names', dest='user_names', action='append',
                help='The names of the users, you are deleting.'
            )
            vfense = authenticate(self.username, self.password, self.url)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.delete(
                    self.users_url, data=json.dumps(pay_load),
                    verify=False, headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def user_create(self):
        parser = argparse.ArgumentParser(
            description='Create a new user'
        )
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            user = parser.add_argument_group('Create user arguments')
            user.add_argument(
                '--user_name', dest='user_name', type=str, required=True,
                help='The name of the user, you are creating.'
            )
            user.add_argument(
                '--password', dest='password', type=str, required=True,
                help='''The password of the user you are createing.
            The password must contain the following: 1 Special characater,
            1 Uppercase, 1 Lowercase, 1 Number, and a total of 8 characters'''
            )
            user.add_argument(
                '--full_name', dest='full_name', type=str,
                help='The full name of the user, you are creating.'
            )
            user.add_argument(
                '--email', dest='email', type=str,
                help='The email address of the user, you are creating.'
            )
            user.add_argument(
                '--enabled', dest='enabled', action='store_true',
                help='Create the user as enabled, the default is disabled',
            )
            user.add_argument(
                '--is_global', dest='is_global', action='store_true',
                help='The email address of the user, you are creating.',
            )
            user.add_argument(
                '--group_ids', dest='group_ids', action='append',
                help='The group ids, this user will be a part of.'
            )
            user.add_argument(
                '--view_context', dest='view_context', type=str,
                help='''The view this user is being created in.
            The default is to use the view of the currently logged in user.'''
            )
            parser.set_defaults(is_global=False)
            parser.set_defaults(enabled=False)
            args = parser.parse_args(sys.argv[3:])
            pay_load = vars(args)
            data = (
                SESSION.post(
                    self.users_url, data=json.dumps(pay_load), verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)

    def users_search(self):
        parser = self._common_search_parser()
        parser.description = 'Search for users.'
        parser.add_argument(
            '--sort_by', dest='sort_by', default='view_name', type=str,
            choices=['view_name'], help='The key that will be used to sort by.'
        )
        args = parser.parse_args(sys.argv[3:])
        pay_load = vars(args)
        vfense = authenticate(self.username, self.password, self.url)
        if vfense.ok:
            data = (
                SESSION.get(
                    self.users_url, params=pay_load, verify=False,
                    headers=HEADERS, cookies=JAR
                )
            )
            content = json.loads(data.content)
            print json.dumps(content, indent=4)


    def _common_search_parser(self):
        parser = argparse.ArgumentParser()
        search = parser.add_argument_group('Common search arguments')
        search.add_argument(
            '--count', dest='count', default=30, type=int,
            help='The max amount of results to return with this query.'
        )
        search.add_argument(
            '--offset', dest='offset', default=0, type=int,
            help='From where the search begins.'
        )
        search.add_argument(
            '--sort', dest='sort', default='asc', type=str,
            choices=['asc', 'desc'], help='From where the search begins.'
        )
        return parser


if __name__ == '__main__':
    vFense()
