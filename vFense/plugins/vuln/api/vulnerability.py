import re
import simplejson as json
import logging
import logging.config

from vFense.core.api.base import BaseHandler
from vFense._constants import VFENSE_LOGGING_CONFIG

from vFense.core.results import ApiResults, ExternalApiResults
from vFense.core.permissions._constants import Permissions
from vFense.core.permissions.decorators import check_permissions
from vFense.plugins.vuln.ubuntu.search.search import RetrieveUbuntuVulns
from vFense.plugins.vuln.redhat.search.search import RetrieveRedhatVulns
from vFense.plugins.vuln.windows.search.search import RetrieveWindowVulns

from vFense.core.decorators import (
    authenticated_request, results_message, api_catch_it
)

logging.config.fileConfig(VFENSE_LOGGING_CONFIG)
logger = logging.getLogger('rvapi')


class VulnerabilityHandler(BaseHandler):
    @api_catch_it
    @authenticated_request
    def get(self, vuln_id):
        results = self.by_vuln_id(vuln_id)

        self.set_status(results.http_status_code)
        self.set_header('Content-Type', 'application/json')
        self.write(json.dumps(results.to_dict_non_null(), indent=4))

    @results_message
    @check_permissions(Permissions.READ)
    def by_vuln_id(self, vuln_id):
        if re.search('^USN', vuln_id, re.IGNORECASE):
            search = RetrieveUbuntuVulns()
            results = search.by_id(vuln_id)
            if results.data:
                results.data = (
                    results.data.pop()
                )
        elif re.search('^MS', vuln_id, re.IGNORECASE):
            search = RetrieveWindowVulns()
            results = search.by_id(vuln_id)
            if results.data:
                results.data = (
                    results.data.pop()
                )
        elif re.search('^RH', vuln_id, re.IGNORECASE):
            search = RetrieveRedhatVulns()
            results = search.by_id(vuln_id)
            if results.data:
                results.data = (
                    results.data.pop()
                )

        return results
